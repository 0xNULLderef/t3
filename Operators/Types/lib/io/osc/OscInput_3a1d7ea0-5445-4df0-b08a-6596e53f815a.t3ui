{
  "Id": "3a1d7ea0-5445-4df0-b08a-6596e53f815a"/*OscInput*/,
  "Description": "Receives OSC input from a connected server. \n\nIn most scenarios it is useful to record some input messages and then pick the relevant addresses by using a [SelectFloatFromDict] or [SelectVec2FromDict] operator.\n\nYou might want to adjust the default OSC port in the settings window to see a visual indication of incoming messages in the timeline bar.",
  "InputUis": [
    {
      "InputId": "87efd3c4-f2df-4996-924f-12c631bad8d8"/*Port*/,
      "Position": {
        "X": -200.0,
        "Y": 0.0
      },
      "Description": "OSC port to listen on. \n\nChanging this parameter will discard recorded values and reconnect.",
      "Min": 0,
      "Max": 65335,
      "Clamp": true
    },
    {
      "InputId": "17d1fe47-430a-4465-92aa-92a4effb515f"/*Address*/,
      "Position": {
        "X": -200.0,
        "Y": 45.0
      },
      "GroupTitle": "Filter value",
      "Description": "An optional filter to the collected OSC addresses. The first match to this filter will be used for the float output parameter.\n\nThis can be useful to directly pick a channel without the need to insert an [SelectFloatFromDict] operator.\n\nThis list is automatically filled with all addresses used by incoming OSC message after connecting to that port. This list is shared between all OscInput operators listing to that port. \nNext to the address there is an indicator for the data-type of that address. E.g. <ff> for a vec2 or <ddd> for a double precision Vec3.",
      "Usage": "CustomDropdown"
    },
    {
      "InputId": "4636d6cf-8233-4281-8840-5ba079b5f1a6"/*DefaultOutputValue*/,
      "Position": {
        "X": -200.0,
        "Y": 90.0
      }
    },
    {
      "InputId": "6c15e743-9a70-47e7-a0a4-75636817e441"/*PrintLogMessages*/,
      "Position": {
        "X": -200.0,
        "Y": 225.0
      },
      "GroupTitle": "Options",
      "Description": "This is only useful for additional debugging, because enable it can lead to excessive log output.\nEnabling it can also have a performance impact."
    }
  ],
  "SymbolChildUis": [],
  "OutputUis": [
    {
      "OutputId": "5544b675-0de2-4a28-97d0-1a67349152fc"/*FirstResult*/,
      "Position": {
        "X": 133.0,
        "Y": 38.0
      }
    },
    {
      "OutputId": "1e2ec3d2-b242-4e6f-8d15-290584315aa9"/*Results*/,
      "Position": {
        "X": 133.0,
        "Y": 138.0
      }
    },
    {
      "OutputId": "8f426b4a-ad49-4ab9-80ee-3df9f5a5aff6"/*LastMessageTime*/,
      "Position": {
        "X": 133.0,
        "Y": 238.0
      }
    },
    {
      "OutputId": "f697732e-46f3-4037-afc5-56f396bd70ad"/*Values*/,
      "Position": {
        "X": 133.0,
        "Y": 338.0
      }
    }
  ],
  "Links": [
    {
      "Id": "a3d23b48-e04d-4d53-80cc-d671a3a5428a",
      "Title": "Video Tutorial",
      "Description": "This example illustrates how to build a quick drawing application with OSC input.",
      "LinkUrl": "https://youtu.be/4xxhQ1JX-ls?si=MGq4M5VoxY7D6_l8",
      "LinkType": "TutorialVideo"
    }
  ]
}