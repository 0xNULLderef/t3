// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace Spout
{
    // DEBUG: class SPOUT_DLLEXP Spout : public spoutGL {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 	Spout();
    // DEBUG: 	~Spout();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// ===================== SENDER =========================
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Set name for sender creation
    // DEBUG: 	//   If no name is specified, the executable name is used.  
    // DEBUG: 	void SetSenderName(const char* sendername = nullptr);
    // DEBUG: 	// Set the sender DX11 shared texture format
    // DEBUG: 	void SetSenderFormat(DWORD dwFormat);
    // DEBUG: 	// Close sender and free resources
    // DEBUG: 	//   A sender is created or updated by all sending functions
    // DEBUG: 	void ReleaseSender();
    // DEBUG: 	// Send texture attached to fbo.
    // DEBUG: 	//   The fbo must be currently bound.  
    // DEBUG: 	//   The sending texture can be larger than the size that the sender is set up for.  
    // DEBUG: 	//   For example, if the application is using only a portion of the allocated texture space,  
    // DEBUG: 	//   such as for Freeframe plugins. (The 2.006 equivalent is DrawToSharedTexture).
    // DEBUG: 	bool SendFbo(GLuint FboID, unsigned int width, unsigned int height, bool bInvert = true);
    // DEBUG: 	// Send OpenGL texture
    // DEBUG: 	bool SendTexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = true, GLuint HostFBO = 0);
    // DEBUG: 	// Send image pixels
    // DEBUG: 	bool SendImage(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Sender status
    // DEBUG: 	bool IsInitialized();
    // DEBUG: 	// Sender name
    // DEBUG: 	const char * GetName();
    // DEBUG: 	// Sender width
    // DEBUG: 	unsigned int GetWidth();
    // DEBUG: 	// Sender height
    // DEBUG: 	unsigned int GetHeight();
    // DEBUG: 	// Sender frame rate
    // DEBUG: 	double GetFps();
    // DEBUG: 	// Sender frame number
    // DEBUG: 	long GetFrame();
    // DEBUG: 	// Sender share handle
    // DEBUG: 	HANDLE GetHandle();
    // DEBUG: 	// Sender sharing method
    // DEBUG: 	bool GetCPU();
    // DEBUG: 	// Sender GL/DX hardware compatibility
    // DEBUG: 	bool GetGLDX();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// ====================== RECEIVER ===========================
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Specify sender for connection
    // DEBUG: 	//   If a name is specified, the receiver will not connect to any other unless the user selects one
    // DEBUG: 	//   If that sender closes, the receiver will wait for the nominated sender to open 
    // DEBUG: 	//   If no name is specified, the receiver will connect to the active sender
    // DEBUG: 	void SetReceiverName(const char * sendername = nullptr);
    // DEBUG: 	// Close receiver and release resources ready to connect to another sender
    // DEBUG: 	void ReleaseReceiver();
    // DEBUG: 	// Receive shared texture
    // DEBUG: 	//   Connect to a sender and retrieve texture details ready for access
    // DEBUG: 	//	 (see BindSharedTexture and UnBindSharedTexture)
    // DEBUG: 	bool ReceiveTexture();
    // DEBUG: 	// Receive OpenGL texture
    // DEBUG: 	// 	 Connect to a sender and inform the application to update
    // DEBUG: 	//   the receiving texture if it has changed dimensions
    // DEBUG: 	//   For no change, copy the sender shared texture to the application texture.
    // DEBUG: 	//   The texture must be RGBA of dimension (width * height) 
    // DEBUG: 	bool ReceiveTexture(GLuint TextureID, GLuint TextureTarget, bool bInvert = false, GLuint HostFbo = 0);
    // DEBUG: 	// Receive image pixels
    // DEBUG: 	//   Connect to a sender and inform the application to update
    // DEBUG: 	//   the receiving buffer if it has changed dimensions
    // DEBUG: 	//   For no change, copy the sender shared texture to the pixel buffer
    // DEBUG: 	//   The receiving image can be RGBA, BGRA, RGB or BGR formats of dimension (width * height) 
    // DEBUG: 	bool ReceiveImage(unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFbo = 0);
    // DEBUG: 	// Query whether the sender has changed
    // DEBUG: 	//   Checked at every cycle before receiving data
    // DEBUG: 	bool IsUpdated();
    // DEBUG: 	// Query sender connection
    // DEBUG: 	//   If the sender closes, receiving functions return false,  
    // DEBUG: 	bool IsConnected();
    // DEBUG: 	// Query received frame status
    // DEBUG: 	//   The receiving texture or pixel buffer is only refreshed if the sender has produced a new frame  
    // DEBUG: 	//   This can be queried to process texture data only for new frames
    // DEBUG: 	bool IsFrameNew();
    // DEBUG: 	// Received sender name
    // DEBUG: 	const char * GetSenderName();
    // DEBUG: 	// Received sender width
    // DEBUG: 	unsigned int GetSenderWidth();
    // DEBUG: 	// Received sender height
    // DEBUG: 	unsigned int GetSenderHeight();
    // DEBUG: 	// Received sender DX11 texture format
    // DEBUG: 	DWORD GetSenderFormat();
    // DEBUG: 	// Received sender frame rate
    // DEBUG: 	double GetSenderFps();
    // DEBUG: 	// Received sender frame number
    // DEBUG: 	long GetSenderFrame();
    // DEBUG: 	// Received sender share handle
    // DEBUG: 	HANDLE GetSenderHandle();
    // DEBUG: 	// Received sender sharing method
    // DEBUG: 	bool GetSenderCPU();
    // DEBUG: 	// Received sender GL/DX hardware compatibility
    // DEBUG: 	bool GetSenderGLDX();
    // DEBUG: 	// Open sender selection dialog
    // DEBUG: 	void SelectSender();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Frame count
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Enable or disable frame counting globally
    // DEBUG: 	void SetFrameCount(bool bEnable);
    // DEBUG: 	// Disable frame counting specifically for this application
    // DEBUG: 	void DisableFrameCount();
    // DEBUG: 	// Return frame count status
    // DEBUG: 	bool IsFrameCountEnabled();
    // DEBUG: 	// Frame rate control
    // DEBUG: 	void HoldFps(int fps);
    // DEBUG: 	// Signal sync event 
    // DEBUG: 	void SetFrameSync(const char* SenderName);
    // DEBUG: 	// Wait or test for a sync event
    // DEBUG: 	bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0);
    // DEBUG: 	
    // DEBUG: 	//
    // DEBUG: 	// Sender names
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Number of senders
    // DEBUG: 	int GetSenderCount();
    // DEBUG: 	// Sender item name
    // DEBUG: 	bool GetSender(int index, char* sendername, int MaxSize = 256);
    // DEBUG: 	// Sender information
    // DEBUG: 	bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat);
    // DEBUG: 	// Current active sender
    // DEBUG: 	bool GetActiveSender(char* sendername);
    // DEBUG: 	// Set sender as active
    // DEBUG: 	bool SetActiveSender(const char* sendername);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Adapter functions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// The number of graphics adapters in the system
    // DEBUG: 	int GetNumAdapters();
    // DEBUG: 	// Get adapter item name
    // DEBUG: 	bool GetAdapterName(int index, char *adaptername, int maxchars = 256);
    // DEBUG: 	// Return current adapter name
    // DEBUG: 	char * AdapterName();
    // DEBUG: 	// Get current adapter index
    // DEBUG: 	int GetAdapter();
    // DEBUG: 	// Set graphics adapter for output
    // DEBUG: 	bool SetAdapter(int index = 0);
    // DEBUG: 	// Get sender adapter index and name for a given sender
    // DEBUG: 	int GetSenderAdapter(const char* sendername, char* adaptername = nullptr, int maxchars = 256);
    // DEBUG: 	// Get the current adapter description
    // DEBUG: 	bool GetAdapterInfo(char *renderdescription, char *displaydescription, int maxchars);
    // DEBUG: 
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Find the index of the NVIDIA adapter in a multi-adapter system
    // DEBUG: 	bool FindNVIDIA(int &nAdapter);
    // DEBUG: 	// Graphics adapter details
    // DEBUG: 	bool GetAdapterInfo(char* renderadapter,
    // DEBUG: 		char* renderdescription, char* renderversion,
    // DEBUG: 		char* displaydescription, char* displayversion,
    // DEBUG: 		int maxsize, bool &bUseDX9);
    // DEBUG: 
    // DEBUG: 	// Create a sender
    // DEBUG: 	bool CreateSender(const char *Sendername, unsigned int width = 0, unsigned int height = 0, DWORD dwFormat = 0);
    // DEBUG: 	// Update a sender
    // DEBUG: 	bool UpdateSender(const char* Sendername, unsigned int width, unsigned int height);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Create receiver connection
    // DEBUG: 	bool CreateReceiver(char* Sendername, unsigned int &width, unsigned int &height, bool bUseActive = false);
    // DEBUG: 	// Check receiver connection
    // DEBUG: 	bool CheckReceiver(char* Sendername, unsigned int &width, unsigned int &height, bool &bConnected);
    // DEBUG: 	// Receive OpenGL texture
    // DEBUG: 	bool ReceiveTexture(char* Sendername, unsigned int &width, unsigned int &height, GLuint TextureID = 0, GLuint TextureTarget = 0, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Receive image pixels
    // DEBUG: 	bool ReceiveImage(char* Sendername, unsigned int &width, unsigned int &height, unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Open dialog for the user to select a sender
    // DEBUG: 	//   Optional message argument
    // DEBUG: 	bool SelectSenderPanel(const char* message = nullptr);
    // DEBUG: 	// Receiver detect sender selection
    // DEBUG: 	bool CheckSpoutPanel(char *sendername, int maxchars = 256);
    // DEBUG: 
    // DEBUG: 
    // DEBUG: 	// Legacy OpenGL Draw functions
    // DEBUG: 	// See _SpoutCommon.h_ #define legacyOpenGL
    // DEBUG: #ifdef legacyOpenGL
    // DEBUG: 	// Render the shared texture
    // DEBUG: 	bool DrawSharedTexture(float max_x = 1.0, float max_y = 1.0, float aspect = 1.0, bool bInvert = true, GLuint HostFBO = 0);
    // DEBUG: 	// Render a texture to the shared texture. 
    // DEBUG: 	bool DrawToSharedTexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, float max_x = 1.0, float max_y = 1.0, float aspect = 1.0, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: protected:
    // DEBUG: 
    // DEBUG: 	// Sender creation and change
    // DEBUG: 	bool CheckSender(unsigned int width, unsigned int height);
    // DEBUG: 	// Create receiver connection
    // DEBUG: 	void InitReceiver(const char * sendername, unsigned int width, unsigned int height, DWORD dwFormat);
    // DEBUG: 	// Receiver find sender and retrieve information
    // DEBUG: 	bool ReceiveSenderData();
    // DEBUG: 	
    // DEBUG: 	//
    // DEBUG: 	// Class globals
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Graphics adapter name
    // DEBUG: 	char m_AdapterName[256];
    // DEBUG: 	bool m_bAdapt; // Receiver adapt to the sender adapter
    // DEBUG: 
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class Spout : global::Spout.SpoutGL, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1960)]
        public new partial struct __Internal
        {
            internal __IntPtr vfptr_spoutGL;
            internal global::Spout.SpoutDirectX.__Internal spoutdx;
            internal global::Spout.SpoutCopy.__Internal spoutcopy;
            internal global::Spout.SpoutSenderNames.__Internal sendernames;
            internal global::Spout.SpoutFrameCount.__Internal frame;
            internal global::Spout.SpoutSharedMemory.__Internal memoryshare;
            internal fixed uint m_pbo[4];
            internal int PboIndex;
            internal int NextPboIndex;
            internal int m_nBuffers;
            internal fixed long m_pStaging[2];
            internal int m_Index;
            internal int m_NextIndex;
            internal fixed sbyte m_SenderName[256];
            internal fixed sbyte m_SenderNameSetup[256];
            internal uint m_Width;
            internal uint m_Height;
            internal uint m_fbo;
            internal uint m_TexID;
            internal uint m_TexWidth;
            internal uint m_TexHeight;
            internal uint m_TexFormat;
            internal uint m_glTexture;
            internal __IntPtr m_pSharedTexture;
            internal __IntPtr m_dxShareHandle;
            internal uint m_dwFormat;
            internal global::DXGI_FORMAT m_DX11format;
            internal __IntPtr m_hInteropDevice;
            internal __IntPtr m_hInteropObject;
            internal __IntPtr m_hWnd;
            internal int m_SpoutVersion;
            internal __IntPtr m_hdc;
            internal __IntPtr m_hwndButton;
            internal __IntPtr m_hRc;
            internal byte m_bConnected;
            internal byte m_bUpdated;
            internal byte m_bInitialized;
            internal byte m_bMirror;
            internal byte m_bSwapRB;
            internal byte m_bGLDXdone;
            internal byte m_bAuto;
            internal byte m_bCPU;
            internal byte m_bUseGLDX;
            internal byte m_bTextureShare;
            internal byte m_bCPUshare;
            internal byte m_bMemoryShare;
            internal byte m_bSenderCPU;
            internal byte m_bSenderGLDX;
            internal byte m_bSpoutPanelOpened;
            internal byte m_bSpoutPanelActive;
            internal global::SHELLEXECUTEINFOA.__Internal m_ShExecInfo;
            internal uint m_caps;
            internal byte m_bGLDXavailable;
            internal byte m_bFBOavailable;
            internal byte m_bBLITavailable;
            internal byte m_bPBOavailable;
            internal byte m_bSWAPavailable;
            internal byte m_bBGRAavailable;
            internal byte m_bCOPYavailable;
            internal byte m_bCONTEXTavailable;
            internal byte m_bExtensionsLoaded;
            internal fixed byte m_AdapterNamePadding[3];
            internal fixed sbyte m_AdapterName[256];
            internal byte m_bAdapt;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0Spout@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0Spout@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseSender@Spout@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseSender(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendFbo@Spout@@QEAA_NIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendFbo(__IntPtr __instance, uint FboID, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendTexture@Spout@@QEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendTexture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendImage@Spout@@QEAA_NPEBEIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendImage(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetReceiverName@Spout@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetReceiverName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseReceiver@Spout@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseReceiver(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@Spout@@QEAA_NII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, uint TextureID, uint TextureTarget, bool bInvert, uint HostFbo);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveImage@Spout@@QEAA_NPEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, byte* pixels, uint glFormat, bool bInvert, uint HostFbo);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SelectSender@Spout@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SelectSender(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameCount@Spout@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameCount(__IntPtr __instance, bool bEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableFrameCount@Spout@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?HoldFps@Spout@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameSync@Spout@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitFrameSync@Spout@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSender@Spout@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderInfo@Spout@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSender@Spout@@QEAA_NPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetActiveSender@Spout@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterName@Spout@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAdapter@Spout@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetAdapter(__IntPtr __instance, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderAdapter@Spout@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderAdapter(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@Spout@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* renderdescription, sbyte* displaydescription, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindNVIDIA@Spout@@QEAA_NAEAH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindNVIDIA(__IntPtr __instance, int* nAdapter);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@Spout@@QEAA_NPEAD0000HAEA_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* renderadapter, sbyte* renderdescription, sbyte* renderversion, sbyte* displaydescription, sbyte* displayversion, int maxsize, bool* bUseDX9);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateSender@Spout@@QEAA_NPEBDIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Sendername, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UpdateSender@Spout@@QEAA_NPEBDII@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UpdateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Sendername, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateReceiver@Spout@@QEAA_NPEADAEAI1_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateReceiver(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, bool bUseActive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckReceiver@Spout@@QEAA_NPEADAEAI1AEA_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckReceiver(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, bool* bConnected);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@Spout@@QEAA_NPEADAEAI1II_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, uint TextureID, uint TextureTarget, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveImage@Spout@@QEAA_NPEADAEAI1PEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, byte* pixels, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SelectSenderPanel@Spout@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SelectSenderPanel(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSpoutPanel@Spout@@QEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSpoutPanel(__IntPtr __instance, sbyte* sendername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSender@Spout@@IEAA_NII@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSender(__IntPtr __instance, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?InitReceiver@Spout@@IEAAXPEBDIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitReceiver(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveSenderData@Spout@@IEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveSenderData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderName@Spout@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderName@Spout@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFormat@Spout@@QEAAKXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderFormat(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderFormat@Spout@@QEAAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSenderFormat(__IntPtr __instance, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsInitialized@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsInitialized(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetName@Spout@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetWidth@Spout@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHeight@Spout@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetFps@Spout@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetFrame@Spout@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHandle@Spout@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPU@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPU(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetGLDX@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetGLDX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsUpdated@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsUpdated(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsConnected@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsConnected(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameNew@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameNew(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderWidth@Spout@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderHeight@Spout@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFps@Spout@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetSenderFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFrame@Spout@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderHandle@Spout@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCPU@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderCPU(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderGLDX@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderGLDX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameCountEnabled@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCount@Spout@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNumAdapters@Spout@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AdapterName@Spout@@QEAAPEADXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* AdapterName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapter@Spout@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);
        }

        internal static new Spout __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new Spout(native.ToPointer(), skipVTables);
        }

        internal static new Spout __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (Spout)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static new Spout __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (Spout)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static Spout __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Spout(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::Spout.Spout.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private Spout(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Spout(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
            if (!skipVTables)
                SetupVTables(true);
        }

        // DEBUG: Spout()
        public Spout()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Spout.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "Spout.Spout");
        }

        // DEBUG: Spout
        public Spout(global::Spout.Spout _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.Spout.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "Spout.Spout");
        }

        ~Spout()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (callNativeDtor)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::Spout.Delegates.Action___IntPtr_int>(0, 0);
                ___dtorDelegate(__Instance, 0);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: void ReleaseSender()
        public void ReleaseSender()
        {
            __Internal.ReleaseSender(__Instance);
        }

        // DEBUG: bool SendFbo(GLuint FboID, unsigned int width, unsigned int height, bool bInvert = true)
        public bool SendFbo(uint FboID, uint width, uint height, bool bInvert)
        {
            var __ret = __Internal.SendFbo(__Instance, FboID, width, height, bInvert);
            return __ret;
        }

        // DEBUG: bool SendTexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = true, GLuint HostFBO = 0)
        public bool SendTexture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.SendTexture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool SendImage(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0)
        public bool SendImage(byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.SendImage(__Instance, pixels, width, height, glFormat, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: void SetReceiverName(const char * sendername = nullptr)
        public void SetReceiverName(string sendername)
        {
            __Internal.SetReceiverName(__Instance, sendername);
        }

        // DEBUG: void ReleaseReceiver()
        public void ReleaseReceiver()
        {
            __Internal.ReleaseReceiver(__Instance);
        }

        // DEBUG: bool ReceiveTexture()
        public bool ReceiveTexture()
        {
            var __ret = __Internal.ReceiveTexture(__Instance);
            return __ret;
        }

        // DEBUG: bool ReceiveTexture(GLuint TextureID, GLuint TextureTarget, bool bInvert = false, GLuint HostFbo = 0)
        public bool ReceiveTexture(uint TextureID, uint TextureTarget, bool bInvert, uint HostFbo)
        {
            var __ret = __Internal.ReceiveTexture(__Instance, TextureID, TextureTarget, bInvert, HostFbo);
            return __ret;
        }

        // DEBUG: bool ReceiveImage(unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFbo = 0)
        public bool ReceiveImage(byte* pixels, uint glFormat, bool bInvert, uint HostFbo)
        {
            var __ret = __Internal.ReceiveImage(__Instance, pixels, glFormat, bInvert, HostFbo);
            return __ret;
        }

        // DEBUG: void SelectSender()
        public void SelectSender()
        {
            __Internal.SelectSender(__Instance);
        }

        // DEBUG: void SetFrameCount(bool bEnable)
        public void SetFrameCount(bool bEnable)
        {
            __Internal.SetFrameCount(__Instance, bEnable);
        }

        // DEBUG: void DisableFrameCount()
        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        // DEBUG: void HoldFps(int fps)
        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        // DEBUG: void SetFrameSync(const char* SenderName)
        public void SetFrameSync(string SenderName)
        {
            __Internal.SetFrameSync(__Instance, SenderName);
        }

        // DEBUG: bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0)
        public bool WaitFrameSync(string SenderName, uint dwTimeout)
        {
            var __ret = __Internal.WaitFrameSync(__Instance, SenderName, dwTimeout);
            return __ret;
        }

        // DEBUG: bool GetSender(int index, char* sendername, int MaxSize = 256)
        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var __ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return __ret;
        }

        // DEBUG: bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat)
        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var __ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return __ret;
                    }
                }
            }
        }

        // DEBUG: bool GetActiveSender(char* sendername)
        public bool GetActiveSender(sbyte* sendername)
        {
            var __ret = __Internal.GetActiveSender(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool SetActiveSender(const char* sendername)
        public bool SetActiveSender(string sendername)
        {
            var __ret = __Internal.SetActiveSender(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool GetAdapterName(int index, char *adaptername, int maxchars = 256)
        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var __ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return __ret;
        }

        // DEBUG: bool SetAdapter(int index = 0)
        public bool SetAdapter(int index)
        {
            var __ret = __Internal.SetAdapter(__Instance, index);
            return __ret;
        }

        // DEBUG: int GetSenderAdapter(const char* sendername, char* adaptername = nullptr, int maxchars = 256)
        public int GetSenderAdapter(string sendername, sbyte* adaptername, int maxchars)
        {
            var __ret = __Internal.GetSenderAdapter(__Instance, sendername, adaptername, maxchars);
            return __ret;
        }

        // DEBUG: bool GetAdapterInfo(char *renderdescription, char *displaydescription, int maxchars)
        public bool GetAdapterInfo(sbyte* renderdescription, sbyte* displaydescription, int maxchars)
        {
            var __ret = __Internal.GetAdapterInfo(__Instance, renderdescription, displaydescription, maxchars);
            return __ret;
        }

        // DEBUG: bool FindNVIDIA(int &nAdapter)
        public bool FindNVIDIA(ref int nAdapter)
        {
            fixed (int* __nAdapter0 = &nAdapter)
            {
                var __arg0 = __nAdapter0;
                var __ret = __Internal.FindNVIDIA(__Instance, __arg0);
                return __ret;
            }
        }

        // DEBUG: bool GetAdapterInfo(char* renderadapter,
        // DEBUG: 		char* renderdescription, char* renderversion,
        // DEBUG: 		char* displaydescription, char* displayversion,
        // DEBUG: 		int maxsize, bool &bUseDX9)
        public bool GetAdapterInfo(sbyte* renderadapter, sbyte* renderdescription, sbyte* renderversion, sbyte* displaydescription, sbyte* displayversion, int maxsize, ref bool bUseDX9)
        {
            fixed (bool* __bUseDX96 = &bUseDX9)
            {
                var __arg6 = __bUseDX96;
                var __ret = __Internal.GetAdapterInfo(__Instance, renderadapter, renderdescription, renderversion, displaydescription, displayversion, maxsize, __arg6);
                return __ret;
            }
        }

        // DEBUG: bool CreateSender(const char *Sendername, unsigned int width = 0, unsigned int height = 0, DWORD dwFormat = 0)
        public bool CreateSender(string Sendername, uint width, uint height, uint dwFormat)
        {
            var __ret = __Internal.CreateSender(__Instance, Sendername, width, height, dwFormat);
            return __ret;
        }

        // DEBUG: bool UpdateSender(const char* Sendername, unsigned int width, unsigned int height)
        public bool UpdateSender(string Sendername, uint width, uint height)
        {
            var __ret = __Internal.UpdateSender(__Instance, Sendername, width, height);
            return __ret;
        }

        // DEBUG: bool CreateReceiver(char* Sendername, unsigned int &width, unsigned int &height, bool bUseActive = false)
        public bool CreateReceiver(sbyte* Sendername, ref uint width, ref uint height, bool bUseActive)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var __ret = __Internal.CreateReceiver(__Instance, Sendername, __arg1, __arg2, bUseActive);
                    return __ret;
                }
            }
        }

        // DEBUG: bool CheckReceiver(char* Sendername, unsigned int &width, unsigned int &height, bool &bConnected)
        public bool CheckReceiver(sbyte* Sendername, ref uint width, ref uint height, ref bool bConnected)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (bool* __bConnected3 = &bConnected)
                    {
                        var __arg3 = __bConnected3;
                        var __ret = __Internal.CheckReceiver(__Instance, Sendername, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        // DEBUG: bool ReceiveTexture(char* Sendername, unsigned int &width, unsigned int &height, GLuint TextureID = 0, GLuint TextureTarget = 0, bool bInvert = false, GLuint HostFBO = 0)
        public bool ReceiveTexture(sbyte* Sendername, ref uint width, ref uint height, uint TextureID, uint TextureTarget, bool bInvert, uint HostFBO)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var __ret = __Internal.ReceiveTexture(__Instance, Sendername, __arg1, __arg2, TextureID, TextureTarget, bInvert, HostFBO);
                    return __ret;
                }
            }
        }

        // DEBUG: bool ReceiveImage(char* Sendername, unsigned int &width, unsigned int &height, unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0)
        public bool ReceiveImage(sbyte* Sendername, ref uint width, ref uint height, byte* pixels, uint glFormat, bool bInvert, uint HostFBO)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var __ret = __Internal.ReceiveImage(__Instance, Sendername, __arg1, __arg2, pixels, glFormat, bInvert, HostFBO);
                    return __ret;
                }
            }
        }

        // DEBUG: bool SelectSenderPanel(const char* message = nullptr)
        public bool SelectSenderPanel(string message)
        {
            var __ret = __Internal.SelectSenderPanel(__Instance, message);
            return __ret;
        }

        // DEBUG: bool CheckSpoutPanel(char *sendername, int maxchars = 256)
        public bool CheckSpoutPanel(sbyte* sendername, int maxchars)
        {
            var __ret = __Internal.CheckSpoutPanel(__Instance, sendername, maxchars);
            return __ret;
        }

        // DEBUG: bool CheckSender(unsigned int width, unsigned int height)
        protected bool CheckSender(uint width, uint height)
        {
            var __ret = __Internal.CheckSender(__Instance, width, height);
            return __ret;
        }

        // DEBUG: void InitReceiver(const char * sendername, unsigned int width, unsigned int height, DWORD dwFormat)
        protected void InitReceiver(string sendername, uint width, uint height, uint dwFormat)
        {
            __Internal.InitReceiver(__Instance, sendername, width, height, dwFormat);
        }

        // DEBUG: bool ReceiveSenderData()
        protected bool ReceiveSenderData()
        {
            var __ret = __Internal.ReceiveSenderData(__Instance);
            return __ret;
        }

        protected sbyte[] MAdapterName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_AdapterName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_AdapterName[i] = value[i];
                }
            }
        }

        protected bool MBAdapt
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAdapt != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAdapt = (byte) (value ? 1 : 0);
            }
        }

        public string SenderName
        {
            get
            {
                var __ret = __Internal.GetSenderName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
            }

            set
            {
                __Internal.SetSenderName(__Instance, value);
            }
        }

        public uint SenderFormat
        {
            get
            {
                var __ret = __Internal.GetSenderFormat(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetSenderFormat(__Instance, value);
            }
        }

        public bool IsInitialized
        {
            get
            {
                var __ret = __Internal.IsInitialized(__Instance);
                return __ret;
            }
        }

        public string Name
        {
            get
            {
                var __ret = __Internal.GetName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
            }
        }

        public uint Width
        {
            get
            {
                var __ret = __Internal.GetWidth(__Instance);
                return __ret;
            }
        }

        public uint Height
        {
            get
            {
                var __ret = __Internal.GetHeight(__Instance);
                return __ret;
            }
        }

        public double Fps
        {
            get
            {
                var __ret = __Internal.GetFps(__Instance);
                return __ret;
            }
        }

        public int Frame
        {
            get
            {
                var __ret = __Internal.GetFrame(__Instance);
                return __ret;
            }
        }

        public __IntPtr Handle
        {
            get
            {
                var __ret = __Internal.GetHandle(__Instance);
                return __ret;
            }
        }

        public bool CPU
        {
            get
            {
                var __ret = __Internal.GetCPU(__Instance);
                return __ret;
            }
        }

        public bool GLDX
        {
            get
            {
                var __ret = __Internal.GetGLDX(__Instance);
                return __ret;
            }
        }

        public bool IsUpdated
        {
            get
            {
                var __ret = __Internal.IsUpdated(__Instance);
                return __ret;
            }
        }

        public bool IsConnected
        {
            get
            {
                var __ret = __Internal.IsConnected(__Instance);
                return __ret;
            }
        }

        public bool IsFrameNew
        {
            get
            {
                var __ret = __Internal.IsFrameNew(__Instance);
                return __ret;
            }
        }

        public uint SenderWidth
        {
            get
            {
                var __ret = __Internal.GetSenderWidth(__Instance);
                return __ret;
            }
        }

        public uint SenderHeight
        {
            get
            {
                var __ret = __Internal.GetSenderHeight(__Instance);
                return __ret;
            }
        }

        public double SenderFps
        {
            get
            {
                var __ret = __Internal.GetSenderFps(__Instance);
                return __ret;
            }
        }

        public int SenderFrame
        {
            get
            {
                var __ret = __Internal.GetSenderFrame(__Instance);
                return __ret;
            }
        }

        public __IntPtr SenderHandle
        {
            get
            {
                var __ret = __Internal.GetSenderHandle(__Instance);
                return __ret;
            }
        }

        public bool SenderCPU
        {
            get
            {
                var __ret = __Internal.GetSenderCPU(__Instance);
                return __ret;
            }
        }

        public bool SenderGLDX
        {
            get
            {
                var __ret = __Internal.GetSenderGLDX(__Instance);
                return __ret;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var __ret = __Internal.IsFrameCountEnabled(__Instance);
                return __ret;
            }
        }

        public int SenderCount
        {
            get
            {
                var __ret = __Internal.GetSenderCount(__Instance);
                return __ret;
            }
        }

        public int NumAdapters
        {
            get
            {
                var __ret = __Internal.GetNumAdapters(__Instance);
                return __ret;
            }
        }

        public sbyte* AdapterName
        {
            get
            {
                var __ret = __Internal.AdapterName(__Instance);
                return __ret;
            }
        }

        public int Adapter
        {
            get
            {
                var __ret = __Internal.GetAdapter(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetAdapter(__Instance, value);
            }
        }

        #region Virtual table interop

        // ~Spout()
        private static global::Spout.Delegates.Action___IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance, int delete)
        {
            var __target = global::Spout.Spout.__GetInstance(__instance);
            __target.Dispose(disposing: true, callNativeDtor: true);
        }

        internal static new class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1);
                            ManagedVTablesDtorOnly[0][0] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1);
                            ManagedVTables[0][0] = Thunks[0];
                            VTables.Methods[0] = new Delegate[1];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        internal override CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal override void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    namespace Spoututils
    {
        // DEBUG: enum SpoutLogLevel {
        // DEBUG: 		// Disable all messages
        // DEBUG: 		SPOUT_LOG_SILENT,
        // DEBUG: 		// Show all messages
        // DEBUG: 		SPOUT_LOG_VERBOSE,
        // DEBUG: 		// Show information messages - default
        // DEBUG: 		SPOUT_LOG_NOTICE,
        // DEBUG: 		// Show warning, errors and fatal
        // DEBUG: 		SPOUT_LOG_WARNING,
        // DEBUG: 		// Show errors and fatal
        // DEBUG: 		SPOUT_LOG_ERROR,
        // DEBUG: 		// Show only fatal errors
        // DEBUG: 		SPOUT_LOG_FATAL,
        // DEBUG: 		// Ignore log levels
        // DEBUG: 		SPOUT_LOG_NONE,
        // DEBUG: 	}
        public enum SpoutLogLevel
        {
            SPOUT_LOG_SILENT = 0,
            SPOUT_LOG_VERBOSE = 1,
            SPOUT_LOG_NOTICE = 2,
            SPOUT_LOG_WARNING = 3,
            SPOUT_LOG_ERROR = 4,
            SPOUT_LOG_FATAL = 5,
            SPOUT_LOG_NONE = 6
        }

        public unsafe partial class SpoutUtils
        {
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenSpoutConsole@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void OpenSpoutConsole();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseSpoutConsole@spoututils@@YAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void CloseSpoutConsole(bool bWarning);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableSpoutLog@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void EnableSpoutLog();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableSpoutLogFile@spoututils@@YAXPEBD_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void EnableSpoutLogFile([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename, bool append);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableSpoutLogFile@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void DisableSpoutLogFile();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableSpoutLog@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void DisableSpoutLog();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableLogs@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void DisableLogs();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableLogs@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void EnableLogs();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutLog@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetSpoutLog(__IntPtr @return);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ShowSpoutLogs@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void ShowSpoutLogs();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSpoutLogLevel@spoututils@@YAXW4SpoutLogLevel@1@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SetSpoutLogLevel(global::Spout.Spoututils.SpoutLogLevel level);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLog@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLog([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogVerbose@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogVerbose([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogNotice@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogNotice([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogWarning@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogWarning([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogError@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogFatal@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogFatal([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutMessageBox@spoututils@@YAHPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern int SpoutMessageBox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message, uint dwMilliseconds);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?StartTiming@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void StartTiming();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EndTiming@spoututils@@YANXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern double EndTiming();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSDKversion@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetSDKversion(__IntPtr @return);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?_getLogPath@?A0x0@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetLogPath(__IntPtr @return);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?_levelName@?A0x0@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4SpoutLogLevel@1@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void LevelName(__IntPtr @return, global::Spout.Spoututils.SpoutLogLevel level);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?_logtofile@?A0x0@spoututils@@YAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void Logtofile(bool append);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNVIDIAmode@?A0x0@spoututils@@YA_NPEBDPEAH@Z", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool GetNVIDIAmode([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string command, int* mode);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetNVIDIAmode@?A0x0@spoututils@@YA_NPEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool SetNVIDIAmode([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string command, int mode);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ExecuteProcess@?A0x0@spoututils@@YA_NPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool ExecuteProcess(sbyte* path);
            }

            // DEBUG: void OpenSpoutConsole()
            public static void OpenSpoutConsole()
            {
                __Internal.OpenSpoutConsole();
            }

            // DEBUG: void CloseSpoutConsole(bool bWarning = false)
            public static void CloseSpoutConsole(bool bWarning)
            {
                __Internal.CloseSpoutConsole(bWarning);
            }

            // DEBUG: void EnableSpoutLog()
            public static void EnableSpoutLog()
            {
                __Internal.EnableSpoutLog();
            }

            // DEBUG: void EnableSpoutLogFile(const char* filename, bool append = false)
            public static void EnableSpoutLogFile(string filename, bool append)
            {
                __Internal.EnableSpoutLogFile(filename, append);
            }

            // DEBUG: void DisableSpoutLogFile()
            public static void DisableSpoutLogFile()
            {
                __Internal.DisableSpoutLogFile();
            }

            // DEBUG: void DisableSpoutLog()
            public static void DisableSpoutLog()
            {
                __Internal.DisableSpoutLog();
            }

            // DEBUG: void DisableLogs()
            public static void DisableLogs()
            {
                __Internal.DisableLogs();
            }

            // DEBUG: void EnableLogs()
            public static void EnableLogs()
            {
                __Internal.EnableLogs();
            }

            // DEBUG: std::string GetSpoutLog()
            public static string GetSpoutLog()
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetSpoutLog(new IntPtr(&__ret));
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&__ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            // DEBUG: void ShowSpoutLogs()
            public static void ShowSpoutLogs()
            {
                __Internal.ShowSpoutLogs();
            }

            // DEBUG: void SetSpoutLogLevel(SpoutLogLevel level)
            public static void SetSpoutLogLevel(global::Spout.Spoututils.SpoutLogLevel level)
            {
                __Internal.SetSpoutLogLevel(level);
            }

            // DEBUG: void SpoutLog(const char* format, ...)
            public static void SpoutLog(string format)
            {
                __Internal.SpoutLog(format);
            }

            // DEBUG: void SpoutLogVerbose(const char* format, ...)
            public static void SpoutLogVerbose(string format)
            {
                __Internal.SpoutLogVerbose(format);
            }

            // DEBUG: void SpoutLogNotice(const char* format, ...)
            public static void SpoutLogNotice(string format)
            {
                __Internal.SpoutLogNotice(format);
            }

            // DEBUG: void SpoutLogWarning(const char* format, ...)
            public static void SpoutLogWarning(string format)
            {
                __Internal.SpoutLogWarning(format);
            }

            // DEBUG: void SpoutLogError(const char* format, ...)
            public static void SpoutLogError(string format)
            {
                __Internal.SpoutLogError(format);
            }

            // DEBUG: void SpoutLogFatal(const char* format, ...)
            public static void SpoutLogFatal(string format)
            {
                __Internal.SpoutLogFatal(format);
            }

            // DEBUG: int SpoutMessageBox(const char * message, DWORD dwMilliseconds = 0)
            public static int SpoutMessageBox(string message, uint dwMilliseconds)
            {
                var __ret = __Internal.SpoutMessageBox(message, dwMilliseconds);
                return __ret;
            }

            // DEBUG: void StartTiming()
            public static void StartTiming()
            {
                __Internal.StartTiming();
            }

            // DEBUG: double EndTiming()
            public static double EndTiming()
            {
                var __ret = __Internal.EndTiming();
                return __ret;
            }

            // DEBUG: std::string GetSDKversion()
            public static string GetSDKversion()
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetSDKversion(new IntPtr(&__ret));
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&__ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            // DEBUG: std::string _getLogPath()
            public static string GetLogPath()
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetLogPath(new IntPtr(&__ret));
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&__ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            // DEBUG: std::string _levelName(SpoutLogLevel level)
            public static string LevelName(global::Spout.Spoututils.SpoutLogLevel level)
            {
                var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.LevelName(new IntPtr(&__ret), level);
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&__ret));
                var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            // DEBUG: void _logtofile(bool append = false)
            public static void Logtofile(bool append)
            {
                __Internal.Logtofile(append);
            }

            // DEBUG: bool GetNVIDIAmode(const char *command, int * mode)
            public static bool GetNVIDIAmode(string command, ref int mode)
            {
                fixed (int* __mode1 = &mode)
                {
                    var __arg1 = __mode1;
                    var __ret = __Internal.GetNVIDIAmode(command, __arg1);
                    return __ret;
                }
            }

            // DEBUG: bool SetNVIDIAmode(const char *command, int mode)
            public static bool SetNVIDIAmode(string command, int mode)
            {
                var __ret = __Internal.SetNVIDIAmode(command, mode);
                return __ret;
            }

            // DEBUG: bool ExecuteProcess(char *path)
            public static bool ExecuteProcess(sbyte* path)
            {
                var __ret = __Internal.ExecuteProcess(path);
                return __ret;
            }
        }
    }

    // DEBUG: enum SpoutCreateResult
    // DEBUG: {
    // DEBUG: 	SPOUT_CREATE_FAILED = 0,
    // DEBUG: 	SPOUT_CREATE_SUCCESS,
    // DEBUG: 	SPOUT_ALREADY_EXISTS,
    // DEBUG: 	SPOUT_ALREADY_CREATED,
    // DEBUG: }
    public enum SpoutCreateResult
    {
        SPOUT_CREATE_FAILED = 0,
        SPOUT_CREATE_SUCCESS = 1,
        SPOUT_ALREADY_EXISTS = 2,
        SPOUT_ALREADY_CREATED = 3
    }

    // DEBUG: class SPOUT_DLLEXP SpoutSharedMemory {
    // DEBUG: 
    // DEBUG: public:
    // DEBUG: 
    // DEBUG: 	SpoutSharedMemory();
    // DEBUG: 	~SpoutSharedMemory();
    // DEBUG: 
    // DEBUG: 	// Create a new memory segment, or attach to an existing one
    // DEBUG: 	SpoutCreateResult Create(const char* name, int size);
    // DEBUG: 
    // DEBUG: 	// Open an existing memory map
    // DEBUG: 	bool Open(const char* name);
    // DEBUG: 
    // DEBUG: 	// Close a map
    // DEBUG: 	void Close();
    // DEBUG: 
    // DEBUG: 	// Lock an open map and return the buffer
    // DEBUG: 	char* Lock();
    // DEBUG: 
    // DEBUG: 	// Unlock a map
    // DEBUG: 	void Unlock();
    // DEBUG: 
    // DEBUG: 	// Name of an existing map
    // DEBUG: 	const char* Name();
    // DEBUG: 	
    // DEBUG: 	// Size of an existing map
    // DEBUG: 	int Size();
    // DEBUG: 
    // DEBUG: 	// Print map information for debugging
    // DEBUG: 	void Debug();
    // DEBUG: 
    // DEBUG: private:
    // DEBUG: 
    // DEBUG: 	char*  m_pBuffer; // Buffer pointer
    // DEBUG: 	HANDLE m_hMap; // Map handle
    // DEBUG: 	HANDLE m_hMutex; // Mutex for map access
    // DEBUG: 	int m_lockCount; // Map access lock count
    // DEBUG: 	const char*	m_pName; // Map name
    // DEBUG: 	int m_size; // Map size
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutSharedMemory : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal __IntPtr m_pBuffer;
            internal __IntPtr m_hMap;
            internal __IntPtr m_hMutex;
            internal int m_lockCount;
            internal __IntPtr m_pName;
            internal int m_size;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutSharedMemory@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutSharedMemory@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1SpoutSharedMemory@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Create@SpoutSharedMemory@@QEAA?AW4SpoutCreateResult@@PEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::Spout.SpoutCreateResult Create(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int size);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Open@SpoutSharedMemory@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Open(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Close@SpoutSharedMemory@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Close(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Unlock@SpoutSharedMemory@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Unlock(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Debug@SpoutSharedMemory@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Debug(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Lock@SpoutSharedMemory@@QEAAPEADXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Lock(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Name@SpoutSharedMemory@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Name(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Size@SpoutSharedMemory@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Size(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutSharedMemory> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutSharedMemory>();

        protected bool __ownsNativeInstance;

        internal static SpoutSharedMemory __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new SpoutSharedMemory(native.ToPointer(), skipVTables);
        }

        internal static SpoutSharedMemory __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (SpoutSharedMemory)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static SpoutSharedMemory __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutSharedMemory(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutSharedMemory(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SpoutSharedMemory(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: SpoutSharedMemory()
        public SpoutSharedMemory()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutSharedMemory.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        // DEBUG: SpoutSharedMemory
        public SpoutSharedMemory(global::Spout.SpoutSharedMemory _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutSharedMemory.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Spout.SpoutSharedMemory.__Internal*) __Instance) = *((global::Spout.SpoutSharedMemory.__Internal*) _0.__Instance);
        }

        ~SpoutSharedMemory()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: SpoutCreateResult Create(const char* name, int size)
        public global::Spout.SpoutCreateResult Create(string name, int size)
        {
            var __ret = __Internal.Create(__Instance, name, size);
            return __ret;
        }

        // DEBUG: bool Open(const char* name)
        public bool Open(string name)
        {
            var __ret = __Internal.Open(__Instance, name);
            return __ret;
        }

        // DEBUG: void Close()
        public void Close()
        {
            __Internal.Close(__Instance);
        }

        // DEBUG: void Unlock()
        public void Unlock()
        {
            __Internal.Unlock(__Instance);
        }

        // DEBUG: void Debug()
        public void Debug()
        {
            __Internal.Debug(__Instance);
        }

        public sbyte* Lock
        {
            get
            {
                var __ret = __Internal.Lock(__Instance);
                return __ret;
            }
        }

        public string Name
        {
            get
            {
                var __ret = __Internal.Name(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
            }
        }

        public int Size
        {
            get
            {
                var __ret = __Internal.Size(__Instance);
                return __ret;
            }
        }
    }

    // DEBUG: struct SharedTextureInfo {			// 280 bytes total
    // DEBUG: 	unsigned __int32 shareHandle;	// 4 bytes : texture handle
    // DEBUG: 	unsigned __int32 width;			// 4 bytes : texture width
    // DEBUG: 	unsigned __int32 height;		// 4 bytes : texture height
    // DEBUG: 	DWORD format;					// 4 bytes : texture pixel format
    // DEBUG: 	DWORD usage;					// 4 bytes : not used
    // DEBUG: 	wchar_t description[128];		// 256 bytes : Wyphon compatible description (not used)
    // DEBUG: 	unsigned __int32 partnerId;		// 4 bytes : Wyphon id of partner that shared it with us (not used)
    // DEBUG: }
    public unsafe partial class SharedTextureInfo : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 280)]
        public partial struct __Internal
        {
            internal uint shareHandle;
            internal uint width;
            internal uint height;
            internal uint format;
            internal uint usage;
            internal fixed char description[128];
            internal uint partnerId;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SharedTextureInfo@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SharedTextureInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SharedTextureInfo>();

        protected bool __ownsNativeInstance;

        internal static SharedTextureInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new SharedTextureInfo(native.ToPointer(), skipVTables);
        }

        internal static SharedTextureInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (SharedTextureInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static SharedTextureInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SharedTextureInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SharedTextureInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SharedTextureInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: SharedTextureInfo
        public SharedTextureInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SharedTextureInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        // DEBUG: SharedTextureInfo
        public SharedTextureInfo(global::Spout.SharedTextureInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SharedTextureInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Spout.SharedTextureInfo.__Internal*) __Instance) = *((global::Spout.SharedTextureInfo.__Internal*) _0.__Instance);
        }

        ~SharedTextureInfo()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ShareHandle
        {
            get
            {
                return ((__Internal*)__Instance)->shareHandle;
            }

            set
            {
                ((__Internal*)__Instance)->shareHandle = value;
            }
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->width;
            }

            set
            {
                ((__Internal*)__Instance)->width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->height;
            }

            set
            {
                ((__Internal*)__Instance)->height = value;
            }
        }

        public uint Format
        {
            get
            {
                return ((__Internal*)__Instance)->format;
            }

            set
            {
                ((__Internal*)__Instance)->format = value;
            }
        }

        public uint Usage
        {
            get
            {
                return ((__Internal*)__Instance)->usage;
            }

            set
            {
                ((__Internal*)__Instance)->usage = value;
            }
        }

        public char[] Description
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<char>(((__Internal*)__Instance)->description, 128);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 128; i++)
                        ((__Internal*)__Instance)->description[i] = value[i];
                }
            }
        }

        public uint PartnerId
        {
            get
            {
                return ((__Internal*)__Instance)->partnerId;
            }

            set
            {
                ((__Internal*)__Instance)->partnerId = value;
            }
        }
    }

    // DEBUG: class SPOUT_DLLEXP spoutSenderNames {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 		spoutSenderNames();
    // DEBUG: 		~spoutSenderNames();
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// public functions
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Sender name registration
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Register a sender name in the list of senders
    // DEBUG: 		bool RegisterSenderName(const char* sendername);
    // DEBUG: 		// Remove a name from the list
    // DEBUG: 		bool ReleaseSenderName(const char* sendername);
    // DEBUG: 		// Find a name in the list
    // DEBUG: 		bool FindSenderName(const char* sendername);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Functions to retrieve info about the sender set map and the senders in it
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Retrieve the sender name list as a set of names
    // DEBUG: 		bool GetSenderNames(std::set<std::string> *sendernames);
    // DEBUG: 		// Number of senders in the list
    // DEBUG: 		int  GetSenderCount();
    // DEBUG: 		// Sender item name
    // DEBUG: 		bool GetSender(int index, char* sendername, int MaxSize = 256);
    // DEBUG: 		// Information about a sender from an index into the list
    // DEBUG: 		bool GetSenderNameInfo(int index, char* sendername, int sendernameMaxSize, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle);
    // DEBUG: 
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Maximum number of senders allowed in the list
    // DEBUG: 		// Applies for versions 2.005 and after
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Get the maximum number from the registry
    // DEBUG: 		int GetMaxSenders();
    // DEBUG: 		// Set the maximum number of senders in a new sender map
    // DEBUG: 		void SetMaxSenders(int maxSenders);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Functions to read and write info to a sender memory map
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Get sender information
    // DEBUG: 		bool GetSenderInfo (const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat);
    // DEBUG: 		// Set sender information
    // DEBUG: 		bool SetSenderInfo (const char* sendername, unsigned int width, unsigned int height, HANDLE dxShareHandle, DWORD dwFormat);
    // DEBUG: 		// Set sender PartnerID field with "CPU" sharing method and GL/DX compatibility
    // DEBUG: 		bool SetSenderID(const char *sendername, bool bCPU, bool bGLDX);
    // DEBUG: 		// Generic sender map info read (returned in a shared texture information structure)
    // DEBUG: 		bool getSharedInfo (const char* sendername, SharedTextureInfo* info);
    // DEBUG: 		// Generic sender map info write
    // DEBUG: 		bool setSharedInfo (const char* sendername, SharedTextureInfo* info);
    // DEBUG: 		// Test for shared info memory map existence
    // DEBUG: 		bool hasSharedInfo(const char* sendername);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Functions to maintain the active sender
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Set the active sender - the first retrieved by a receiver
    // DEBUG: 		bool SetActiveSender     (const char* sendername);
    // DEBUG: 		// Get the current active sender
    // DEBUG: 		bool GetActiveSender     (char sendername[SpoutMaxSenderNameLen]);
    // DEBUG: 		// Get active sender information
    // DEBUG: 		bool GetActiveSenderInfo (SharedTextureInfo* info);
    // DEBUG: 		// Return details of the current active sender
    // DEBUG: 		bool FindActiveSender    (char activename[SpoutMaxSenderNameLen], unsigned int &width, unsigned int &height, HANDLE &hSharehandle, DWORD &dwFormat);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Functions to Create, Find or Update a sender
    // DEBUG: 		// without initializing DirectX or the GL/DX interop functions
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Create a sender and register the name in the sender list
    // DEBUG: 		bool CreateSender (const char* sendername, unsigned int width, unsigned int height, HANDLE hSharehandle, DWORD dwFormat = 0);
    // DEBUG: 		// Update ana existing sender
    // DEBUG: 		bool UpdateSender (const char* sendername, unsigned int width, unsigned int height, HANDLE hSharehandle, DWORD dwFormat = 0);
    // DEBUG: 		// Check details of a sender
    // DEBUG: 		bool CheckSender  (const char* sendername, unsigned int &width, unsigned int &height, HANDLE &hSharehandle, DWORD &dwFormat);
    // DEBUG: 		// Find a sender and return details
    // DEBUG: 		bool FindSender   (char* sendername, unsigned int &width, unsigned int &height, HANDLE &hSharehandle, DWORD &dwFormat);
    // DEBUG: 		// Find a sender in the class names set
    // DEBUG: 		bool FindSender   (const char* sendername);
    // DEBUG: 		// Release orphaned senders
    // DEBUG: 		void CleanSenders();
    // DEBUG: 
    // DEBUG: 
    // DEBUG: protected:
    // DEBUG: 
    // DEBUG: 		// Sender name set management
    // DEBUG: 		bool CreateSenderSet();
    // DEBUG: 		bool GetSenderSet (std::set<std::string>& SenderNames);
    // DEBUG: 
    // DEBUG: 		// Active sender management
    // DEBUG: 		bool setActiveSenderName (const char* SenderName);
    // DEBUG: 		bool getActiveSenderName (char SenderName[SpoutMaxSenderNameLen]);
    // DEBUG: 
    // DEBUG: 		// Goes through the full list of sender names and cleans up
    // DEBUG: 		// any that shouldn't still be around
    // DEBUG: 		void cleanSenderSet();
    // DEBUG: 
    // DEBUG: 		// Functions to manage shared memory map access
    // DEBUG: 		static void readSenderSetFromBuffer(const char* buffer, std::set<std::string>& SenderNames, int maxSenders);
    // DEBUG: 		static void	writeBufferFromSenderSet(const std::set<std::string>& SenderNames, char *buffer, int maxSenders);
    // DEBUG: 
    // DEBUG: 		SpoutSharedMemory	m_senderNames;
    // DEBUG: 		SpoutSharedMemory	m_activeSender;
    // DEBUG: 
    // DEBUG: 		// This should be a unordered_map of sender names ->SharedMemory
    // DEBUG: 		// to handle multiple inputs and outputs all going through the
    // DEBUG: 		// same spoutSenderNames class
    // DEBUG: 		// Make this a pointer to avoid size differences between compilers
    // DEBUG: 		// if the .dll is compiled with something different
    // DEBUG: 		std::unordered_map<std::string, SpoutSharedMemory*>*	m_senders;
    // DEBUG: 		int m_MaxSenders; // maximum number of senders via registry
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutSenderNames : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 112)]
        public partial struct __Internal
        {
            internal global::Spout.SpoutSharedMemory.__Internal m_senderNames;
            internal global::Spout.SpoutSharedMemory.__Internal m_activeSender;
            internal __IntPtr m_senders;
            internal int m_MaxSenders;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutSenderNames@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutSenderNames@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1spoutSenderNames@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RegisterSenderName@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RegisterSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseSenderName@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReleaseSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindSenderName@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSender@spoutSenderNames@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderNameInfo@spoutSenderNames@@QEAA_NHPEADHAEAI1AEAPEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderNameInfo(__IntPtr __instance, int index, sbyte* sendername, int sendernameMaxSize, uint* width, uint* height, __IntPtr* dxShareHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderInfo@spoutSenderNames@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderInfo@spoutSenderNames@@QEAA_NPEBDIIPEAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint width, uint height, __IntPtr dxShareHandle, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderID@spoutSenderNames@@QEAA_NPEBD_N1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSenderID(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, bool bCPU, bool bGLDX);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?getSharedInfo@spoutSenderNames@@QEAA_NPEBDPEAUSharedTextureInfo@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSharedInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, __IntPtr info);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?setSharedInfo@spoutSenderNames@@QEAA_NPEBDPEAUSharedTextureInfo@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSharedInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, __IntPtr info);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?hasSharedInfo@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasSharedInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetActiveSender@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSender@spoutSenderNames@@QEAA_NQEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte[] sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSenderInfo@spoutSenderNames@@QEAA_NPEAUSharedTextureInfo@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSenderInfo(__IntPtr __instance, __IntPtr info);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindActiveSender@spoutSenderNames@@QEAA_NQEADAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindActiveSender(__IntPtr __instance, sbyte[] activename, uint* width, uint* height, __IntPtr* hSharehandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateSender@spoutSenderNames@@QEAA_NPEBDIIPEAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint width, uint height, __IntPtr hSharehandle, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UpdateSender@spoutSenderNames@@QEAA_NPEBDIIPEAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UpdateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint width, uint height, __IntPtr hSharehandle, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSender@spoutSenderNames@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* hSharehandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindSender@spoutSenderNames@@QEAA_NPEADAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindSender(__IntPtr __instance, sbyte* sendername, uint* width, uint* height, __IntPtr* hSharehandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindSender@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanSenders@spoutSenderNames@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateSenderSet@spoutSenderNames@@IEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateSenderSet(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?setActiveSenderName@spoutSenderNames@@IEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?getActiveSenderName@spoutSenderNames@@IEAA_NQEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSenderName(__IntPtr __instance, sbyte[] SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?cleanSenderSet@spoutSenderNames@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanSenderSet(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCount@spoutSenderNames@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMaxSenders@spoutSenderNames@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMaxSenders@spoutSenderNames@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutSenderNames> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutSenderNames>();

        protected bool __ownsNativeInstance;

        internal static SpoutSenderNames __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new SpoutSenderNames(native.ToPointer(), skipVTables);
        }

        internal static SpoutSenderNames __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (SpoutSenderNames)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static SpoutSenderNames __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutSenderNames(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutSenderNames(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SpoutSenderNames(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: spoutSenderNames()
        public SpoutSenderNames()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutSenderNames.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        // DEBUG: spoutSenderNames
        public SpoutSenderNames(global::Spout.SpoutSenderNames _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutSenderNames.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Spout.SpoutSenderNames.__Internal*) __Instance) = *((global::Spout.SpoutSenderNames.__Internal*) _0.__Instance);
        }

        ~SpoutSenderNames()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: bool RegisterSenderName(const char* sendername)
        public bool RegisterSenderName(string sendername)
        {
            var __ret = __Internal.RegisterSenderName(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool ReleaseSenderName(const char* sendername)
        public bool ReleaseSenderName(string sendername)
        {
            var __ret = __Internal.ReleaseSenderName(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool FindSenderName(const char* sendername)
        public bool FindSenderName(string sendername)
        {
            var __ret = __Internal.FindSenderName(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool GetSender(int index, char* sendername, int MaxSize = 256)
        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var __ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return __ret;
        }

        // DEBUG: bool GetSenderNameInfo(int index, char* sendername, int sendernameMaxSize, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle)
        public bool GetSenderNameInfo(int index, sbyte* sendername, int sendernameMaxSize, ref uint width, ref uint height, __IntPtr* dxShareHandle)
        {
            fixed (uint* __width3 = &width)
            {
                var __arg3 = __width3;
                fixed (uint* __height4 = &height)
                {
                    var __arg4 = __height4;
                    var __ret = __Internal.GetSenderNameInfo(__Instance, index, sendername, sendernameMaxSize, __arg3, __arg4, dxShareHandle);
                    return __ret;
                }
            }
        }

        // DEBUG: bool GetSenderInfo (const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat)
        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var __ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return __ret;
                    }
                }
            }
        }

        // DEBUG: bool SetSenderInfo (const char* sendername, unsigned int width, unsigned int height, HANDLE dxShareHandle, DWORD dwFormat)
        public bool SetSenderInfo(string sendername, uint width, uint height, __IntPtr dxShareHandle, uint dwFormat)
        {
            var __ret = __Internal.SetSenderInfo(__Instance, sendername, width, height, dxShareHandle, dwFormat);
            return __ret;
        }

        // DEBUG: bool SetSenderID(const char *sendername, bool bCPU, bool bGLDX)
        public bool SetSenderID(string sendername, bool bCPU, bool bGLDX)
        {
            var __ret = __Internal.SetSenderID(__Instance, sendername, bCPU, bGLDX);
            return __ret;
        }

        // DEBUG: bool getSharedInfo (const char* sendername, SharedTextureInfo* info)
        public bool GetSharedInfo(string sendername, global::Spout.SharedTextureInfo info)
        {
            var __arg1 = info is null ? __IntPtr.Zero : info.__Instance;
            var __ret = __Internal.GetSharedInfo(__Instance, sendername, __arg1);
            return __ret;
        }

        // DEBUG: bool setSharedInfo (const char* sendername, SharedTextureInfo* info)
        public bool SetSharedInfo(string sendername, global::Spout.SharedTextureInfo info)
        {
            var __arg1 = info is null ? __IntPtr.Zero : info.__Instance;
            var __ret = __Internal.SetSharedInfo(__Instance, sendername, __arg1);
            return __ret;
        }

        // DEBUG: bool hasSharedInfo(const char* sendername)
        public bool HasSharedInfo(string sendername)
        {
            var __ret = __Internal.HasSharedInfo(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool SetActiveSender     (const char* sendername)
        public bool SetActiveSender(string sendername)
        {
            var __ret = __Internal.SetActiveSender(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool GetActiveSender     (char sendername[SpoutMaxSenderNameLen])
        public bool GetActiveSender(sbyte[] sendername)
        {
            if (sendername == null || sendername.Length != 256)
                throw new ArgumentOutOfRangeException("sendername", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.GetActiveSender(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool GetActiveSenderInfo (SharedTextureInfo* info)
        public bool GetActiveSenderInfo(global::Spout.SharedTextureInfo info)
        {
            var __arg0 = info is null ? __IntPtr.Zero : info.__Instance;
            var __ret = __Internal.GetActiveSenderInfo(__Instance, __arg0);
            return __ret;
        }

        // DEBUG: bool FindActiveSender    (char activename[SpoutMaxSenderNameLen], unsigned int &width, unsigned int &height, HANDLE &hSharehandle, DWORD &dwFormat)
        public bool FindActiveSender(sbyte[] activename, ref uint width, ref uint height, __IntPtr* hSharehandle, ref uint dwFormat)
        {
            if (activename == null || activename.Length != 256)
                throw new ArgumentOutOfRangeException("activename", "The dimensions of the provided array don't match the required size.");
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var __ret = __Internal.FindActiveSender(__Instance, activename, __arg1, __arg2, hSharehandle, __arg4);
                        return __ret;
                    }
                }
            }
        }

        // DEBUG: bool CreateSender (const char* sendername, unsigned int width, unsigned int height, HANDLE hSharehandle, DWORD dwFormat = 0)
        public bool CreateSender(string sendername, uint width, uint height, __IntPtr hSharehandle, uint dwFormat)
        {
            var __ret = __Internal.CreateSender(__Instance, sendername, width, height, hSharehandle, dwFormat);
            return __ret;
        }

        // DEBUG: bool UpdateSender (const char* sendername, unsigned int width, unsigned int height, HANDLE hSharehandle, DWORD dwFormat = 0)
        public bool UpdateSender(string sendername, uint width, uint height, __IntPtr hSharehandle, uint dwFormat)
        {
            var __ret = __Internal.UpdateSender(__Instance, sendername, width, height, hSharehandle, dwFormat);
            return __ret;
        }

        // DEBUG: bool CheckSender  (const char* sendername, unsigned int &width, unsigned int &height, HANDLE &hSharehandle, DWORD &dwFormat)
        public bool CheckSender(string sendername, ref uint width, ref uint height, __IntPtr* hSharehandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var __ret = __Internal.CheckSender(__Instance, sendername, __arg1, __arg2, hSharehandle, __arg4);
                        return __ret;
                    }
                }
            }
        }

        // DEBUG: bool FindSender   (char* sendername, unsigned int &width, unsigned int &height, HANDLE &hSharehandle, DWORD &dwFormat)
        public bool FindSender(sbyte* sendername, ref uint width, ref uint height, __IntPtr* hSharehandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var __ret = __Internal.FindSender(__Instance, sendername, __arg1, __arg2, hSharehandle, __arg4);
                        return __ret;
                    }
                }
            }
        }

        // DEBUG: bool FindSender   (const char* sendername)
        public bool FindSender(string sendername)
        {
            var __ret = __Internal.FindSender(__Instance, sendername);
            return __ret;
        }

        // DEBUG: void CleanSenders()
        public void CleanSenders()
        {
            __Internal.CleanSenders(__Instance);
        }

        // DEBUG: bool CreateSenderSet()
        protected bool CreateSenderSet()
        {
            var __ret = __Internal.CreateSenderSet(__Instance);
            return __ret;
        }

        // DEBUG: bool setActiveSenderName (const char* SenderName)
        protected bool SetActiveSenderName(string SenderName)
        {
            var __ret = __Internal.SetActiveSenderName(__Instance, SenderName);
            return __ret;
        }

        // DEBUG: bool getActiveSenderName (char SenderName[SpoutMaxSenderNameLen])
        protected bool GetActiveSenderName(sbyte[] SenderName)
        {
            if (SenderName == null || SenderName.Length != 256)
                throw new ArgumentOutOfRangeException("SenderName", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.GetActiveSenderName(__Instance, SenderName);
            return __ret;
        }

        // DEBUG: void cleanSenderSet()
        protected void CleanSenderSet()
        {
            __Internal.CleanSenderSet(__Instance);
        }

        protected global::Spout.SpoutSharedMemory MSenderNames
        {
            get
            {
                return global::Spout.SpoutSharedMemory.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_senderNames));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_senderNames = *(global::Spout.SpoutSharedMemory.__Internal*) value.__Instance;
            }
        }

        protected global::Spout.SpoutSharedMemory MActiveSender
        {
            get
            {
                return global::Spout.SpoutSharedMemory.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_activeSender));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_activeSender = *(global::Spout.SpoutSharedMemory.__Internal*) value.__Instance;
            }
        }

        protected int MMaxSenders
        {
            get
            {
                return ((__Internal*)__Instance)->m_MaxSenders;
            }

            set
            {
                ((__Internal*)__Instance)->m_MaxSenders = value;
            }
        }

        public int SenderCount
        {
            get
            {
                var __ret = __Internal.GetSenderCount(__Instance);
                return __ret;
            }
        }

        public int MaxSenders
        {
            get
            {
                var __ret = __Internal.GetMaxSenders(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }
    }

    // DEBUG: class SPOUT_DLLEXP spoutDirectX {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 		spoutDirectX();
    // DEBUG: 		~spoutDirectX();
    // DEBUG: 		
    // DEBUG: 		// Initialize and prepare DirectX 11
    // DEBUG: 		bool OpenDirectX11(ID3D11Device* pDevice = nullptr);
    // DEBUG: 		// Release DirectX 11 device and context
    // DEBUG: 		void CloseDirectX11();
    // DEBUG: 		// Set the DirectX11 device
    // DEBUG: 		bool SetDX11Device(ID3D11Device* pDevice);
    // DEBUG: 		// Create a DirectX11 device
    // DEBUG: 		ID3D11Device* CreateDX11device();
    // DEBUG: 		// Create a DirectX11 shared texture
    // DEBUG: 		bool CreateSharedDX11Texture(ID3D11Device* pDevice, unsigned int width, unsigned int height, DXGI_FORMAT format, ID3D11Texture2D** ppSharedTexture, HANDLE &dxShareHandle);
    // DEBUG: 		// Create a DirectX11 texture
    // DEBUG: 		bool CreateDX11Texture(ID3D11Device* pDevice, unsigned int width, unsigned int height, DXGI_FORMAT format, ID3D11Texture2D** ppTexture);
    // DEBUG: 		// Create a DirectX11 staging texture
    // DEBUG: 		bool CreateDX11StagingTexture(ID3D11Device* pDevice, unsigned int width, unsigned int height, DXGI_FORMAT format, ID3D11Texture2D** pStagingTexture);
    // DEBUG: 		// Return the pointer of a DirectX11 shared texture
    // DEBUG: 		bool OpenDX11shareHandle(ID3D11Device* pDevice, ID3D11Texture2D** ppSharedTexture, HANDLE dxShareHandle);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Output graphics adapter
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Get the number of graphics adapters in the system
    // DEBUG: 		int GetNumAdapters();
    // DEBUG: 		// Get an adapter name
    // DEBUG: 		bool GetAdapterName(int index, char *adaptername, int maxchars);
    // DEBUG: 		// Get the current adapter index
    // DEBUG: 		int GetAdapter();
    // DEBUG: 		// Set graphics adapter for CreateDX11device from an index
    // DEBUG: 		bool SetAdapter(int index = -1); 
    // DEBUG: 		// Get the current adapter description
    // DEBUG: 		bool GetAdapterInfo(char *renderdescription, char *displaydescription, int maxchars);
    // DEBUG: 		// Get adapter pointer for a given adapter (-1 means current)
    // DEBUG: 		IDXGIAdapter* GetAdapterPointer(int index = -1);
    // DEBUG: 		// Set required graphics adapter for CreateDX11device
    // DEBUG: 		void SetAdapterPointer(IDXGIAdapter* pAdapter);
    // DEBUG: 		// Find the index of the NVIDIA adapter in a multi-adapter system
    // DEBUG: 		bool FindNVIDIA(int &nAdapter);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// DirectX11 utiities
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Release a texture resource created with a class device1`
    // DEBUG: 		unsigned long ReleaseDX11Texture(ID3D11Texture2D* pTexture);
    // DEBUG: 		// Release a texture resource
    // DEBUG: 		unsigned long ReleaseDX11Texture(ID3D11Device* pd3dDevice, ID3D11Texture2D* pTexture);
    // DEBUG: 		// Release a device
    // DEBUG: 		unsigned long ReleaseDX11Device(ID3D11Device* pd3dDevice);
    // DEBUG: 		// Return the class device
    // DEBUG: 		ID3D11Device* GetDX11Device();
    // DEBUG: 
    // DEBUG: 		// Return the device immediate context
    // DEBUG: 		ID3D11DeviceContext* GetDX11Context();
    // DEBUG: 		// Flush immediate context command queue and wait for copleteion
    // DEBUG: 		void FlushWait(ID3D11Device* pd3dDevice, ID3D11DeviceContext* pImmediateContext);
    // DEBUG: 		// Wait for completion after flush
    // DEBUG: 		void Wait(ID3D11Device* pd3dDevice, ID3D11DeviceContext* pImmediateContext);
    // DEBUG: 
    // DEBUG: 	protected:
    // DEBUG: 
    // DEBUG: 		void DebugLog(ID3D11Device* pd3dDevice, const char* format, ...);
    // DEBUG: 		int						m_AdapterIndex; // Adapter index
    // DEBUG: 		IDXGIAdapter*			m_pAdapterDX11; // Adapter pointer
    // DEBUG: 		ID3D11Device*           m_pd3dDevice;   // DX11 device
    // DEBUG: 		ID3D11DeviceContext*	m_pImmediateContext;
    // DEBUG: 		bool					m_bClassDevice;
    // DEBUG: 		D3D_DRIVER_TYPE			m_driverType;
    // DEBUG: 		D3D_FEATURE_LEVEL		m_featureLevel;
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutDirectX : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal int m_AdapterIndex;
            internal __IntPtr m_pAdapterDX11;
            internal __IntPtr m_pd3dDevice;
            internal __IntPtr m_pImmediateContext;
            internal byte m_bClassDevice;
            internal global::D3D_DRIVER_TYPE m_driverType;
            internal global::D3D_FEATURE_LEVEL m_featureLevel;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutDirectX@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutDirectX@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1spoutDirectX@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseDirectX11@spoutDirectX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseDirectX11(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterName@spoutDirectX@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAdapter@spoutDirectX@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetAdapter(__IntPtr __instance, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@spoutDirectX@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* renderdescription, sbyte* displaydescription, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindNVIDIA@spoutDirectX@@QEAA_NAEAH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindNVIDIA(__IntPtr __instance, int* nAdapter);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNumAdapters@spoutDirectX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapter@spoutDirectX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutDirectX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutDirectX>();

        protected bool __ownsNativeInstance;

        internal static SpoutDirectX __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new SpoutDirectX(native.ToPointer(), skipVTables);
        }

        internal static SpoutDirectX __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (SpoutDirectX)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static SpoutDirectX __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutDirectX(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutDirectX(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SpoutDirectX(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: spoutDirectX()
        public SpoutDirectX()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutDirectX.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        // DEBUG: spoutDirectX
        public SpoutDirectX(global::Spout.SpoutDirectX _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutDirectX.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Spout.SpoutDirectX.__Internal*) __Instance) = *((global::Spout.SpoutDirectX.__Internal*) _0.__Instance);
        }

        ~SpoutDirectX()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: void CloseDirectX11()
        public void CloseDirectX11()
        {
            __Internal.CloseDirectX11(__Instance);
        }

        // DEBUG: bool GetAdapterName(int index, char *adaptername, int maxchars)
        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var __ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return __ret;
        }

        // DEBUG: bool SetAdapter(int index = -1)
        public bool SetAdapter(int index)
        {
            var __ret = __Internal.SetAdapter(__Instance, index);
            return __ret;
        }

        // DEBUG: bool GetAdapterInfo(char *renderdescription, char *displaydescription, int maxchars)
        public bool GetAdapterInfo(sbyte* renderdescription, sbyte* displaydescription, int maxchars)
        {
            var __ret = __Internal.GetAdapterInfo(__Instance, renderdescription, displaydescription, maxchars);
            return __ret;
        }

        // DEBUG: bool FindNVIDIA(int &nAdapter)
        public bool FindNVIDIA(ref int nAdapter)
        {
            fixed (int* __nAdapter0 = &nAdapter)
            {
                var __arg0 = __nAdapter0;
                var __ret = __Internal.FindNVIDIA(__Instance, __arg0);
                return __ret;
            }
        }

        protected int MAdapterIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_AdapterIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_AdapterIndex = value;
            }
        }

        protected bool MBClassDevice
        {
            get
            {
                return ((__Internal*)__Instance)->m_bClassDevice != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bClassDevice = (byte) (value ? 1 : 0);
            }
        }

        public int NumAdapters
        {
            get
            {
                var __ret = __Internal.GetNumAdapters(__Instance);
                return __ret;
            }
        }

        public int Adapter
        {
            get
            {
                var __ret = __Internal.GetAdapter(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetAdapter(__Instance, value);
            }
        }
    }

    // DEBUG: class SPOUT_DLLEXP spoutFrameCount {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 	spoutFrameCount();
    // DEBUG:     ~spoutFrameCount();
    // DEBUG: 
    // DEBUG: 	// Enable or disable frame counting globally
    // DEBUG: 	void SetFrameCount(bool bEnable);
    // DEBUG: 	// Enable frame counting for this sender
    // DEBUG: 	void EnableFrameCount(const char* SenderName);
    // DEBUG: 	// Disable frame counting
    // DEBUG: 	void DisableFrameCount();
    // DEBUG: 	// Check status of frame counting
    // DEBUG: 	bool IsFrameCountEnabled();
    // DEBUG: 	// Is the received frame new
    // DEBUG: 	bool IsFrameNew();
    // DEBUG: 	// Received frame rate
    // DEBUG: 	double GetSenderFps();
    // DEBUG: 	// Received frame count
    // DEBUG: 	long GetSenderFrame();
    // DEBUG: 	// Frame rate control
    // DEBUG: 	void HoldFps(int fps = 0);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Used by other classes
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Sender increment the semaphore count
    // DEBUG: 	void SetNewFrame();
    // DEBUG: 	// Receiver read the semaphore count
    // DEBUG: 	bool GetNewFrame();
    // DEBUG: 	// For class cleanup functions
    // DEBUG: 	void CleanupFrameCount();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Mutex locks including DirectX 11 keyed mutex
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Test for texture access using a named sender or keyed texture mutex 
    // DEBUG: 	bool CheckTextureAccess(ID3D11Texture2D* D3D11texture = nullptr);
    // DEBUG: 	// Release mutex and allow textureaccess
    // DEBUG: 	void AllowTextureAccess(ID3D11Texture2D* D3D11texture = nullptr);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Named mutex for shared texture access
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Create named mutex for a sender
    // DEBUG: 	bool CreateAccessMutex(const char * SenderName);
    // DEBUG: 	// Release the mutex
    // DEBUG: 	void CloseAccessMutex();
    // DEBUG: 	// Test access using a named mutex
    // DEBUG: 	bool CheckAccess();
    // DEBUG: 	// Allow access after gaining ownership
    // DEBUG: 	void AllowAccess();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Sync events
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Set sync event 
    // DEBUG: 	void SetFrameSync(const char* name);
    // DEBUG: 	// Wait or test for a sync event
    // DEBUG: 	bool WaitFrameSync(const char *name, DWORD dwTimeout = 0);
    // DEBUG: 	// Close sync event
    // DEBUG: 	void CloseFrameSync();
    // DEBUG: 
    // DEBUG: protected:
    // DEBUG: 
    // DEBUG: 	// Texture access named mutex
    // DEBUG: 	HANDLE m_hAccessMutex;
    // DEBUG: 
    // DEBUG: 	// DX11 texture keyed mutex checks
    // DEBUG: 	bool CheckKeyedAccess(ID3D11Texture2D* D3D11texture);
    // DEBUG: 	void AllowKeyedAccess(ID3D11Texture2D* D3D11texture);
    // DEBUG: 	bool IsKeyedMutex(ID3D11Texture2D* D3D11texture);
    // DEBUG: 
    // DEBUG: 	// Frame count semaphore
    // DEBUG: 	bool m_bFrameCount; // Registry setting of frame count
    // DEBUG: 	bool m_bDisabled; // application disable
    // DEBUG: 	bool m_bIsNewFrame; // received frame is new
    // DEBUG: 
    // DEBUG: 	HANDLE m_hCountSemaphore; // semaphore handle
    // DEBUG: 	char m_CountSemaphoreName[256]; // semaphore name
    // DEBUG: 	char m_SenderName[256]; // sender currently connected to a receiver
    // DEBUG: 	long m_FrameCount; // sender frame count
    // DEBUG: 	long m_LastFrameCount; // receiver frame comparator
    // DEBUG: 	double m_FrameTimeTotal;
    // DEBUG: 	double m_FrameTimeNumber;
    // DEBUG: 	double m_lastFrame;
    // DEBUG: 
    // DEBUG: 	// Sender frame timing
    // DEBUG: 	double m_SenderFps;
    // DEBUG: 	void UpdateSenderFps(long framecount = 0);
    // DEBUG: 
    // DEBUG: 	double GetRefreshRate();
    // DEBUG: 
    // DEBUG: 	// Fps control
    // DEBUG: 	double m_millisForFrame;
    // DEBUG: 
    // DEBUG: 	// Sync event
    // DEBUG: 	HANDLE m_hSyncEvent;
    // DEBUG: 	void OpenFrameSync(const char* SenderName);
    // DEBUG: 
    // DEBUG: #ifdef USE_CHRONO
    // DEBUG: 	// Avoid C4251 warnings in SpoutLibrary by using pointers
    // DEBUG: 	// USE_CHRONO is defined in SpoutUtils.h
    // DEBUG: 	std::chrono::steady_clock::time_point * m_FpsStartPtr;
    // DEBUG: 	std::chrono::steady_clock::time_point * m_FpsEndPtr;
    // DEBUG: 	std::chrono::steady_clock::time_point * m_FrameStartPtr;
    // DEBUG: 	std::chrono::steady_clock::time_point * m_FrameEndPtr;
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: 	// PC timer
    // DEBUG: 	double PCFreq;
    // DEBUG: 	__int64 CounterStart;
    // DEBUG: 	double m_FrameStart;
    // DEBUG: 	void StartCounter();
    // DEBUG: 	double GetCounter();
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutFrameCount : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 648)]
        public partial struct __Internal
        {
            internal __IntPtr m_hAccessMutex;
            internal byte m_bFrameCount;
            internal byte m_bDisabled;
            internal byte m_bIsNewFrame;
            internal __IntPtr m_hCountSemaphore;
            internal fixed sbyte m_CountSemaphoreName[256];
            internal fixed sbyte m_SenderName[256];
            internal int m_FrameCount;
            internal int m_LastFrameCount;
            internal double m_FrameTimeTotal;
            internal double m_FrameTimeNumber;
            internal double m_lastFrame;
            internal double m_SenderFps;
            internal double m_millisForFrame;
            internal __IntPtr m_hSyncEvent;
            internal __IntPtr m_FpsStartPtr;
            internal __IntPtr m_FpsEndPtr;
            internal __IntPtr m_FrameStartPtr;
            internal __IntPtr m_FrameEndPtr;
            internal double PCFreq;
            internal long CounterStart;
            internal double m_FrameStart;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutFrameCount@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutFrameCount@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1spoutFrameCount@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameCount@spoutFrameCount@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameCount(__IntPtr __instance, bool bEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableFrameCount@spoutFrameCount@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableFrameCount(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableFrameCount@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?HoldFps@spoutFrameCount@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetNewFrame@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetNewFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupFrameCount@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanupFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateAccessMutex@spoutFrameCount@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateAccessMutex(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseAccessMutex@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseAccessMutex(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckAccess@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckAccess(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AllowAccess@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AllowAccess(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameSync@spoutFrameCount@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitFrameSync@spoutFrameCount@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseFrameSync@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseFrameSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UpdateSenderFps@spoutFrameCount@@IEAAXJ@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateSenderFps(__IntPtr __instance, int framecount);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenFrameSync@spoutFrameCount@@IEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OpenFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?StartCounter@spoutFrameCount@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartCounter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameCountEnabled@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameNew@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameNew(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFps@spoutFrameCount@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetSenderFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFrame@spoutFrameCount@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNewFrame@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetNewFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetRefreshRate@spoutFrameCount@@IEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetRefreshRate(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCounter@spoutFrameCount@@IEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetCounter(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutFrameCount> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutFrameCount>();

        protected bool __ownsNativeInstance;

        internal static SpoutFrameCount __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new SpoutFrameCount(native.ToPointer(), skipVTables);
        }

        internal static SpoutFrameCount __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (SpoutFrameCount)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static SpoutFrameCount __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutFrameCount(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutFrameCount(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SpoutFrameCount(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: spoutFrameCount()
        public SpoutFrameCount()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutFrameCount.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        // DEBUG: spoutFrameCount
        public SpoutFrameCount(global::Spout.SpoutFrameCount _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutFrameCount.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Spout.SpoutFrameCount.__Internal*) __Instance) = *((global::Spout.SpoutFrameCount.__Internal*) _0.__Instance);
        }

        ~SpoutFrameCount()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: void SetFrameCount(bool bEnable)
        public void SetFrameCount(bool bEnable)
        {
            __Internal.SetFrameCount(__Instance, bEnable);
        }

        // DEBUG: void EnableFrameCount(const char* SenderName)
        public void EnableFrameCount(string SenderName)
        {
            __Internal.EnableFrameCount(__Instance, SenderName);
        }

        // DEBUG: void DisableFrameCount()
        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        // DEBUG: void HoldFps(int fps = 0)
        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        // DEBUG: void SetNewFrame()
        public void SetNewFrame()
        {
            __Internal.SetNewFrame(__Instance);
        }

        // DEBUG: void CleanupFrameCount()
        public void CleanupFrameCount()
        {
            __Internal.CleanupFrameCount(__Instance);
        }

        // DEBUG: bool CreateAccessMutex(const char * SenderName)
        public bool CreateAccessMutex(string SenderName)
        {
            var __ret = __Internal.CreateAccessMutex(__Instance, SenderName);
            return __ret;
        }

        // DEBUG: void CloseAccessMutex()
        public void CloseAccessMutex()
        {
            __Internal.CloseAccessMutex(__Instance);
        }

        // DEBUG: bool CheckAccess()
        public bool CheckAccess()
        {
            var __ret = __Internal.CheckAccess(__Instance);
            return __ret;
        }

        // DEBUG: void AllowAccess()
        public void AllowAccess()
        {
            __Internal.AllowAccess(__Instance);
        }

        // DEBUG: void SetFrameSync(const char* name)
        public void SetFrameSync(string name)
        {
            __Internal.SetFrameSync(__Instance, name);
        }

        // DEBUG: bool WaitFrameSync(const char *name, DWORD dwTimeout = 0)
        public bool WaitFrameSync(string name, uint dwTimeout)
        {
            var __ret = __Internal.WaitFrameSync(__Instance, name, dwTimeout);
            return __ret;
        }

        // DEBUG: void CloseFrameSync()
        public void CloseFrameSync()
        {
            __Internal.CloseFrameSync(__Instance);
        }

        // DEBUG: void UpdateSenderFps(long framecount = 0)
        protected void UpdateSenderFps(int framecount)
        {
            __Internal.UpdateSenderFps(__Instance, framecount);
        }

        // DEBUG: void OpenFrameSync(const char* SenderName)
        protected void OpenFrameSync(string SenderName)
        {
            __Internal.OpenFrameSync(__Instance, SenderName);
        }

        // DEBUG: void StartCounter()
        protected void StartCounter()
        {
            __Internal.StartCounter(__Instance);
        }

        protected __IntPtr MHAccessMutex
        {
            get
            {
                return ((__Internal*)__Instance)->m_hAccessMutex;
            }

            set
            {
                ((__Internal*)__Instance)->m_hAccessMutex = (__IntPtr) value;
            }
        }

        protected bool MBFrameCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFrameCount != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFrameCount = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBDisabled
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDisabled != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDisabled = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBIsNewFrame
        {
            get
            {
                return ((__Internal*)__Instance)->m_bIsNewFrame != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bIsNewFrame = (byte) (value ? 1 : 0);
            }
        }

        protected __IntPtr MHCountSemaphore
        {
            get
            {
                return ((__Internal*)__Instance)->m_hCountSemaphore;
            }

            set
            {
                ((__Internal*)__Instance)->m_hCountSemaphore = (__IntPtr) value;
            }
        }

        protected sbyte[] MCountSemaphoreName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_CountSemaphoreName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_CountSemaphoreName[i] = value[i];
                }
            }
        }

        protected sbyte[] MSenderName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderName[i] = value[i];
                }
            }
        }

        protected int MFrameCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_FrameCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_FrameCount = value;
            }
        }

        protected int MLastFrameCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_LastFrameCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_LastFrameCount = value;
            }
        }

        protected double MFrameTimeTotal
        {
            get
            {
                return ((__Internal*)__Instance)->m_FrameTimeTotal;
            }

            set
            {
                ((__Internal*)__Instance)->m_FrameTimeTotal = value;
            }
        }

        protected double MFrameTimeNumber
        {
            get
            {
                return ((__Internal*)__Instance)->m_FrameTimeNumber;
            }

            set
            {
                ((__Internal*)__Instance)->m_FrameTimeNumber = value;
            }
        }

        protected double MLastFrame
        {
            get
            {
                return ((__Internal*)__Instance)->m_lastFrame;
            }

            set
            {
                ((__Internal*)__Instance)->m_lastFrame = value;
            }
        }

        protected double MSenderFps
        {
            get
            {
                return ((__Internal*)__Instance)->m_SenderFps;
            }

            set
            {
                ((__Internal*)__Instance)->m_SenderFps = value;
            }
        }

        protected double MMillisForFrame
        {
            get
            {
                return ((__Internal*)__Instance)->m_millisForFrame;
            }

            set
            {
                ((__Internal*)__Instance)->m_millisForFrame = value;
            }
        }

        protected __IntPtr MHSyncEvent
        {
            get
            {
                return ((__Internal*)__Instance)->m_hSyncEvent;
            }

            set
            {
                ((__Internal*)__Instance)->m_hSyncEvent = (__IntPtr) value;
            }
        }

        protected double PCFreq
        {
            get
            {
                return ((__Internal*)__Instance)->PCFreq;
            }

            set
            {
                ((__Internal*)__Instance)->PCFreq = value;
            }
        }

        protected long CounterStart
        {
            get
            {
                return ((__Internal*)__Instance)->CounterStart;
            }

            set
            {
                ((__Internal*)__Instance)->CounterStart = value;
            }
        }

        protected double MFrameStart
        {
            get
            {
                return ((__Internal*)__Instance)->m_FrameStart;
            }

            set
            {
                ((__Internal*)__Instance)->m_FrameStart = value;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var __ret = __Internal.IsFrameCountEnabled(__Instance);
                return __ret;
            }
        }

        public bool IsFrameNew
        {
            get
            {
                var __ret = __Internal.IsFrameNew(__Instance);
                return __ret;
            }
        }

        public double SenderFps
        {
            get
            {
                var __ret = __Internal.GetSenderFps(__Instance);
                return __ret;
            }
        }

        public int SenderFrame
        {
            get
            {
                var __ret = __Internal.GetSenderFrame(__Instance);
                return __ret;
            }
        }

        public bool NewFrame
        {
            get
            {
                var __ret = __Internal.GetNewFrame(__Instance);
                return __ret;
            }
        }

        protected double RefreshRate
        {
            get
            {
                var __ret = __Internal.GetRefreshRate(__Instance);
                return __ret;
            }
        }

        protected double Counter
        {
            get
            {
                var __ret = __Internal.GetCounter(__Instance);
                return __ret;
            }
        }
    }

    // DEBUG: class SPOUT_DLLEXP spoutCopy {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 		spoutCopy();
    // DEBUG: 		~spoutCopy();
    // DEBUG: 
    // DEBUG: 		// Copy image pixels and select fastest method based on image width
    // DEBUG: 		void CopyPixels(const unsigned char *src, unsigned char *dst,
    // DEBUG: 						unsigned int width, unsigned int height, 
    // DEBUG: 						GLenum glFormat = GL_RGBA, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		// Flip a pixel buffer in place
    // DEBUG: 		void FlipBuffer(const unsigned char *src, unsigned char *dst,
    // DEBUG: 						unsigned int width, unsigned int height,
    // DEBUG: 						GLenum glFormat = GL_RGBA) const;
    // DEBUG: 
    // DEBUG: 		// SSE2 version of memcpy
    // DEBUG: 		void memcpy_sse2(void* dst, const void* src, size_t size) const;
    // DEBUG: 
    // DEBUG: 		// Copy rgba buffers line by line allowing for source pitch using the fastest method
    // DEBUG: 		void rgba2rgba(const void* source, void* dest, unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int sourcePitch, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		// Copy rgba buffers line allowing for source and destination line pitch
    // DEBUG: 		void rgba2rgba(const void* source, void* dest, unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int sourcePitch, unsigned int destPitch, bool bInvert) const;
    // DEBUG: 
    // DEBUG: 		// Copy rgba buffers of differing size
    // DEBUG: 		void rgba2rgbaResample(const void* source, void* dest,
    // DEBUG: 			unsigned int sourceWidth, unsigned int sourceHeight, unsigned int sourcePitch,
    // DEBUG: 			unsigned int destWidth, unsigned int destHeight, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		// Copy rgba to bgra
    // DEBUG: 		void rgba2bgra(const void* rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		
    // DEBUG: 		// Copy rgba to bgra line by line allowing for source pitch using the fastest method
    // DEBUG: 		void rgba2bgra(const void* rgba_source, void *bgra_dest, unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int sourcePitch, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		// Copy rgba to bgra line allowing for source and destination line pitch
    // DEBUG: 		void rgba2bgra(const void* source, void* dest, unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int sourcePitch, unsigned int destPitch, bool bInvert) const;
    // DEBUG: 		
    // DEBUG: 		// Copy bgra to rgba
    // DEBUG: 		void bgra2rgba(const void* bgra_source, void *rgba_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		
    // DEBUG: 		// Correct for image stride
    // DEBUG: 		void RemovePadding(const unsigned char *source, unsigned char *dest,
    // DEBUG: 			unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int source_stride, GLenum glFormat) const;
    // DEBUG: 
    // DEBUG: 		// RGBA<>RGB conversion options 
    // DEBUG: 		// TODO : add RGBA pitch to all functions
    // DEBUG: 		// TODO : avoid redundancy
    // DEBUG: 		void rgb2rgba (const void* rgb_source,  void *rgba_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		
    // DEBUG: 		// Copy RGB to RGBA allowing for destination pitch
    // DEBUG: 		void rgb2rgba(const void *rgb_source, void *rgba_dest,
    // DEBUG: 			unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int dest_pitch, bool bInvert) const;
    // DEBUG: 		
    // DEBUG: 		void bgr2rgba (const void* bgr_source,  void *rgba_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		// BGR to RGBA allowing for destination pitch
    // DEBUG: 		void bgr2rgba(const void *rgb_source, void *rgba_dest,
    // DEBUG: 			unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int dest_pitch, bool bInvert) const;
    // DEBUG: 
    // DEBUG: 		void rgb2bgra (const void* rgb_source,  void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		
    // DEBUG: 		void rgb2bgra(const void *rgb_source, void *bgra_dest,
    // DEBUG: 			unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int dest_pitch, bool bInvert) const;
    // DEBUG: 
    // DEBUG: 		void bgr2bgra (const void* bgr_source,  void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		void rgba2bgr (const void* rgba_source, void *bgr_dest,  unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		void bgra2rgb (const void* bgra_source, void *rgb_dest,  unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		void bgra2bgr (const void* bgra_source, void *bgr_dest,  unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		// Copy RGBA to RGB allowing for source line pitch
    // DEBUG: 		void rgba2rgb (const void* rgba_source, void *rgb_dest,	unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int sourcePitch, bool bInvert = false, bool bMirror = false, bool bSwapRB = false) const;
    // DEBUG: 		// Copy RGBA to RGB allowing for source and destination pitch
    // DEBUG: 		void rgba2rgbResample(const void* source, void* dest,
    // DEBUG: 			unsigned int sourceWidth, unsigned int sourceHeight, unsigned int sourcePitch,
    // DEBUG: 			unsigned int destWidth, unsigned int destHeight,
    // DEBUG: 			bool bInvert = false, bool bMirror = false, bool bSwapRB = false) const;
    // DEBUG: 		// Copy RGBA to BGR allowing for source line pitch
    // DEBUG: 		void rgba2bgr(const void* rgba_source, void *rgb_dest, unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int sourcePitch, bool bInvert = false) const;
    // DEBUG: 		// Copy RGBA to BGR allowing for source and destination pitch
    // DEBUG: 		void rgba2bgrResample(const void* source, void* dest,
    // DEBUG: 			unsigned int sourceWidth, unsigned int sourceHeight, unsigned int sourcePitch,
    // DEBUG: 			unsigned int destWidth, unsigned int destHeight, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 	protected :
    // DEBUG: 
    // DEBUG: 		void CheckSSE();
    // DEBUG: 		bool m_bSSE2;
    // DEBUG: 		bool m_bSSE3;
    // DEBUG: 		bool m_bSSSE3;
    // DEBUG: 
    // DEBUG: 		void rgba_bgra(const void *rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		void rgba_bgra_sse2(const void *rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		void rgba_bgra_sse3(const void *rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutCopy : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 3)]
        public partial struct __Internal
        {
            internal byte m_bSSE2;
            internal byte m_bSSE3;
            internal byte m_bSSSE3;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutCopy@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutCopy@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1spoutCopy@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CopyPixels@spoutCopy@@QEBAXPEBEPEAEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CopyPixels(__IntPtr __instance, byte* src, byte* dst, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FlipBuffer@spoutCopy@@QEBAXPEBEPEAEIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FlipBuffer(__IntPtr __instance, byte* src, byte* dst, uint width, uint height, uint glFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?memcpy_sse2@spoutCopy@@QEBAXPEAXPEBX_K@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MemcpySse2(__IntPtr __instance, __IntPtr dst, __IntPtr src, ulong size);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgba@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgba(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgba@spoutCopy@@QEBAXPEBXPEAXIIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgba(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, uint destPitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgbaResample@spoutCopy@@QEBAXPEBXPEAXIIIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgbaResample(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgra@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgra(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgra@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgra(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, uint sourcePitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgra@spoutCopy@@QEBAXPEBXPEAXIIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgra(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, uint destPitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgra2rgba@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgra2rgba(__IntPtr __instance, __IntPtr bgra_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RemovePadding@spoutCopy@@QEBAXPEBEPEAEIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemovePadding(__IntPtr __instance, byte* source, byte* dest, uint width, uint height, uint source_stride, uint glFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb2rgba@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgb2rgba(__IntPtr __instance, __IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb2rgba@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgb2rgba(__IntPtr __instance, __IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, uint dest_pitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgr2rgba@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgr2rgba(__IntPtr __instance, __IntPtr bgr_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgr2rgba@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgr2rgba(__IntPtr __instance, __IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, uint dest_pitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb2bgra@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgb2bgra(__IntPtr __instance, __IntPtr rgb_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb2bgra@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgb2bgra(__IntPtr __instance, __IntPtr rgb_source, __IntPtr bgra_dest, uint width, uint height, uint dest_pitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgr2bgra@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgr2bgra(__IntPtr __instance, __IntPtr bgr_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgr@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgr(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgr_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgra2rgb@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgra2rgb(__IntPtr __instance, __IntPtr bgra_source, __IntPtr rgb_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgra2bgr@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgra2bgr(__IntPtr __instance, __IntPtr bgra_source, __IntPtr bgr_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgb@spoutCopy@@QEBAXPEBXPEAXIII_N22@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgb(__IntPtr __instance, __IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint sourcePitch, bool bInvert, bool bMirror, bool bSwapRB);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgbResample@spoutCopy@@QEBAXPEBXPEAXIIIII_N22@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgbResample(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert, bool bMirror, bool bSwapRB);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgr@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgr(__IntPtr __instance, __IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint sourcePitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgrResample@spoutCopy@@QEBAXPEBXPEAXIIIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgrResample(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSSE@spoutCopy@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CheckSSE(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba_bgra@spoutCopy@@IEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbaBgra(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba_bgra_sse2@spoutCopy@@IEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbaBgraSse2(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba_bgra_sse3@spoutCopy@@IEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbaBgraSse3(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutCopy> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutCopy>();

        protected bool __ownsNativeInstance;

        internal static SpoutCopy __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new SpoutCopy(native.ToPointer(), skipVTables);
        }

        internal static SpoutCopy __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (SpoutCopy)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static SpoutCopy __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutCopy(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutCopy(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SpoutCopy(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: spoutCopy()
        public SpoutCopy()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutCopy.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        // DEBUG: spoutCopy
        public SpoutCopy(global::Spout.SpoutCopy _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutCopy.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Spout.SpoutCopy.__Internal*) __Instance) = *((global::Spout.SpoutCopy.__Internal*) _0.__Instance);
        }

        ~SpoutCopy()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: void CopyPixels(const unsigned char *src, unsigned char *dst,
        // DEBUG: 						unsigned int width, unsigned int height, 
        // DEBUG: 						GLenum glFormat = GL_RGBA, bool bInvert = false) const
        public void CopyPixels(byte* src, byte* dst, uint width, uint height, uint glFormat, bool bInvert)
        {
            __Internal.CopyPixels(__Instance, src, dst, width, height, glFormat, bInvert);
        }

        // DEBUG: void FlipBuffer(const unsigned char *src, unsigned char *dst,
        // DEBUG: 						unsigned int width, unsigned int height,
        // DEBUG: 						GLenum glFormat = GL_RGBA) const
        public void FlipBuffer(byte* src, byte* dst, uint width, uint height, uint glFormat)
        {
            __Internal.FlipBuffer(__Instance, src, dst, width, height, glFormat);
        }

        // DEBUG: void memcpy_sse2(void* dst, const void* src, size_t size) const
        public void MemcpySse2(__IntPtr dst, __IntPtr src, ulong size)
        {
            __Internal.MemcpySse2(__Instance, dst, src, size);
        }

        // DEBUG: void rgba2rgba(const void* source, void* dest, unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int sourcePitch, bool bInvert = false) const
        public void Rgba2rgba(__IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, bool bInvert)
        {
            __Internal.Rgba2rgba(__Instance, source, dest, width, height, sourcePitch, bInvert);
        }

        // DEBUG: void rgba2rgba(const void* source, void* dest, unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int sourcePitch, unsigned int destPitch, bool bInvert) const
        public void Rgba2rgba(__IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, uint destPitch, bool bInvert)
        {
            __Internal.Rgba2rgba(__Instance, source, dest, width, height, sourcePitch, destPitch, bInvert);
        }

        // DEBUG: void rgba2rgbaResample(const void* source, void* dest,
        // DEBUG: 			unsigned int sourceWidth, unsigned int sourceHeight, unsigned int sourcePitch,
        // DEBUG: 			unsigned int destWidth, unsigned int destHeight, bool bInvert = false) const
        public void Rgba2rgbaResample(__IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert)
        {
            __Internal.Rgba2rgbaResample(__Instance, source, dest, sourceWidth, sourceHeight, sourcePitch, destWidth, destHeight, bInvert);
        }

        // DEBUG: void rgba2bgra(const void* rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        public void Rgba2bgra(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Rgba2bgra(__Instance, rgba_source, bgra_dest, width, height, bInvert);
        }

        // DEBUG: void rgba2bgra(const void* rgba_source, void *bgra_dest, unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int sourcePitch, bool bInvert = false) const
        public void Rgba2bgra(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, uint sourcePitch, bool bInvert)
        {
            __Internal.Rgba2bgra(__Instance, rgba_source, bgra_dest, width, height, sourcePitch, bInvert);
        }

        // DEBUG: void rgba2bgra(const void* source, void* dest, unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int sourcePitch, unsigned int destPitch, bool bInvert) const
        public void Rgba2bgra(__IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, uint destPitch, bool bInvert)
        {
            __Internal.Rgba2bgra(__Instance, source, dest, width, height, sourcePitch, destPitch, bInvert);
        }

        // DEBUG: void bgra2rgba(const void* bgra_source, void *rgba_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        public void Bgra2rgba(__IntPtr bgra_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgra2rgba(__Instance, bgra_source, rgba_dest, width, height, bInvert);
        }

        // DEBUG: void RemovePadding(const unsigned char *source, unsigned char *dest,
        // DEBUG: 			unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int source_stride, GLenum glFormat) const
        public void RemovePadding(byte* source, byte* dest, uint width, uint height, uint source_stride, uint glFormat)
        {
            __Internal.RemovePadding(__Instance, source, dest, width, height, source_stride, glFormat);
        }

        // DEBUG: void rgb2rgba (const void* rgb_source,  void *rgba_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        public void Rgb2rgba(__IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Rgb2rgba(__Instance, rgb_source, rgba_dest, width, height, bInvert);
        }

        // DEBUG: void rgb2rgba(const void *rgb_source, void *rgba_dest,
        // DEBUG: 			unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int dest_pitch, bool bInvert) const
        public void Rgb2rgba(__IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, uint dest_pitch, bool bInvert)
        {
            __Internal.Rgb2rgba(__Instance, rgb_source, rgba_dest, width, height, dest_pitch, bInvert);
        }

        // DEBUG: void bgr2rgba (const void* bgr_source,  void *rgba_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        public void Bgr2rgba(__IntPtr bgr_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgr2rgba(__Instance, bgr_source, rgba_dest, width, height, bInvert);
        }

        // DEBUG: void bgr2rgba(const void *rgb_source, void *rgba_dest,
        // DEBUG: 			unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int dest_pitch, bool bInvert) const
        public void Bgr2rgba(__IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, uint dest_pitch, bool bInvert)
        {
            __Internal.Bgr2rgba(__Instance, rgb_source, rgba_dest, width, height, dest_pitch, bInvert);
        }

        // DEBUG: void rgb2bgra (const void* rgb_source,  void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        public void Rgb2bgra(__IntPtr rgb_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Rgb2bgra(__Instance, rgb_source, bgra_dest, width, height, bInvert);
        }

        // DEBUG: void rgb2bgra(const void *rgb_source, void *bgra_dest,
        // DEBUG: 			unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int dest_pitch, bool bInvert) const
        public void Rgb2bgra(__IntPtr rgb_source, __IntPtr bgra_dest, uint width, uint height, uint dest_pitch, bool bInvert)
        {
            __Internal.Rgb2bgra(__Instance, rgb_source, bgra_dest, width, height, dest_pitch, bInvert);
        }

        // DEBUG: void bgr2bgra (const void* bgr_source,  void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        public void Bgr2bgra(__IntPtr bgr_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgr2bgra(__Instance, bgr_source, bgra_dest, width, height, bInvert);
        }

        // DEBUG: void rgba2bgr (const void* rgba_source, void *bgr_dest,  unsigned int width, unsigned int height, bool bInvert = false) const
        public void Rgba2bgr(__IntPtr rgba_source, __IntPtr bgr_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Rgba2bgr(__Instance, rgba_source, bgr_dest, width, height, bInvert);
        }

        // DEBUG: void bgra2rgb (const void* bgra_source, void *rgb_dest,  unsigned int width, unsigned int height, bool bInvert = false) const
        public void Bgra2rgb(__IntPtr bgra_source, __IntPtr rgb_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgra2rgb(__Instance, bgra_source, rgb_dest, width, height, bInvert);
        }

        // DEBUG: void bgra2bgr (const void* bgra_source, void *bgr_dest,  unsigned int width, unsigned int height, bool bInvert = false) const
        public void Bgra2bgr(__IntPtr bgra_source, __IntPtr bgr_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgra2bgr(__Instance, bgra_source, bgr_dest, width, height, bInvert);
        }

        // DEBUG: void rgba2rgb (const void* rgba_source, void *rgb_dest,	unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int sourcePitch, bool bInvert = false, bool bMirror = false, bool bSwapRB = false) const
        public void Rgba2rgb(__IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint sourcePitch, bool bInvert, bool bMirror, bool bSwapRB)
        {
            __Internal.Rgba2rgb(__Instance, rgba_source, rgb_dest, width, height, sourcePitch, bInvert, bMirror, bSwapRB);
        }

        // DEBUG: void rgba2rgbResample(const void* source, void* dest,
        // DEBUG: 			unsigned int sourceWidth, unsigned int sourceHeight, unsigned int sourcePitch,
        // DEBUG: 			unsigned int destWidth, unsigned int destHeight,
        // DEBUG: 			bool bInvert = false, bool bMirror = false, bool bSwapRB = false) const
        public void Rgba2rgbResample(__IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert, bool bMirror, bool bSwapRB)
        {
            __Internal.Rgba2rgbResample(__Instance, source, dest, sourceWidth, sourceHeight, sourcePitch, destWidth, destHeight, bInvert, bMirror, bSwapRB);
        }

        // DEBUG: void rgba2bgr(const void* rgba_source, void *rgb_dest, unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int sourcePitch, bool bInvert = false) const
        public void Rgba2bgr(__IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint sourcePitch, bool bInvert)
        {
            __Internal.Rgba2bgr(__Instance, rgba_source, rgb_dest, width, height, sourcePitch, bInvert);
        }

        // DEBUG: void rgba2bgrResample(const void* source, void* dest,
        // DEBUG: 			unsigned int sourceWidth, unsigned int sourceHeight, unsigned int sourcePitch,
        // DEBUG: 			unsigned int destWidth, unsigned int destHeight, bool bInvert = false) const
        public void Rgba2bgrResample(__IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert)
        {
            __Internal.Rgba2bgrResample(__Instance, source, dest, sourceWidth, sourceHeight, sourcePitch, destWidth, destHeight, bInvert);
        }

        // DEBUG: void CheckSSE()
        protected void CheckSSE()
        {
            __Internal.CheckSSE(__Instance);
        }

        // DEBUG: void rgba_bgra(const void *rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        protected void RgbaBgra(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.RgbaBgra(__Instance, rgba_source, bgra_dest, width, height, bInvert);
        }

        // DEBUG: void rgba_bgra_sse2(const void *rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        protected void RgbaBgraSse2(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.RgbaBgraSse2(__Instance, rgba_source, bgra_dest, width, height, bInvert);
        }

        // DEBUG: void rgba_bgra_sse3(const void *rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        protected void RgbaBgraSse3(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.RgbaBgraSse3(__Instance, rgba_source, bgra_dest, width, height, bInvert);
        }

        protected bool MBSSE2
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSSE2 != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSSE2 = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSSE3
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSSE3 != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSSE3 = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSSSE3
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSSSE3 != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSSSE3 = (byte) (value ? 1 : 0);
            }
        }
    }

    // DEBUG: enum LogLevel {
    // DEBUG: 	LOG_SILENT,
    // DEBUG: 	LOG_VERBOSE,
    // DEBUG: 	LOG_NOTICE,
    // DEBUG: 	LOG_WARNING,
    // DEBUG: 	LOG_ERROR,
    // DEBUG: 	LOG_FATAL,
    // DEBUG: 	LOG_NONE,
    // DEBUG: }
    public enum LogLevel
    {
        LOG_SILENT = 0,
        LOG_VERBOSE = 1,
        LOG_NOTICE = 2,
        LOG_WARNING = 3,
        LOG_ERROR = 4,
        LOG_FATAL = 5,
        LOG_NONE = 6
    }

    // DEBUG: typedef HANDLE	(WINAPI * PFNWGLDXOPENDEVICENVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr PFNWGLDXOPENDEVICENVPROC(__IntPtr dxDevice);

    // DEBUG: typedef BOOL	(WINAPI * PFNWGLDXCLOSEDEVICENVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXCLOSEDEVICENVPROC(__IntPtr hDevice);

    // DEBUG: typedef HANDLE	(WINAPI * PFNWGLDXREGISTEROBJECTNVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr PFNWGLDXREGISTEROBJECTNVPROC(__IntPtr hDevice, __IntPtr dxObject, uint name, uint type, uint access);

    // DEBUG: typedef BOOL	(WINAPI * PFNWGLDXUNREGISTEROBJECTNVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXUNREGISTEROBJECTNVPROC(__IntPtr hDevice, __IntPtr hObject);

    // DEBUG: typedef BOOL	(WINAPI * PFNWGLDXSETRESOURCESHAREHANDLENVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXSETRESOURCESHAREHANDLENVPROC(__IntPtr dxResource, __IntPtr shareHandle);

    // DEBUG: typedef BOOL	(WINAPI * PFNWGLDXLOCKOBJECTSNVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXLOCKOBJECTSNVPROC(__IntPtr hDevice, int count, __IntPtr* hObjects);

    // DEBUG: typedef BOOL	(WINAPI * PFNWGLDXUNLOCKOBJECTSNVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXUNLOCKOBJECTSNVPROC(__IntPtr hDevice, int count, __IntPtr* hObjects);

    // DEBUG: typedef void   (APIENTRY *glBindFramebufferEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindFramebufferEXTPROC(uint target, uint framebuffer);

    // DEBUG: typedef void   (APIENTRY *glBindRenderbufferEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindRenderbufferEXTPROC(uint target, uint renderbuffer);

    // DEBUG: typedef GLenum (APIENTRY *glCheckFramebufferStatusEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint GlCheckFramebufferStatusEXTPROC(uint target);

    // DEBUG: typedef void   (APIENTRY *glDeleteFramebuffersEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteFramebuffersEXTPROC(int n, uint* framebuffers);

    // DEBUG: typedef void   (APIENTRY *glDeleteRenderBuffersEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteRenderBuffersEXTPROC(int n, uint* renderbuffers);

    // DEBUG: typedef void   (APIENTRY *glFramebufferRenderbufferEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlFramebufferRenderbufferEXTPROC(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);

    // DEBUG: typedef void   (APIENTRY *glFramebufferTexture1DEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlFramebufferTexture1DEXTPROC(uint target, uint attachment, uint textarget, uint texture, int level);

    // DEBUG: typedef void   (APIENTRY *glFramebufferTexture2DEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlFramebufferTexture2DEXTPROC(uint target, uint attachment, uint textarget, uint texture, int level);

    // DEBUG: typedef void   (APIENTRY *glFramebufferTexture3DEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlFramebufferTexture3DEXTPROC(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset);

    // DEBUG: typedef void   (APIENTRY *glGenFramebuffersEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGenFramebuffersEXTPROC(int n, uint* framebuffers);

    // DEBUG: typedef void   (APIENTRY *glGenRenderbuffersEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGenRenderbuffersEXTPROC(int n, uint* renderbuffers);

    // DEBUG: typedef void   (APIENTRY *glGenerateMipmapEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGenerateMipmapEXTPROC(uint target);

    // DEBUG: typedef void   (APIENTRY *glGetFramebufferAttachmentParameterivEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetFramebufferAttachmentParameterivEXTPROC(uint target, uint attachment, uint pname, int* @params);

    // DEBUG: typedef void   (APIENTRY *glGetRenderbufferParameterivEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetRenderbufferParameterivEXTPROC(uint target, uint pname, int* @params);

    // DEBUG: typedef GLboolean (APIENTRY *glIsFramebufferEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate byte GlIsFramebufferEXTPROC(uint framebuffer);

    // DEBUG: typedef GLboolean (APIENTRY *glIsRenderbufferEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate byte GlIsRenderbufferEXTPROC(uint renderbuffer);

    // DEBUG: typedef void (APIENTRY *glRenderbufferStorageEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlRenderbufferStorageEXTPROC(uint target, uint internalformat, int width, int height);

    // DEBUG: typedef void   (APIENTRY *glBlitFramebufferEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBlitFramebufferEXTPROC(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);

    // DEBUG: typedef BOOL (WINAPI * PFNWGLSWAPINTERVALEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLSWAPINTERVALEXTPROC(int interval);

    // DEBUG: typedef int (WINAPI * PFNWGLGETSWAPINTERVALEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLGETSWAPINTERVALEXTPROC();

    // DEBUG: typedef ptrdiff_t GLsizeiptr
    // DEBUG: typedef ptrdiff_t GLintptr
    // DEBUG: typedef void   (APIENTRY *glGenBuffersPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGenBuffersPROC(int n, uint* buffers);

    // DEBUG: typedef void   (APIENTRY *glDeleteBuffersPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteBuffersPROC(int n, uint* buffers);

    // DEBUG: typedef void   (APIENTRY *glBindBufferPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindBufferPROC(uint target, uint buffer);

    // DEBUG: typedef void   (APIENTRY *glBufferDataPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBufferDataPROC(uint target, long size, __IntPtr data, uint usage);

    // DEBUG: typedef void   (APIENTRY *glBufferStoragePROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBufferStoragePROC(uint target, long size, __IntPtr data, uint flags);

    // DEBUG: typedef void * (APIENTRY *glMapBufferPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr GlMapBufferPROC(uint target, uint access);

    // DEBUG: typedef void * (APIENTRY *glMapBufferRangePROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr GlMapBufferRangePROC(uint target, long offset, long length, uint access);

    // DEBUG: typedef void   (APIENTRY *glUnmapBufferPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlUnmapBufferPROC(uint target);

    // DEBUG: typedef void   (APIENTRY *glGetBufferParameterivPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetBufferParameterivPROC(uint target, uint value, int* data);

    // DEBUG: typedef struct __GLsync *GLsync
    // DEBUG: typedef uint64_t GLuint64
    // DEBUG: typedef GLenum(APIENTRY *glClientWaitSyncPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint GlClientWaitSyncPROC(__IntPtr sync, uint flags, ulong timeout);

    // DEBUG: typedef void   (APIENTRY *glDeleteSyncPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteSyncPROC(__IntPtr sync);

    // DEBUG: typedef GLsync(APIENTRY *glFenceSyncPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr GlFenceSyncPROC(uint condition, uint flags);

    // DEBUG: typedef void (APIENTRY * PFNGLCOPYIMAGESUBDATAPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLCOPYIMAGESUBDATAPROC(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);

    // DEBUG: typedef void(APIENTRY * glGetInternalFormativPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetInternalFormativPROC(uint target, uint internalfrmat, uint pname, int buffSize, int* @params);

    // DEBUG: struct __GLsync
    public unsafe partial class GLsync
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.GLsync> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.GLsync>();

        protected bool __ownsNativeInstance;

        internal static GLsync __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new GLsync(native.ToPointer(), skipVTables);
        }

        internal static GLsync __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (GLsync)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static GLsync __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new GLsync(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GLsync(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GLsync(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~GLsync()
        {
            // FIXME: dispose the struct??
            //Dispose(false, callNativeDtor : __ownsNativeInstance );
        }
    }

    public unsafe partial class SpoutGLextensions
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?InitializeGlew@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InitializeGlew();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?loadGLextensions@@YAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint LoadGLextensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?loadInteropExtensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadInteropExtensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?loadFBOextensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadFBOextensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?loadBLITextension@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadBLITextension();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?loadSwapExtensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadSwapExtensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?loadPBOextensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadPBOextensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?loadCopyExtensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadCopyExtensions();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?loadContextExtension@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadContextExtension();

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?isExtensionSupported@@YA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsExtensionSupported([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string extension);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ExtLog@@YAXW4LogLevel@@PEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ExtLog(global::Spout.LogLevel level, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);
        }

        // DEBUG: bool InitializeGlew()
        public static bool InitializeGlew()
        {
            var __ret = __Internal.InitializeGlew();
            return __ret;
        }

        // DEBUG: unsigned int loadGLextensions()
        public static uint LoadGLextensions()
        {
            var __ret = __Internal.LoadGLextensions();
            return __ret;
        }

        // DEBUG: bool loadInteropExtensions()
        public static bool LoadInteropExtensions()
        {
            var __ret = __Internal.LoadInteropExtensions();
            return __ret;
        }

        // DEBUG: bool loadFBOextensions()
        public static bool LoadFBOextensions()
        {
            var __ret = __Internal.LoadFBOextensions();
            return __ret;
        }

        // DEBUG: bool loadBLITextension()
        public static bool LoadBLITextension()
        {
            var __ret = __Internal.LoadBLITextension();
            return __ret;
        }

        // DEBUG: bool loadSwapExtensions()
        public static bool LoadSwapExtensions()
        {
            var __ret = __Internal.LoadSwapExtensions();
            return __ret;
        }

        // DEBUG: bool loadPBOextensions()
        public static bool LoadPBOextensions()
        {
            var __ret = __Internal.LoadPBOextensions();
            return __ret;
        }

        // DEBUG: bool loadCopyExtensions()
        public static bool LoadCopyExtensions()
        {
            var __ret = __Internal.LoadCopyExtensions();
            return __ret;
        }

        // DEBUG: bool loadContextExtension()
        public static bool LoadContextExtension()
        {
            var __ret = __Internal.LoadContextExtension();
            return __ret;
        }

        // DEBUG: bool isExtensionSupported(const char *extension)
        public static bool IsExtensionSupported(string extension)
        {
            var __ret = __Internal.IsExtensionSupported(extension);
            return __ret;
        }

        // DEBUG: void ExtLog(LogLevel level, const char* format, ...)
        public static void ExtLog(global::Spout.LogLevel level, string format)
        {
            __Internal.ExtLog(level, format);
        }

        // DEBUG: extern PFNWGLDXOPENDEVICENVPROC				wglDXOpenDeviceNV
        public static global::Spout.PFNWGLDXOPENDEVICENVPROC WglDXOpenDeviceNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXOpenDeviceNV__3P6APEAXPEAX_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.PFNWGLDXOPENDEVICENVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.PFNWGLDXOPENDEVICENVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXOpenDeviceNV__3P6APEAXPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLDXCLOSEDEVICENVPROC			wglDXCloseDeviceNV
        public static global::Spout.PFNWGLDXCLOSEDEVICENVPROC WglDXCloseDeviceNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXCloseDeviceNV__3P6AHPEAX_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.PFNWGLDXCLOSEDEVICENVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.PFNWGLDXCLOSEDEVICENVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXCloseDeviceNV__3P6AHPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLDXREGISTEROBJECTNVPROC			wglDXRegisterObjectNV
        public static global::Spout.PFNWGLDXREGISTEROBJECTNVPROC WglDXRegisterObjectNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXRegisterObjectNV__3P6APEAXPEAX0III_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.PFNWGLDXREGISTEROBJECTNVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.PFNWGLDXREGISTEROBJECTNVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXRegisterObjectNV__3P6APEAXPEAX0III_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLDXUNREGISTEROBJECTNVPROC		wglDXUnregisterObjectNV
        public static global::Spout.PFNWGLDXUNREGISTEROBJECTNVPROC WglDXUnregisterObjectNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXUnregisterObjectNV__3P6AHPEAX0_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.PFNWGLDXUNREGISTEROBJECTNVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.PFNWGLDXUNREGISTEROBJECTNVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXUnregisterObjectNV__3P6AHPEAX0_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLDXSETRESOURCESHAREHANDLENVPROC wglDXSetResourceShareHandleNV
        public static global::Spout.PFNWGLDXSETRESOURCESHAREHANDLENVPROC WglDXSetResourceShareHandleNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXSetResourceShareHandleNV__3P6AHPEAX0_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.PFNWGLDXSETRESOURCESHAREHANDLENVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.PFNWGLDXSETRESOURCESHAREHANDLENVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXSetResourceShareHandleNV__3P6AHPEAX0_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLDXLOCKOBJECTSNVPROC			wglDXLockObjectsNV
        public static global::Spout.PFNWGLDXLOCKOBJECTSNVPROC WglDXLockObjectsNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXLockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.PFNWGLDXLOCKOBJECTSNVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.PFNWGLDXLOCKOBJECTSNVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXLockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLDXUNLOCKOBJECTSNVPROC			wglDXUnlockObjectsNV
        public static global::Spout.PFNWGLDXUNLOCKOBJECTSNVPROC WglDXUnlockObjectsNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXUnlockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.PFNWGLDXUNLOCKOBJECTSNVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.PFNWGLDXUNLOCKOBJECTSNVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglDXUnlockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBindFramebufferEXTPROC						glBindFramebufferEXT
        public static global::Spout.GlBindFramebufferEXTPROC GlBindFramebufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glBindFramebufferEXT__3P6AXII_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlBindFramebufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlBindFramebufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glBindFramebufferEXT__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBindRenderbufferEXTPROC					glBindRenderbufferEXT
        public static global::Spout.GlBindRenderbufferEXTPROC GlBindRenderbufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glBindRenderbufferEXT__3P6AXII_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlBindRenderbufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlBindRenderbufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glBindRenderbufferEXT__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glCheckFramebufferStatusEXTPROC				glCheckFramebufferStatusEXT
        public static global::Spout.GlCheckFramebufferStatusEXTPROC GlCheckFramebufferStatusEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glCheckFramebufferStatusEXT__3P6AII_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlCheckFramebufferStatusEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlCheckFramebufferStatusEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glCheckFramebufferStatusEXT__3P6AII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDeleteFramebuffersEXTPROC					glDeleteFramebuffersEXT
        public static global::Spout.GlDeleteFramebuffersEXTPROC GlDeleteFramebuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glDeleteFramebuffersEXT__3P6AXHPEBI_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlDeleteFramebuffersEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlDeleteFramebuffersEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glDeleteFramebuffersEXT__3P6AXHPEBI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDeleteRenderBuffersEXTPROC					glDeleteRenderBuffersEXT
        public static global::Spout.GlDeleteRenderBuffersEXTPROC GlDeleteRenderBuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glDeleteRenderBuffersEXT__3P6AXHPEBI_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlDeleteRenderBuffersEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlDeleteRenderBuffersEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glDeleteRenderBuffersEXT__3P6AXHPEBI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glFramebufferRenderbufferEXTPROC				glFramebufferRenderbufferEXT
        public static global::Spout.GlFramebufferRenderbufferEXTPROC GlFramebufferRenderbufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glFramebufferRenderbufferEXT__3P6AXIIII_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlFramebufferRenderbufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlFramebufferRenderbufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glFramebufferRenderbufferEXT__3P6AXIIII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glFramebufferTexture1DEXTPROC				glFramebufferTexture1DEXT
        public static global::Spout.GlFramebufferTexture1DEXTPROC GlFramebufferTexture1DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glFramebufferTexture1DEXT__3P6AXIIIIH_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlFramebufferTexture1DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlFramebufferTexture1DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glFramebufferTexture1DEXT__3P6AXIIIIH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glFramebufferTexture2DEXTPROC				glFramebufferTexture2DEXT
        public static global::Spout.GlFramebufferTexture2DEXTPROC GlFramebufferTexture2DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glFramebufferTexture2DEXT__3P6AXIIIIH_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlFramebufferTexture2DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlFramebufferTexture2DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glFramebufferTexture2DEXT__3P6AXIIIIH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glFramebufferTexture3DEXTPROC				glFramebufferTexture3DEXT
        public static global::Spout.GlFramebufferTexture3DEXTPROC GlFramebufferTexture3DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glFramebufferTexture3DEXT__3P6AXIIIIHH_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlFramebufferTexture3DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlFramebufferTexture3DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glFramebufferTexture3DEXT__3P6AXIIIIHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGenFramebuffersEXTPROC						glGenFramebuffersEXT
        public static global::Spout.GlGenFramebuffersEXTPROC GlGenFramebuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGenFramebuffersEXT__3P6AXHPEAI_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlGenFramebuffersEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlGenFramebuffersEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGenFramebuffersEXT__3P6AXHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGenRenderbuffersEXTPROC					glGenRenderbuffersEXT
        public static global::Spout.GlGenRenderbuffersEXTPROC GlGenRenderbuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGenRenderbuffersEXT__3P6AXHPEAI_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlGenRenderbuffersEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlGenRenderbuffersEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGenRenderbuffersEXT__3P6AXHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGenerateMipmapEXTPROC						glGenerateMipmapEXT
        public static global::Spout.GlGenerateMipmapEXTPROC GlGenerateMipmapEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGenerateMipmapEXT__3P6AXI_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlGenerateMipmapEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlGenerateMipmapEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGenerateMipmapEXT__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetFramebufferAttachmentParameterivEXTPROC	glGetFramebufferAttachmentParameterivEXT
        public static global::Spout.GlGetFramebufferAttachmentParameterivEXTPROC GlGetFramebufferAttachmentParameterivEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGetFramebufferAttachmentParameterivEXT__3P6AXIIIPEAH_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlGetFramebufferAttachmentParameterivEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlGetFramebufferAttachmentParameterivEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGetFramebufferAttachmentParameterivEXT__3P6AXIIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetRenderbufferParameterivEXTPROC			glGetRenderbufferParameterivEXT
        public static global::Spout.GlGetRenderbufferParameterivEXTPROC GlGetRenderbufferParameterivEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGetRenderbufferParameterivEXT__3P6AXIIPEAH_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlGetRenderbufferParameterivEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlGetRenderbufferParameterivEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGetRenderbufferParameterivEXT__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glIsFramebufferEXTPROC						glIsFramebufferEXT
        public static global::Spout.GlIsFramebufferEXTPROC GlIsFramebufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glIsFramebufferEXT__3P6AEI_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlIsFramebufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlIsFramebufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glIsFramebufferEXT__3P6AEI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glIsRenderbufferEXTPROC						glIsRenderbufferEXT
        public static global::Spout.GlIsRenderbufferEXTPROC GlIsRenderbufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glIsRenderbufferEXT__3P6AEI_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlIsRenderbufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlIsRenderbufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glIsRenderbufferEXT__3P6AEI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glRenderbufferStorageEXTPROC					glRenderbufferStorageEXT
        public static global::Spout.GlRenderbufferStorageEXTPROC GlRenderbufferStorageEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glRenderbufferStorageEXT__3P6AXIIHH_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlRenderbufferStorageEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlRenderbufferStorageEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glRenderbufferStorageEXT__3P6AXIIHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBlitFramebufferEXTPROC glBlitFramebufferEXT
        public static global::Spout.GlBlitFramebufferEXTPROC GlBlitFramebufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glBlitFramebufferEXT__3P6AXHHHHHHHHII_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlBlitFramebufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlBlitFramebufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glBlitFramebufferEXT__3P6AXHHHHHHHHII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLSWAPINTERVALEXTPROC       wglSwapIntervalEXT
        public static global::Spout.PFNWGLSWAPINTERVALEXTPROC WglSwapIntervalEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglSwapIntervalEXT__3P6AHH_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.PFNWGLSWAPINTERVALEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.PFNWGLSWAPINTERVALEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglSwapIntervalEXT__3P6AHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLGETSWAPINTERVALEXTPROC    wglGetSwapIntervalEXT
        public static global::Spout.PFNWGLGETSWAPINTERVALEXTPROC WglGetSwapIntervalEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglGetSwapIntervalEXT__3P6AHXZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.PFNWGLGETSWAPINTERVALEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.PFNWGLGETSWAPINTERVALEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._wglGetSwapIntervalEXT__3P6AHXZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGenBuffersPROC		glGenBuffersEXT
        public static global::Spout.GlGenBuffersPROC GlGenBuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGenBuffersEXT__3P6AXHPEBI_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlGenBuffersPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlGenBuffersPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGenBuffersEXT__3P6AXHPEBI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDeleteBuffersPROC	glDeleteBuffersEXT
        public static global::Spout.GlDeleteBuffersPROC GlDeleteBuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glDeleteBuffersEXT__3P6AXHPEBI_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlDeleteBuffersPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlDeleteBuffersPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glDeleteBuffersEXT__3P6AXHPEBI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBindBufferPROC		glBindBufferEXT
        public static global::Spout.GlBindBufferPROC GlBindBufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glBindBufferEXT__3P6AXII_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlBindBufferPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlBindBufferPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glBindBufferEXT__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBufferDataPROC		glBufferDataEXT
        public static global::Spout.GlBufferDataPROC GlBufferDataEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glBufferDataEXT__3P6AXI_JPEBXI_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlBufferDataPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlBufferDataPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glBufferDataEXT__3P6AXI_JPEBXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBufferStoragePROC	glBufferStorageEXT
        public static global::Spout.GlBufferStoragePROC GlBufferStorageEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glBufferStorageEXT__3P6AXI_JPEBXI_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlBufferStoragePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlBufferStoragePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glBufferStorageEXT__3P6AXI_JPEBXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glMapBufferPROC		glMapBufferEXT
        public static global::Spout.GlMapBufferPROC GlMapBufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glMapBufferEXT__3P6APEAXII_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlMapBufferPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlMapBufferPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glMapBufferEXT__3P6APEAXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glMapBufferRangePROC	glMapBufferRangeEXT
        public static global::Spout.GlMapBufferRangePROC GlMapBufferRangeEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glMapBufferRangeEXT__3P6APEAXI_J0I_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlMapBufferRangePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlMapBufferRangePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glMapBufferRangeEXT__3P6APEAXI_J0I_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glUnmapBufferPROC	glUnmapBufferEXT
        public static global::Spout.GlUnmapBufferPROC GlUnmapBufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glUnmapBufferEXT__3P6AXI_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlUnmapBufferPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlUnmapBufferPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glUnmapBufferEXT__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetBufferParameterivPROC glGetBufferParameterivEXT
        public static global::Spout.GlGetBufferParameterivPROC GlGetBufferParameterivEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGetBufferParameterivEXT__3P6AXIIPEAH_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlGetBufferParameterivPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlGetBufferParameterivPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGetBufferParameterivEXT__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glClientWaitSyncPROC glClientWaitSyncEXT
        public static global::Spout.GlClientWaitSyncPROC GlClientWaitSyncEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glClientWaitSyncEXT__3P6AIPEAU__GLsync__I_K_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlClientWaitSyncPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlClientWaitSyncPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glClientWaitSyncEXT__3P6AIPEAU__GLsync__I_K_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDeleteSyncPROC     glDeleteSyncEXT
        public static global::Spout.GlDeleteSyncPROC GlDeleteSyncEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glDeleteSyncEXT__3P6AXPEAU__GLsync___ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlDeleteSyncPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlDeleteSyncPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glDeleteSyncEXT__3P6AXPEAU__GLsync___ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glFenceSyncPROC      glFenceSyncEXT
        public static global::Spout.GlFenceSyncPROC GlFenceSyncEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glFenceSyncEXT__3P6APEAU__GLsync__II_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlFenceSyncPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlFenceSyncPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glFenceSyncEXT__3P6APEAU__GLsync__II_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData
        public static global::Spout.PFNGLCOPYIMAGESUBDATAPROC GlCopyImageSubData
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glCopyImageSubData__3P6AXIIHHHHIIHHHHHHH_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.PFNGLCOPYIMAGESUBDATAPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.PFNGLCOPYIMAGESUBDATAPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glCopyImageSubData__3P6AXIIHHHHIIHHHHHHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetInternalFormativPROC glGetInternalFormativ
        public static global::Spout.GlGetInternalFormativPROC GlGetInternalFormativ
        {
            get
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGetInternalFormativ__3P6AXIIIHPEAH_ZEA;
                var __ptr0 = *__ptr;
                return __ptr0 == IntPtr.Zero? null : (global::Spout.GlGetInternalFormativPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Spout.GlGetInternalFormativPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::Spout.__Symbols.Spout._glGetInternalFormativ__3P6AXIIIHPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    // DEBUG: class SPOUT_DLLEXP spoutGL {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 	spoutGL();
    // DEBUG:     virtual ~spoutGL();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// OpenGL shared texture access
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Bind OpenGL shared texture
    // DEBUG: 	bool BindSharedTexture();
    // DEBUG: 	// Un-bind OpenGL shared texture
    // DEBUG: 	bool UnBindSharedTexture();
    // DEBUG: 	// OpenGL shared texture ID
    // DEBUG: 	GLuint GetSharedTextureID();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Graphics compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user auto GPU/CPU share
    // DEBUG: 	bool GetAutoShare();
    // DEBUG: 	// Set application auto GPU/CPU share
    // DEBUG: 	void SetAutoShare(bool bAuto = true);
    // DEBUG: 	// Get user CPU share
    // DEBUG: 	bool GetCPUshare();
    // DEBUG: 	// Set application CPU share
    // DEBUG: 	// (re-test GL/DX compatibility if set to false)
    // DEBUG: 	void SetCPUshare(bool bCPU = true);
    // DEBUG: 	// OpenGL texture share compatibility
    // DEBUG: 	bool IsGLDXready();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// User settings recorded in the registry by "SpoutSettings"
    // DEBUG: 	//
    // DEBUG: 	
    // DEBUG: 	// Get user buffering mode
    // DEBUG: 	bool GetBufferMode();
    // DEBUG: 	// Set application buffering mode
    // DEBUG: 	void SetBufferMode(bool bActive = true);
    // DEBUG: 	// Get user number of pixel buffers
    // DEBUG: 	int GetBuffers();
    // DEBUG: 	// Set application number of pixel buffers
    // DEBUG: 	void SetBuffers(int nBuffers);
    // DEBUG: 	// Get user Maximum senders allowed
    // DEBUG: 	int GetMaxSenders();
    // DEBUG: 	// Set user Maximum senders allowed
    // DEBUG: 	void SetMaxSenders(int maxSenders);
    // DEBUG: 	
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user DX9 mode
    // DEBUG: 	bool GetDX9();
    // DEBUG: 	// Set user DX9 mode
    // DEBUG: 	bool SetDX9(bool bDX9 = true);
    // DEBUG: 	// Get user memory share mode
    // DEBUG: 	bool GetMemoryShareMode();
    // DEBUG: 	// Set user memory share mode
    // DEBUG: 	bool SetMemoryShareMode(bool bMem = true);
    // DEBUG: 	// Get user CPU mode
    // DEBUG: 	bool GetCPUmode();
    // DEBUG: 	// Set user CPU mode
    // DEBUG: 	bool SetCPUmode(bool bCPU);
    // DEBUG: 	// Get user share mode
    // DEBUG: 	//  0 - texture, 1 - memory, 2 - CPU
    // DEBUG: 	int GetShareMode();
    // DEBUG: 	// Set user share mode
    // DEBUG: 	//  0 - texture, 1 - memory, 2 - CPU
    // DEBUG: 	void SetShareMode(int mode);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Information
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// The path of the host that produced the sender
    // DEBUG: 	bool GetHostPath(const char *sendername, char *hostpath, int maxchars);
    // DEBUG: 	// Vertical sync status
    // DEBUG: 	int GetVerticalSync();
    // DEBUG: 	// Lock to monitor vertical sync
    // DEBUG: 	bool SetVerticalSync(bool bSync = true);
    // DEBUG: 	// Get Spout version
    // DEBUG: 	int GetSpoutVersion();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Utility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Copy OpenGL texture with optional invert
    // DEBUG: 	//   Textures must be the same size
    // DEBUG: 	bool CopyTexture(GLuint SourceID, GLuint SourceTarget, GLuint DestID, GLuint DestTarget,
    // DEBUG: 		unsigned int width, unsigned int height, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Correct for image stride
    // DEBUG: 	void RemovePadding(const unsigned char *source, unsigned char *dest,
    // DEBUG: 		unsigned int width, unsigned int height, unsigned int stride, GLenum glFormat = GL_RGBA);
    // DEBUG: 
    // DEBUG: 	// DX11 texture read
    // DEBUG: 	//  o Copy from the shared DX11 texture to a DX11 texture
    // DEBUG: 	bool ReadTexture(ID3D11Texture2D** texture);
    // DEBUG: 	// DX11 texture write
    // DEBUG: 	//  o Copy a DX11 texture to the shared DX11 texture
    // DEBUG: 	bool WriteTexture(ID3D11Texture2D** texture);
    // DEBUG: 	// DX11 texture write with readback to OpenGL texture
    // DEBUG: 	//   o Copy a DX11 texture to the DX11 shared texture
    // DEBUG: 	//   o Copy the linked OpenGL texture back to and OpenGL texture
    // DEBUG: 	bool WriteTextureReadback(ID3D11Texture2D** texture, GLuint TextureID, GLuint TextureTarget,
    // DEBUG: 		unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO = 0);
    // DEBUG: 
    // DEBUG: 
    // DEBUG: 	// Initialize OpenGL and DX11
    // DEBUG: 	//     o Load extensions and check for availability and function
    // DEBUG: 	//     o Open DirectX and check for availability
    // DEBUG: 	//     o Compatibility test for use or GL/DX interop
    // DEBUG: 	//     o Optionally re-test compatibility even if already initialized
    // DEBUG: 	bool OpenSpout(bool bRetest = false);
    // DEBUG: 	// Initialize DirectX
    // DEBUG: 	bool OpenDirectX();
    // DEBUG: 	// Set sender DX11 shared texture format
    // DEBUG: 	void SetDX11format(DXGI_FORMAT textureformat);
    // DEBUG: 	// Close DirectX and free resources
    // DEBUG: 	void CloseDirectX();
    // DEBUG: 	// Create an OpenGL window and context for situations where there is none.
    // DEBUG: 	//   Not used if applications already have an OpenGL context.
    // DEBUG: 	//   Always call CloseOpenGL afterwards.
    // DEBUG: 	bool CreateOpenGL();
    // DEBUG: 	// Close OpenGL window
    // DEBUG: 	bool CloseOpenGL();
    // DEBUG: 	// Class initialization status
    // DEBUG: 	bool IsSpoutInitialized();
    // DEBUG: 
    // DEBUG: 	// Perform tests for GL/DX interop availability and compatibility
    // DEBUG: 	bool GLDXready();
    // DEBUG: 	// Set host path to sender shared memory
    // DEBUG: 	bool SetHostPath(const char *sendername);
    // DEBUG: 	// Set sender PartnerID field with CPU sharing method and GL/DX compatibility
    // DEBUG: 	bool SetSenderID(const char *sendername, bool bCPU, bool bGLDX);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	bool OpenDirectX11(ID3D11Device* pDevice = nullptr);
    // DEBUG: 	ID3D11Device* GetDX11Device();
    // DEBUG: 	ID3D11DeviceContext* GetDX11Context();
    // DEBUG: 	void CleanupDirectX();
    // DEBUG: 	void CleanupDX11();
    // DEBUG: 	bool CleanupInterop();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// OpenGL extensions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	bool LoadGLextensions();
    // DEBUG: 	bool IsGLDXavailable(); // GL/DX interop extensions supported
    // DEBUG: 	bool IsBLITavailable(); // fbo blit extensions available
    // DEBUG: 	bool IsSWAPavailable(); // swap extensions available
    // DEBUG: 	bool IsBGRAavailable(); // bgra extensions available
    // DEBUG: 	bool IsCOPYavailable(); // copy extensions available
    // DEBUG: 	bool IsPBOavailable();  // pbo extensions supported
    // DEBUG: 	bool IsCONTEXTavailable(); // Context extension supported
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Legacy OpenGL functions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// See _SpoutCommon.h_ #define legacyOpenGL
    // DEBUG: #ifdef legacyOpenGL
    // DEBUG: 	void SaveOpenGLstate(unsigned int width, unsigned int height, bool bFitWindow = true);
    // DEBUG: 	void RestoreOpenGLstate();
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Public for special use
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Link a shared DirectX texture to an OpenGL texture
    // DEBUG: 	HANDLE LinkGLDXtextures(void* pDXdevice, void* pSharedTexture, GLuint glTextureID);
    // DEBUG: 	// Return a handle to the the DX/GL interop device
    // DEBUG: 	HANDLE GetInteropDevice();
    // DEBUG: 	// Copy OpenGL to shared DirectX 11 texture via CPU
    // DEBUG: 	bool WriteDX11texture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO);
    // DEBUG: 	// Copy from shared DX11 texture to OpenGL via CPU
    // DEBUG: 	bool ReadDX11texture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Data sharing
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Write data to shared memory
    // DEBUG: 	bool WriteMemoryBuffer(const char *name, const char* data, int length);
    // DEBUG: 	// Read data from shared memory
    // DEBUG: 	int ReadMemoryBuffer(const char* name, char* data, int maxlength);
    // DEBUG: 	// Create a shared memory buffer
    // DEBUG: 	bool CreateMemoryBuffer(const char *name, int length);
    // DEBUG: 	// Delete a shared memory buffer
    // DEBUG: 	bool DeleteMemoryBuffer();
    // DEBUG: 	// Get the number of bytes available for data transfer
    // DEBUG: 	int GetMemoryBufferSize(const char *name);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// For external access
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// DirectX 11 texture sharing
    // DEBUG: 	spoutDirectX spoutdx;
    // DEBUG: 	// Pixel buffer copying
    // DEBUG: 	spoutCopy spoutcopy;
    // DEBUG: 	// Spout sender management
    // DEBUG: 	spoutSenderNames sendernames;
    // DEBUG: 	// Frame counting management
    // DEBUG: 	spoutFrameCount frame;
    // DEBUG: 
    // DEBUG: protected :
    // DEBUG: 
    // DEBUG: 	
    // DEBUG: 	// For 2.006(receive only) / WriteMemoryBuffer / ReadMemoryBuffer
    // DEBUG: 	SpoutSharedMemory memoryshare;
    // DEBUG: 
    // DEBUG: 	// GL/DX functions
    // DEBUG: 	bool CreateInterop(unsigned int width, unsigned int height, DWORD dwFormat, bool bReceive);
    // DEBUG: 	HRESULT LockInteropObject(HANDLE hDevice, HANDLE *hObject);
    // DEBUG: 	HRESULT UnlockInteropObject(HANDLE hDevice, HANDLE *hObject);
    // DEBUG: 	void CleanupGL(); // Free OpenGL resources
    // DEBUG: 
    // DEBUG: 	// OpenGL texture create
    // DEBUG: 	void CheckOpenGLTexture(GLuint &texID, GLenum GLformat, unsigned int width, unsigned int height);
    // DEBUG: 	void InitTexture(GLuint &texID, GLenum GLformat, unsigned int width, unsigned int height);
    // DEBUG: 
    // DEBUG: 	// OpenGL texture copy
    // DEBUG: 	bool WriteGLDXtexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = true, GLuint HostFBO = 0);
    // DEBUG: 	bool ReadGLDXtexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	bool SetSharedTextureData(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO);
    // DEBUG: 	bool GetSharedTextureData(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO);
    // DEBUG: 	
    // DEBUG: 	// OpenGL pixel copy
    // DEBUG: 	bool WriteGLDXpixels(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	bool ReadGLDXpixels(unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	
    // DEBUG: 	// PBOs for OpenGL pixel copy
    // DEBUG: 	GLuint m_pbo[4];
    // DEBUG: 	int PboIndex;
    // DEBUG: 	int NextPboIndex;
    // DEBUG: 
    // DEBUG: 	int m_nBuffers;
    // DEBUG: 	bool UnloadTexturePixels(GLuint TextureID, GLuint TextureTarget,
    // DEBUG: 		unsigned int width, unsigned int height, unsigned int pitch,
    // DEBUG: 		unsigned char* data, GLenum glFormat = GL_RGBA,
    // DEBUG: 		bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	
    // DEBUG: 	// OpenGL <-> DX11
    // DEBUG: 	// WriteDX11texture - public
    // DEBUG: 	// ReadDX11texture  - public
    // DEBUG: 	bool ReadTextureData(GLuint SourceID, GLuint SourceTarget, unsigned int width, unsigned int height, unsigned int pitch, unsigned char* dest, GLenum GLformat, bool bInvert, GLuint HostFBO);
    // DEBUG: 	
    // DEBUG: 	// Pixels <-> DX11
    // DEBUG: 	bool WriteDX11pixels(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false);
    // DEBUG: 	bool ReadDX11pixels(unsigned char * pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false);
    // DEBUG: 	bool WritePixelData(const unsigned char* pixels, ID3D11Texture2D* pStagingTexture, unsigned int width, unsigned int height, GLenum glFormat, bool bInvert);
    // DEBUG: 	bool ReadPixelData(ID3D11Texture2D* pStagingTexture, unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat, bool bInvert);
    // DEBUG: 
    // DEBUG: 	// Staging textures for DX11 CPU copy
    // DEBUG: 	ID3D11Texture2D* m_pStaging[2];
    // DEBUG: 	int m_Index;
    // DEBUG: 	int m_NextIndex;
    // DEBUG: 	bool CheckStagingTextures(unsigned int width, unsigned int height, int nTextures);
    // DEBUG: 
    // DEBUG: 	// 2.006 shared memory
    // DEBUG: 	bool ReadMemoryTexture(const char* sendername, GLuint TexID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	bool ReadMemoryPixels(const char* sendername, unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false);
    // DEBUG: 	bool WriteMemoryPixels(const char *sendername, const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false);
    // DEBUG: 
    // DEBUG: 	// Utility
    // DEBUG: 	bool OpenDeviceKey(const char* key, int maxsize, char* description, char* version);
    // DEBUG: 	void trim(char* s);
    // DEBUG: 
    // DEBUG: 	// Errors
    // DEBUG: 	void PrintFBOstatus(GLenum status);
    // DEBUG: 	bool GLerror();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Class globals
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Sender/Receiver
    // DEBUG: 	char m_SenderName[256];
    // DEBUG: 	char m_SenderNameSetup[256];
    // DEBUG: 	unsigned int m_Width;
    // DEBUG: 	unsigned int m_Height;
    // DEBUG: 
    // DEBUG: 	// General
    // DEBUG: 	GLuint m_fbo; // Fbo used for OpenGL functions
    // DEBUG: 	GLuint m_TexID; // Class texture used for invert copy
    // DEBUG: 	unsigned int m_TexWidth;
    // DEBUG: 	unsigned int m_TexHeight;
    // DEBUG: 	DWORD m_TexFormat;
    // DEBUG: 	GLuint m_glTexture; // OpenGL shared texture
    // DEBUG: 	ID3D11Texture2D* m_pSharedTexture; // DirectX shared texture
    // DEBUG: 	HANDLE m_dxShareHandle; // DirectX shared texture handle
    // DEBUG: 	DWORD m_dwFormat; // DirectX shared texture format
    // DEBUG: 	DXGI_FORMAT m_DX11format; // DirectX 11 texture format
    // DEBUG: 
    // DEBUG: 	// GL/DX interop
    // DEBUG: 	HANDLE m_hInteropDevice; // Handle to the DX/GL interop device
    // DEBUG: 	HANDLE m_hInteropObject; // Handle to the DX/GL interop object (the shared texture)
    // DEBUG: 	HWND m_hWnd; // OpenGL window
    // DEBUG: 	int m_SpoutVersion; // Spout version
    // DEBUG: 
    // DEBUG: 	// For CreateOpenGL and CloseOpenGL
    // DEBUG: 	HDC m_hdc = NULL;
    // DEBUG: 	HWND m_hwndButton = NULL;
    // DEBUG: 	HGLRC m_hRc = NULL;
    // DEBUG: 
    // DEBUG: 	// Status flags
    // DEBUG: 	bool m_bConnected;
    // DEBUG: 	bool m_bUpdated;
    // DEBUG: 	bool m_bInitialized;
    // DEBUG: 	bool m_bMirror;  // Mirror image (used for SpoutCam)
    // DEBUG: 	bool m_bSwapRB;  // RGB <> BGR (used for SpoutCam)
    // DEBUG: 	bool m_bGLDXdone; // Compatibility test done
    // DEBUG: 
    // DEBUG: 	// Sharing modes
    // DEBUG: 	bool m_bAuto;         // Auto share mode - user set
    // DEBUG: 	bool m_bCPU;          // Global CPU mode - user set
    // DEBUG: 	bool m_bUseGLDX;      // Hardware GL/DX interop compatibility
    // DEBUG: 	bool m_bTextureShare; // Using texture sharing methods
    // DEBUG: 	bool m_bCPUshare;     // Using CPU sharing methods
    // DEBUG: 	bool m_bMemoryShare;  // Using 2.006 memoryshare methods
    // DEBUG: 	
    // DEBUG: 	// Sender sharing modes
    // DEBUG: 	bool m_bSenderCPU;    // Sender using CPU sharing methods
    // DEBUG: 	bool m_bSenderGLDX;   // Sender hardware GL/DX compatibility
    // DEBUG: 
    // DEBUG: 	// For SpoutPanel sender selection
    // DEBUG: 	bool m_bSpoutPanelOpened;
    // DEBUG: 	bool m_bSpoutPanelActive;
    // DEBUG: 	SHELLEXECUTEINFOA m_ShExecInfo;
    // DEBUG: 
    // DEBUG: 	// OpenGL extensions
    // DEBUG: 	unsigned int m_caps;
    // DEBUG: 	bool m_bGLDXavailable;
    // DEBUG: 	bool m_bFBOavailable;
    // DEBUG: 	bool m_bBLITavailable;
    // DEBUG: 	bool m_bPBOavailable;
    // DEBUG: 	bool m_bSWAPavailable;
    // DEBUG: 	bool m_bBGRAavailable;
    // DEBUG: 	bool m_bCOPYavailable;
    // DEBUG: 	bool m_bCONTEXTavailable;
    // DEBUG: 	bool m_bExtensionsLoaded;
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutGL : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1696)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_spoutGL;
            internal global::Spout.SpoutDirectX.__Internal spoutdx;
            internal global::Spout.SpoutCopy.__Internal spoutcopy;
            internal global::Spout.SpoutSenderNames.__Internal sendernames;
            internal global::Spout.SpoutFrameCount.__Internal frame;
            internal global::Spout.SpoutSharedMemory.__Internal memoryshare;
            internal fixed uint m_pbo[4];
            internal int PboIndex;
            internal int NextPboIndex;
            internal int m_nBuffers;
            internal fixed long m_pStaging[2];
            internal int m_Index;
            internal int m_NextIndex;
            internal fixed sbyte m_SenderName[256];
            internal fixed sbyte m_SenderNameSetup[256];
            internal uint m_Width;
            internal uint m_Height;
            internal uint m_fbo;
            internal uint m_TexID;
            internal uint m_TexWidth;
            internal uint m_TexHeight;
            internal uint m_TexFormat;
            internal uint m_glTexture;
            internal __IntPtr m_pSharedTexture;
            internal __IntPtr m_dxShareHandle;
            internal uint m_dwFormat;
            internal global::DXGI_FORMAT m_DX11format;
            internal __IntPtr m_hInteropDevice;
            internal __IntPtr m_hInteropObject;
            internal __IntPtr m_hWnd;
            internal int m_SpoutVersion;
            internal __IntPtr m_hdc;
            internal __IntPtr m_hwndButton;
            internal __IntPtr m_hRc;
            internal byte m_bConnected;
            internal byte m_bUpdated;
            internal byte m_bInitialized;
            internal byte m_bMirror;
            internal byte m_bSwapRB;
            internal byte m_bGLDXdone;
            internal byte m_bAuto;
            internal byte m_bCPU;
            internal byte m_bUseGLDX;
            internal byte m_bTextureShare;
            internal byte m_bCPUshare;
            internal byte m_bMemoryShare;
            internal byte m_bSenderCPU;
            internal byte m_bSenderGLDX;
            internal byte m_bSpoutPanelOpened;
            internal byte m_bSpoutPanelActive;
            internal global::SHELLEXECUTEINFOA.__Internal m_ShExecInfo;
            internal uint m_caps;
            internal byte m_bGLDXavailable;
            internal byte m_bFBOavailable;
            internal byte m_bBLITavailable;
            internal byte m_bPBOavailable;
            internal byte m_bSWAPavailable;
            internal byte m_bBGRAavailable;
            internal byte m_bCOPYavailable;
            internal byte m_bCONTEXTavailable;
            internal byte m_bExtensionsLoaded;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutGL@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutGL@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?BindSharedTexture@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetDX9@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDX9(__IntPtr __instance, bool bDX9);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMemoryShareMode@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetMemoryShareMode(__IntPtr __instance, bool bMem);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUmode@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetCPUmode(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHostPath@spoutGL@@QEAA_NPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetHostPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* hostpath, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetVerticalSync@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetVerticalSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CopyTexture@spoutGL@@QEAA_NIIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CopyTexture(__IntPtr __instance, uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RemovePadding@spoutGL@@QEAAXPEBEPEAEIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemovePadding(__IntPtr __instance, byte* source, byte* dest, uint width, uint height, uint stride, uint glFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenSpout@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenSpout(__IntPtr __instance, bool bRetest);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenDirectX@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenDirectX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseDirectX@spoutGL@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseDirectX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateOpenGL@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseOpenGL@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CloseOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetHostPath@spoutGL@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetHostPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderID@spoutGL@@QEAA_NPEBD_N1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSenderID(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, bool bCPU, bool bGLDX);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupDirectX@spoutGL@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanupDirectX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupDX11@spoutGL@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanupDX11(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LoadGLextensions@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadGLextensions(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LinkGLDXtextures@spoutGL@@QEAAPEAXPEAX0I@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LinkGLDXtextures(__IntPtr __instance, __IntPtr pDXdevice, __IntPtr pSharedTexture, uint glTextureID);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteDX11texture@spoutGL@@QEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteDX11texture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadDX11texture@spoutGL@@QEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadDX11texture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteMemoryBuffer@spoutGL@@QEAA_NPEBD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string data, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadMemoryBuffer@spoutGL@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, sbyte* data, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateMemoryBuffer@spoutGL@@QEAA_NPEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DeleteMemoryBuffer@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteMemoryBuffer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryBufferSize@spoutGL@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMemoryBufferSize(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateInterop@spoutGL@@IEAA_NIIK_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateInterop(__IntPtr __instance, uint width, uint height, uint dwFormat, bool bReceive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LockInteropObject@spoutGL@@IEAAJPEAXPEAPEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LockInteropObject(__IntPtr __instance, __IntPtr hDevice, __IntPtr* hObject);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnlockInteropObject@spoutGL@@IEAAJPEAXPEAPEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UnlockInteropObject(__IntPtr __instance, __IntPtr hDevice, __IntPtr* hObject);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupGL@spoutGL@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanupGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckOpenGLTexture@spoutGL@@IEAAXAEAIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CheckOpenGLTexture(__IntPtr __instance, uint* texID, uint GLformat, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?InitTexture@spoutGL@@IEAAXAEAIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitTexture(__IntPtr __instance, uint* texID, uint GLformat, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteGLDXtexture@spoutGL@@IEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteGLDXtexture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadGLDXtexture@spoutGL@@IEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadGLDXtexture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSharedTextureData@spoutGL@@IEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSharedTextureData(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSharedTextureData@spoutGL@@IEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSharedTextureData(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteGLDXpixels@spoutGL@@IEAA_NPEBEIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteGLDXpixels(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadGLDXpixels@spoutGL@@IEAA_NPEAEIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadGLDXpixels(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnloadTexturePixels@spoutGL@@IEAA_NIIIIIPEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UnloadTexturePixels(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, uint pitch, byte* data, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadTextureData@spoutGL@@IEAA_NIIIIIPEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadTextureData(__IntPtr __instance, uint SourceID, uint SourceTarget, uint width, uint height, uint pitch, byte* dest, uint GLformat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteDX11pixels@spoutGL@@IEAA_NPEBEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteDX11pixels(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadDX11pixels@spoutGL@@IEAA_NPEAEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadDX11pixels(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckStagingTextures@spoutGL@@IEAA_NIIH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckStagingTextures(__IntPtr __instance, uint width, uint height, int nTextures);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadMemoryTexture@spoutGL@@IEAA_NPEBDIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadMemoryTexture(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint TexID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadMemoryPixels@spoutGL@@IEAA_NPEBDPEAEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadMemoryPixels(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteMemoryPixels@spoutGL@@IEAA_NPEBDPEBEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteMemoryPixels(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenDeviceKey@spoutGL@@IEAA_NPEBDHPEAD1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenDeviceKey(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, int maxsize, sbyte* description, sbyte* version);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?trim@spoutGL@@IEAAXPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Trim(__IntPtr __instance, sbyte* s);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?PrintFBOstatus@spoutGL@@IEAAXI@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PrintFBOstatus(__IntPtr __instance, uint status);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnBindSharedTexture@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UnBindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSharedTextureID@spoutGL@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSharedTextureID(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAutoShare@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAutoShare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAutoShare@spoutGL@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAutoShare(__IntPtr __instance, bool bAuto);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUshare@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUshare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUshare@spoutGL@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCPUshare(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsGLDXready@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGLDXready(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBufferMode@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBufferMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBufferMode@spoutGL@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBufferMode(__IntPtr __instance, bool bActive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBuffers@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetBuffers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBuffers@spoutGL@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBuffers(__IntPtr __instance, int nBuffers);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMaxSenders@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMaxSenders@spoutGL@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX9@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetDX9(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryShareMode@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMemoryShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUmode@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUmode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetShareMode@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetShareMode@spoutGL@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetShareMode(__IntPtr __instance, int mode);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetVerticalSync@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetVerticalSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutVersion@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSpoutVersion(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsSpoutInitialized@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSpoutInitialized(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLDXready@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GLDXready(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupInterop@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CleanupInterop(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsGLDXavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGLDXavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsBLITavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsBLITavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsSWAPavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSWAPavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsBGRAavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsBGRAavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsCOPYavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsCOPYavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsPBOavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPBOavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsCONTEXTavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsCONTEXTavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetInteropDevice@spoutGL@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetInteropDevice(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLerror@spoutGL@@IEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GLerror(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutGL> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutGL>();

        protected bool __ownsNativeInstance;

        internal static SpoutGL __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new SpoutGL(native.ToPointer(), skipVTables);
        }

        internal static SpoutGL __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (SpoutGL)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static SpoutGL __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (SpoutGL)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static SpoutGL __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutGL(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::Spout.SpoutGL.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private SpoutGL(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SpoutGL(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        // DEBUG: spoutGL()
        public SpoutGL()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutGL.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "Spout.SpoutGL");
        }

        // DEBUG: spoutGL
        public SpoutGL(global::Spout.SpoutGL _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutGL.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "Spout.SpoutGL");
        }

        ~SpoutGL()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (callNativeDtor)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::Spout.Delegates.Action___IntPtr_int>(0, 0);
                ___dtorDelegate(__Instance, 0);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: bool BindSharedTexture()
        public bool BindSharedTexture()
        {
            var __ret = __Internal.BindSharedTexture(__Instance);
            return __ret;
        }

        // DEBUG: bool SetDX9(bool bDX9 = true)
        public bool SetDX9(bool bDX9)
        {
            var __ret = __Internal.SetDX9(__Instance, bDX9);
            return __ret;
        }

        // DEBUG: bool SetMemoryShareMode(bool bMem = true)
        public bool SetMemoryShareMode(bool bMem)
        {
            var __ret = __Internal.SetMemoryShareMode(__Instance, bMem);
            return __ret;
        }

        // DEBUG: bool SetCPUmode(bool bCPU)
        public bool SetCPUmode(bool bCPU)
        {
            var __ret = __Internal.SetCPUmode(__Instance, bCPU);
            return __ret;
        }

        // DEBUG: bool GetHostPath(const char *sendername, char *hostpath, int maxchars)
        public bool GetHostPath(string sendername, sbyte* hostpath, int maxchars)
        {
            var __ret = __Internal.GetHostPath(__Instance, sendername, hostpath, maxchars);
            return __ret;
        }

        // DEBUG: bool SetVerticalSync(bool bSync = true)
        public bool SetVerticalSync(bool bSync)
        {
            var __ret = __Internal.SetVerticalSync(__Instance, bSync);
            return __ret;
        }

        // DEBUG: bool CopyTexture(GLuint SourceID, GLuint SourceTarget, GLuint DestID, GLuint DestTarget,
        // DEBUG: 		unsigned int width, unsigned int height, bool bInvert = false, GLuint HostFBO = 0)
        public bool CopyTexture(uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.CopyTexture(__Instance, SourceID, SourceTarget, DestID, DestTarget, width, height, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: void RemovePadding(const unsigned char *source, unsigned char *dest,
        // DEBUG: 		unsigned int width, unsigned int height, unsigned int stride, GLenum glFormat = GL_RGBA)
        public void RemovePadding(byte* source, byte* dest, uint width, uint height, uint stride, uint glFormat)
        {
            __Internal.RemovePadding(__Instance, source, dest, width, height, stride, glFormat);
        }

        // DEBUG: bool OpenSpout(bool bRetest = false)
        public bool OpenSpout(bool bRetest)
        {
            var __ret = __Internal.OpenSpout(__Instance, bRetest);
            return __ret;
        }

        // DEBUG: bool OpenDirectX()
        public bool OpenDirectX()
        {
            var __ret = __Internal.OpenDirectX(__Instance);
            return __ret;
        }

        // DEBUG: void CloseDirectX()
        public void CloseDirectX()
        {
            __Internal.CloseDirectX(__Instance);
        }

        // DEBUG: bool CreateOpenGL()
        public bool CreateOpenGL()
        {
            var __ret = __Internal.CreateOpenGL(__Instance);
            return __ret;
        }

        // DEBUG: bool CloseOpenGL()
        public bool CloseOpenGL()
        {
            var __ret = __Internal.CloseOpenGL(__Instance);
            return __ret;
        }

        // DEBUG: bool SetHostPath(const char *sendername)
        public bool SetHostPath(string sendername)
        {
            var __ret = __Internal.SetHostPath(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool SetSenderID(const char *sendername, bool bCPU, bool bGLDX)
        public bool SetSenderID(string sendername, bool bCPU, bool bGLDX)
        {
            var __ret = __Internal.SetSenderID(__Instance, sendername, bCPU, bGLDX);
            return __ret;
        }

        // DEBUG: void CleanupDirectX()
        public void CleanupDirectX()
        {
            __Internal.CleanupDirectX(__Instance);
        }

        // DEBUG: void CleanupDX11()
        public void CleanupDX11()
        {
            __Internal.CleanupDX11(__Instance);
        }

        // DEBUG: bool LoadGLextensions()
        public bool LoadGLextensions()
        {
            var __ret = __Internal.LoadGLextensions(__Instance);
            return __ret;
        }

        // DEBUG: HANDLE LinkGLDXtextures(void* pDXdevice, void* pSharedTexture, GLuint glTextureID)
        public __IntPtr LinkGLDXtextures(__IntPtr pDXdevice, __IntPtr pSharedTexture, uint glTextureID)
        {
            var __ret = __Internal.LinkGLDXtextures(__Instance, pDXdevice, pSharedTexture, glTextureID);
            return __ret;
        }

        // DEBUG: bool WriteDX11texture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO)
        public bool WriteDX11texture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.WriteDX11texture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool ReadDX11texture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO)
        public bool ReadDX11texture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.ReadDX11texture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool WriteMemoryBuffer(const char *name, const char* data, int length)
        public bool WriteMemoryBuffer(string name, string data, int length)
        {
            var __ret = __Internal.WriteMemoryBuffer(__Instance, name, data, length);
            return __ret;
        }

        // DEBUG: int ReadMemoryBuffer(const char* name, char* data, int maxlength)
        public int ReadMemoryBuffer(string name, sbyte* data, int maxlength)
        {
            var __ret = __Internal.ReadMemoryBuffer(__Instance, name, data, maxlength);
            return __ret;
        }

        // DEBUG: bool CreateMemoryBuffer(const char *name, int length)
        public bool CreateMemoryBuffer(string name, int length)
        {
            var __ret = __Internal.CreateMemoryBuffer(__Instance, name, length);
            return __ret;
        }

        // DEBUG: bool DeleteMemoryBuffer()
        public bool DeleteMemoryBuffer()
        {
            var __ret = __Internal.DeleteMemoryBuffer(__Instance);
            return __ret;
        }

        // DEBUG: int GetMemoryBufferSize(const char *name)
        public int GetMemoryBufferSize(string name)
        {
            var __ret = __Internal.GetMemoryBufferSize(__Instance, name);
            return __ret;
        }

        // DEBUG: bool CreateInterop(unsigned int width, unsigned int height, DWORD dwFormat, bool bReceive)
        protected bool CreateInterop(uint width, uint height, uint dwFormat, bool bReceive)
        {
            var __ret = __Internal.CreateInterop(__Instance, width, height, dwFormat, bReceive);
            return __ret;
        }

        // DEBUG: HRESULT LockInteropObject(HANDLE hDevice, HANDLE *hObject)
        protected int LockInteropObject(__IntPtr hDevice, __IntPtr* hObject)
        {
            var __ret = __Internal.LockInteropObject(__Instance, hDevice, hObject);
            return __ret;
        }

        // DEBUG: HRESULT UnlockInteropObject(HANDLE hDevice, HANDLE *hObject)
        protected int UnlockInteropObject(__IntPtr hDevice, __IntPtr* hObject)
        {
            var __ret = __Internal.UnlockInteropObject(__Instance, hDevice, hObject);
            return __ret;
        }

        // DEBUG: void CleanupGL()
        protected void CleanupGL()
        {
            __Internal.CleanupGL(__Instance);
        }

        // DEBUG: void CheckOpenGLTexture(GLuint &texID, GLenum GLformat, unsigned int width, unsigned int height)
        protected void CheckOpenGLTexture(ref uint texID, uint GLformat, uint width, uint height)
        {
            fixed (uint* __texID0 = &texID)
            {
                var __arg0 = __texID0;
                __Internal.CheckOpenGLTexture(__Instance, __arg0, GLformat, width, height);
            }
        }

        // DEBUG: void InitTexture(GLuint &texID, GLenum GLformat, unsigned int width, unsigned int height)
        protected void InitTexture(ref uint texID, uint GLformat, uint width, uint height)
        {
            fixed (uint* __texID0 = &texID)
            {
                var __arg0 = __texID0;
                __Internal.InitTexture(__Instance, __arg0, GLformat, width, height);
            }
        }

        // DEBUG: bool WriteGLDXtexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = true, GLuint HostFBO = 0)
        protected bool WriteGLDXtexture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.WriteGLDXtexture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool ReadGLDXtexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = false, GLuint HostFBO = 0)
        protected bool ReadGLDXtexture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.ReadGLDXtexture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool SetSharedTextureData(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO)
        protected bool SetSharedTextureData(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.SetSharedTextureData(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool GetSharedTextureData(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO)
        protected bool GetSharedTextureData(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.GetSharedTextureData(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool WriteGLDXpixels(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0)
        protected bool WriteGLDXpixels(byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.WriteGLDXpixels(__Instance, pixels, width, height, glFormat, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool ReadGLDXpixels(unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0)
        protected bool ReadGLDXpixels(byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.ReadGLDXpixels(__Instance, pixels, width, height, glFormat, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool UnloadTexturePixels(GLuint TextureID, GLuint TextureTarget,
        // DEBUG: 		unsigned int width, unsigned int height, unsigned int pitch,
        // DEBUG: 		unsigned char* data, GLenum glFormat = GL_RGBA,
        // DEBUG: 		bool bInvert = false, GLuint HostFBO = 0)
        protected bool UnloadTexturePixels(uint TextureID, uint TextureTarget, uint width, uint height, uint pitch, byte* data, uint glFormat, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.UnloadTexturePixels(__Instance, TextureID, TextureTarget, width, height, pitch, data, glFormat, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool ReadTextureData(GLuint SourceID, GLuint SourceTarget, unsigned int width, unsigned int height, unsigned int pitch, unsigned char* dest, GLenum GLformat, bool bInvert, GLuint HostFBO)
        protected bool ReadTextureData(uint SourceID, uint SourceTarget, uint width, uint height, uint pitch, byte* dest, uint GLformat, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.ReadTextureData(__Instance, SourceID, SourceTarget, width, height, pitch, dest, GLformat, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool WriteDX11pixels(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false)
        protected bool WriteDX11pixels(byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var __ret = __Internal.WriteDX11pixels(__Instance, pixels, width, height, glFormat, bInvert);
            return __ret;
        }

        // DEBUG: bool ReadDX11pixels(unsigned char * pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false)
        protected bool ReadDX11pixels(byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var __ret = __Internal.ReadDX11pixels(__Instance, pixels, width, height, glFormat, bInvert);
            return __ret;
        }

        // DEBUG: bool CheckStagingTextures(unsigned int width, unsigned int height, int nTextures)
        protected bool CheckStagingTextures(uint width, uint height, int nTextures)
        {
            var __ret = __Internal.CheckStagingTextures(__Instance, width, height, nTextures);
            return __ret;
        }

        // DEBUG: bool ReadMemoryTexture(const char* sendername, GLuint TexID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = false, GLuint HostFBO = 0)
        protected bool ReadMemoryTexture(string sendername, uint TexID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.ReadMemoryTexture(__Instance, sendername, TexID, TextureTarget, width, height, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool ReadMemoryPixels(const char* sendername, unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false)
        protected bool ReadMemoryPixels(string sendername, byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var __ret = __Internal.ReadMemoryPixels(__Instance, sendername, pixels, width, height, glFormat, bInvert);
            return __ret;
        }

        // DEBUG: bool WriteMemoryPixels(const char *sendername, const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false)
        protected bool WriteMemoryPixels(string sendername, byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var __ret = __Internal.WriteMemoryPixels(__Instance, sendername, pixels, width, height, glFormat, bInvert);
            return __ret;
        }

        // DEBUG: bool OpenDeviceKey(const char* key, int maxsize, char* description, char* version)
        protected bool OpenDeviceKey(string key, int maxsize, sbyte* description, sbyte* version)
        {
            var __ret = __Internal.OpenDeviceKey(__Instance, key, maxsize, description, version);
            return __ret;
        }

        // DEBUG: void trim(char* s)
        protected void Trim(sbyte* s)
        {
            __Internal.Trim(__Instance, s);
        }

        // DEBUG: void PrintFBOstatus(GLenum status)
        protected void PrintFBOstatus(uint status)
        {
            __Internal.PrintFBOstatus(__Instance, status);
        }

        public global::Spout.SpoutDirectX Spoutdx
        {
            get
            {
                return global::Spout.SpoutDirectX.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spoutdx));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spoutdx = *(global::Spout.SpoutDirectX.__Internal*) value.__Instance;
            }
        }

        public global::Spout.SpoutCopy Spoutcopy
        {
            get
            {
                return global::Spout.SpoutCopy.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spoutcopy));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spoutcopy = *(global::Spout.SpoutCopy.__Internal*) value.__Instance;
            }
        }

        public global::Spout.SpoutSenderNames Sendernames
        {
            get
            {
                return global::Spout.SpoutSenderNames.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->sendernames));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->sendernames = *(global::Spout.SpoutSenderNames.__Internal*) value.__Instance;
            }
        }

        public global::Spout.SpoutFrameCount Frame
        {
            get
            {
                return global::Spout.SpoutFrameCount.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->frame));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->frame = *(global::Spout.SpoutFrameCount.__Internal*) value.__Instance;
            }
        }

        protected global::Spout.SpoutSharedMemory Memoryshare
        {
            get
            {
                return global::Spout.SpoutSharedMemory.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->memoryshare));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->memoryshare = *(global::Spout.SpoutSharedMemory.__Internal*) value.__Instance;
            }
        }

        protected uint[] MPbo
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_pbo, 4);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((__Internal*)__Instance)->m_pbo[i] = value[i];
                }
            }
        }

        protected int PboIndex
        {
            get
            {
                return ((__Internal*)__Instance)->PboIndex;
            }

            set
            {
                ((__Internal*)__Instance)->PboIndex = value;
            }
        }

        protected int NextPboIndex
        {
            get
            {
                return ((__Internal*)__Instance)->NextPboIndex;
            }

            set
            {
                ((__Internal*)__Instance)->NextPboIndex = value;
            }
        }

        protected int MNBuffers
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBuffers;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBuffers = value;
            }
        }

        /*
        protected global::ID3D11Texture2D[] MPStaging
        {
            get
            {
                global::ID3D11Texture2D[] __value = null;
                if (((__Internal*)__Instance)->m_pStaging != null)
                {
                    __value = new global::ID3D11Texture2D[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = global::ID3D11Texture2D.__CreateInstance((__IntPtr) ((__Internal*)__Instance)->m_pStaging[i]);
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 2)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 2; i++)
                        ((__Internal*)__Instance)->m_pStaging[i] = (long) value[i].__Instance;
                }
            }
        }
        */

        protected int MIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_Index;
            }

            set
            {
                ((__Internal*)__Instance)->m_Index = value;
            }
        }

        protected int MNextIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_NextIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_NextIndex = value;
            }
        }

        protected sbyte[] MSenderName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderName[i] = value[i];
                }
            }
        }

        protected sbyte[] MSenderNameSetup
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderNameSetup, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderNameSetup[i] = value[i];
                }
            }
        }

        protected uint MWidth
        {
            get
            {
                return ((__Internal*)__Instance)->m_Width;
            }

            set
            {
                ((__Internal*)__Instance)->m_Width = value;
            }
        }

        protected uint MHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_Height;
            }

            set
            {
                ((__Internal*)__Instance)->m_Height = value;
            }
        }

        protected uint MFbo
        {
            get
            {
                return ((__Internal*)__Instance)->m_fbo;
            }

            set
            {
                ((__Internal*)__Instance)->m_fbo = value;
            }
        }

        protected uint MTexID
        {
            get
            {
                return ((__Internal*)__Instance)->m_TexID;
            }

            set
            {
                ((__Internal*)__Instance)->m_TexID = value;
            }
        }

        protected uint MTexWidth
        {
            get
            {
                return ((__Internal*)__Instance)->m_TexWidth;
            }

            set
            {
                ((__Internal*)__Instance)->m_TexWidth = value;
            }
        }

        protected uint MTexHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_TexHeight;
            }

            set
            {
                ((__Internal*)__Instance)->m_TexHeight = value;
            }
        }

        protected uint MTexFormat
        {
            get
            {
                return ((__Internal*)__Instance)->m_TexFormat;
            }

            set
            {
                ((__Internal*)__Instance)->m_TexFormat = value;
            }
        }

        protected uint MGlTexture
        {
            get
            {
                return ((__Internal*)__Instance)->m_glTexture;
            }

            set
            {
                ((__Internal*)__Instance)->m_glTexture = value;
            }
        }

        protected __IntPtr MDxShareHandle
        {
            get
            {
                return ((__Internal*)__Instance)->m_dxShareHandle;
            }

            set
            {
                ((__Internal*)__Instance)->m_dxShareHandle = (__IntPtr) value;
            }
        }

        protected uint MDwFormat
        {
            get
            {
                return ((__Internal*)__Instance)->m_dwFormat;
            }

            set
            {
                ((__Internal*)__Instance)->m_dwFormat = value;
            }
        }

        protected __IntPtr MHInteropDevice
        {
            get
            {
                return ((__Internal*)__Instance)->m_hInteropDevice;
            }

            set
            {
                ((__Internal*)__Instance)->m_hInteropDevice = (__IntPtr) value;
            }
        }

        protected __IntPtr MHInteropObject
        {
            get
            {
                return ((__Internal*)__Instance)->m_hInteropObject;
            }

            set
            {
                ((__Internal*)__Instance)->m_hInteropObject = (__IntPtr) value;
            }
        }

        protected int MSpoutVersion
        {
            get
            {
                return ((__Internal*)__Instance)->m_SpoutVersion;
            }

            set
            {
                ((__Internal*)__Instance)->m_SpoutVersion = value;
            }
        }

        protected bool MBConnected
        {
            get
            {
                return ((__Internal*)__Instance)->m_bConnected != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bConnected = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBUpdated
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUpdated != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUpdated = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBInitialized
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInitialized != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInitialized = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBMirror
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMirror != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMirror = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSwapRB
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSwapRB != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSwapRB = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBGLDXdone
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGLDXdone != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGLDXdone = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBAuto
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAuto != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAuto = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCPU
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCPU != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCPU = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBUseGLDX
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUseGLDX != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUseGLDX = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBTextureShare
        {
            get
            {
                return ((__Internal*)__Instance)->m_bTextureShare != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bTextureShare = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCPUshare
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCPUshare != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCPUshare = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBMemoryShare
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMemoryShare != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMemoryShare = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSenderCPU
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSenderCPU != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSenderCPU = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSenderGLDX
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSenderGLDX != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSenderGLDX = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSpoutPanelOpened
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpoutPanelOpened != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpoutPanelOpened = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSpoutPanelActive
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpoutPanelActive != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpoutPanelActive = (byte) (value ? 1 : 0);
            }
        }

        protected uint MCaps
        {
            get
            {
                return ((__Internal*)__Instance)->m_caps;
            }

            set
            {
                ((__Internal*)__Instance)->m_caps = value;
            }
        }

        protected bool MBGLDXavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGLDXavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGLDXavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBFBOavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFBOavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFBOavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBBLITavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bBLITavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bBLITavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBPBOavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPBOavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPBOavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSWAPavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSWAPavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSWAPavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBBGRAavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bBGRAavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bBGRAavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCOPYavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCOPYavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCOPYavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCONTEXTavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCONTEXTavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCONTEXTavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBExtensionsLoaded
        {
            get
            {
                return ((__Internal*)__Instance)->m_bExtensionsLoaded != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bExtensionsLoaded = (byte) (value ? 1 : 0);
            }
        }

        public bool UnBindSharedTexture
        {
            get
            {
                var __ret = __Internal.UnBindSharedTexture(__Instance);
                return __ret;
            }
        }

        public uint SharedTextureID
        {
            get
            {
                var __ret = __Internal.GetSharedTextureID(__Instance);
                return __ret;
            }
        }

        public bool AutoShare
        {
            get
            {
                var __ret = __Internal.GetAutoShare(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetAutoShare(__Instance, value);
            }
        }

        public bool CPUshare
        {
            get
            {
                var __ret = __Internal.GetCPUshare(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetCPUshare(__Instance, value);
            }
        }

        public bool IsGLDXready
        {
            get
            {
                var __ret = __Internal.IsGLDXready(__Instance);
                return __ret;
            }
        }

        public bool BufferMode
        {
            get
            {
                var __ret = __Internal.GetBufferMode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetBufferMode(__Instance, value);
            }
        }

        public int Buffers
        {
            get
            {
                var __ret = __Internal.GetBuffers(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetBuffers(__Instance, value);
            }
        }

        public int MaxSenders
        {
            get
            {
                var __ret = __Internal.GetMaxSenders(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }

        public bool DX9
        {
            get
            {
                var __ret = __Internal.GetDX9(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetDX9(__Instance, value);
            }
        }

        public bool MemoryShareMode
        {
            get
            {
                var __ret = __Internal.GetMemoryShareMode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetMemoryShareMode(__Instance, value);
            }
        }

        public bool CPUmode
        {
            get
            {
                var __ret = __Internal.GetCPUmode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetCPUmode(__Instance, value);
            }
        }

        public int ShareMode
        {
            get
            {
                var __ret = __Internal.GetShareMode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetShareMode(__Instance, value);
            }
        }

        public int VerticalSync
        {
            get
            {
                var __ret = __Internal.GetVerticalSync(__Instance);
                return __ret;
            }
        }

        public int SpoutVersion
        {
            get
            {
                var __ret = __Internal.GetSpoutVersion(__Instance);
                return __ret;
            }
        }

        public bool IsSpoutInitialized
        {
            get
            {
                var __ret = __Internal.IsSpoutInitialized(__Instance);
                return __ret;
            }
        }

        public bool GLDXready
        {
            get
            {
                var __ret = __Internal.GLDXready(__Instance);
                return __ret;
            }
        }

        public bool CleanupInterop
        {
            get
            {
                var __ret = __Internal.CleanupInterop(__Instance);
                return __ret;
            }
        }

        public bool IsGLDXavailable
        {
            get
            {
                var __ret = __Internal.IsGLDXavailable(__Instance);
                return __ret;
            }
        }

        public bool IsBLITavailable
        {
            get
            {
                var __ret = __Internal.IsBLITavailable(__Instance);
                return __ret;
            }
        }

        public bool IsSWAPavailable
        {
            get
            {
                var __ret = __Internal.IsSWAPavailable(__Instance);
                return __ret;
            }
        }

        public bool IsBGRAavailable
        {
            get
            {
                var __ret = __Internal.IsBGRAavailable(__Instance);
                return __ret;
            }
        }

        public bool IsCOPYavailable
        {
            get
            {
                var __ret = __Internal.IsCOPYavailable(__Instance);
                return __ret;
            }
        }

        public bool IsPBOavailable
        {
            get
            {
                var __ret = __Internal.IsPBOavailable(__Instance);
                return __ret;
            }
        }

        public bool IsCONTEXTavailable
        {
            get
            {
                var __ret = __Internal.IsCONTEXTavailable(__Instance);
                return __ret;
            }
        }

        public __IntPtr InteropDevice
        {
            get
            {
                var __ret = __Internal.GetInteropDevice(__Instance);
                return __ret;
            }
        }

        protected bool GLerror
        {
            get
            {
                var __ret = __Internal.GLerror(__Instance);
                return __ret;
            }
        }

        #region Virtual table interop

        // virtual ~spoutGL()
        private static global::Spout.Delegates.Action___IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance, int delete)
        {
            var __target = global::Spout.SpoutGL.__GetInstance(__instance);
            __target.Dispose(disposing: true, callNativeDtor: true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1);
                            ManagedVTablesDtorOnly[0][0] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1);
                            ManagedVTables[0][0] = Thunks[0];
                            VTables.Methods[0] = new Delegate[1];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: class SPOUT_DLLEXP SpoutReceiver {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 	SpoutReceiver();
    // DEBUG:     ~SpoutReceiver();
    // DEBUG: 
    // DEBUG: 	// Specify sender for connection
    // DEBUG: 	//   The application will not connect to any other  unless the user selects one
    // DEBUG: 	//   If that sender closes, the application will wait for the nominated sender to open 
    // DEBUG: 	//   If no name is specified, the receiver will connect to the active sender
    // DEBUG: 	void SetReceiverName(const char * sendername = nullptr);
    // DEBUG: 	// Close receiver and release resources ready to connect to another sender
    // DEBUG: 	void ReleaseReceiver();
    // DEBUG: 	// Receive shared texture
    // DEBUG: 	//   Connect to a sender and retrieve texture details ready for access
    // DEBUG: 	//	 (see BindSharedTexture and UnBindSharedTexture)
    // DEBUG: 	bool ReceiveTexture();
    // DEBUG: 	// Receive OpenGL texture
    // DEBUG: 	// 	 Connect to a sender and inform the application to update
    // DEBUG: 	//   the receiving texture if it has changed dimensions
    // DEBUG: 	//   For no change, copy the sender shared texture to the application texture
    // DEBUG: 	bool ReceiveTexture(GLuint TextureID, GLuint TextureTarget, bool bInvert = false, GLuint HostFbo = 0);
    // DEBUG: 	// Receive image pixels
    // DEBUG: 	//   Connect to a sender and inform the application to update
    // DEBUG: 	//   the receiving buffer if it has changed dimensions
    // DEBUG: 	//   For no change, copy the sender shared texture to the pixel buffer
    // DEBUG: 	bool ReceiveImage(unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFbo = 0);
    // DEBUG: 	// Query whether the sender has changed
    // DEBUG: 	//   Checked at every cycle before receiving data
    // DEBUG: 	bool IsUpdated();
    // DEBUG: 	// Query sender connection
    // DEBUG: 	//   If the sender closes, receiving functions return false,  
    // DEBUG: 	bool IsConnected();
    // DEBUG: 	// Query received frame status
    // DEBUG: 	//   The receiving texture or pixel buffer is only refreshed if the sender has produced a new frame  
    // DEBUG: 	//   This can be queried to process texture data only for new frames
    // DEBUG: 	bool IsFrameNew();
    // DEBUG: 	// Received sender name
    // DEBUG: 	const char * GetSenderName();
    // DEBUG: 	// Received sender width
    // DEBUG: 	unsigned int GetSenderWidth();
    // DEBUG: 	// Received sender height
    // DEBUG: 	unsigned int GetSenderHeight();
    // DEBUG: 	// Received sender DX11 texture format
    // DEBUG: 	DWORD GetSenderFormat();
    // DEBUG: 	// Received sender frame rate
    // DEBUG: 	double GetSenderFps();
    // DEBUG: 	// Received sender frame number
    // DEBUG: 	long GetSenderFrame();
    // DEBUG: 	// Received sender share handle
    // DEBUG: 	HANDLE GetSenderHandle();
    // DEBUG: 	// Received sender sharing method
    // DEBUG: 	bool GetSenderCPU();
    // DEBUG: 	// Received sender GL/DX hardware compatibility
    // DEBUG: 	bool GetSenderGLDX();
    // DEBUG: 	// Open sender selection dialog
    // DEBUG: 	void SelectSender();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Frame count
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Enable or disable frame counting globally
    // DEBUG: 	void SetFrameCount(bool bEnable);
    // DEBUG: 	// Disable frame counting specifically for this application
    // DEBUG: 	void DisableFrameCount();
    // DEBUG: 	// Return frame count status
    // DEBUG: 	bool IsFrameCountEnabled();
    // DEBUG: 	// Frame rate control
    // DEBUG: 	void HoldFps(int fps);
    // DEBUG: 	// Signal sync event 
    // DEBUG: 	void SetFrameSync(const char* SenderName);
    // DEBUG: 	// Wait or test for a sync event
    // DEBUG: 	bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Data sharing
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Read data
    // DEBUG: 	int ReadMemoryBuffer(const char* name, char* data, int maxlength);
    // DEBUG: 	// Get the size of a shared memory buffer
    // DEBUG: 	int GetMemoryBufferSize(const char* name);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// OpenGL shared texture access
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Bind OpenGL shared texture
    // DEBUG: 	bool BindSharedTexture();
    // DEBUG: 	// Un-bind OpenGL shared texture
    // DEBUG: 	bool UnBindSharedTexture();
    // DEBUG: 	// OpenGL shared texture ID
    // DEBUG: 	GLuint GetSharedTextureID();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Graphics compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user auto GPU/CPU share
    // DEBUG: 	bool GetAutoShare();
    // DEBUG: 	// Set application auto GPU/CPU share
    // DEBUG: 	void SetAutoShare(bool bAuto = true);
    // DEBUG: 	// Get user CPU share
    // DEBUG: 	bool GetCPUshare();
    // DEBUG: 	// Set application CPU share
    // DEBUG: 	// (re-test GL/DX compatibility if set to false)
    // DEBUG: 	void SetCPUshare(bool bCPU = true);
    // DEBUG: 	// OpenGL texture share compatibility
    // DEBUG: 	bool IsGLDXready();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Sender names
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Number of senders
    // DEBUG: 	int GetSenderCount();
    // DEBUG: 	// Sender item name
    // DEBUG: 	bool GetSender(int index, char* sendername, int MaxSize = 256);
    // DEBUG: 	// Sender information
    // DEBUG: 	bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat);
    // DEBUG: 	// Current active sender
    // DEBUG: 	bool GetActiveSender(char* sendername);
    // DEBUG: 	// Set sender as active
    // DEBUG: 	bool SetActiveSender(const char* sendername);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Adapter functions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// The number of graphics adapters in the system
    // DEBUG: 	int GetNumAdapters();
    // DEBUG: 	// Get adapter item name
    // DEBUG: 	bool GetAdapterName(int index, char *adaptername, int maxchars = 256);
    // DEBUG: 	// Current adapter name
    // DEBUG: 	char * AdapterName();
    // DEBUG: 	// Get current adapter index
    // DEBUG: 	int GetAdapter();
    // DEBUG: 	// Set graphics adapter for output
    // DEBUG: 	bool SetAdapter(int index = 0);
    // DEBUG: 	// Get the current adapter description
    // DEBUG: 	bool GetAdapterInfo(char *renderdescription, char *displaydescription, int maxchars);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// User settings recorded by "SpoutSettings"
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user buffering mode
    // DEBUG: 	bool GetBufferMode();
    // DEBUG: 	// Set application buffering mode
    // DEBUG: 	void SetBufferMode(bool bActive = true);
    // DEBUG: 	// Get user number of pixel buffers
    // DEBUG: 	int GetBuffers();
    // DEBUG: 	// Set application number of pixel buffers
    // DEBUG: 	void SetBuffers(int nBuffers);
    // DEBUG: 	// Get user Maximum senders allowed
    // DEBUG: 	int GetMaxSenders();
    // DEBUG: 	// Set user Maximum senders allowed
    // DEBUG: 	void SetMaxSenders(int maxSenders);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user DX9 mode
    // DEBUG: 	bool GetDX9();
    // DEBUG: 	// Set user DX9 mode
    // DEBUG: 	bool SetDX9(bool bDX9 = true);
    // DEBUG: 	// Get user memory share mode
    // DEBUG: 	bool GetMemoryShareMode();
    // DEBUG: 	// Set user memory share mode
    // DEBUG: 	bool SetMemoryShareMode(bool bMem = true);
    // DEBUG: 	// Get user CPU mode
    // DEBUG: 	bool GetCPUmode();
    // DEBUG: 	// Set user CPU mode
    // DEBUG: 	bool SetCPUmode(bool bCPU);
    // DEBUG: 	// Get user share mode
    // DEBUG: 	//  0 - texture, 1 - memory, 2 - CPU
    // DEBUG: 	int GetShareMode();
    // DEBUG: 	// Set user share mode
    // DEBUG: 	//  0 - texture, 1 - memory, 2 - CPU
    // DEBUG: 	void SetShareMode(int mode);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Information
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// The path of the host that produced the sender
    // DEBUG: 	bool GetHostPath(const char *sendername, char *hostpath, int maxchars);
    // DEBUG: 	// Vertical sync status
    // DEBUG: 	int GetVerticalSync();
    // DEBUG: 	// Lock to monitor vertical sync
    // DEBUG: 	bool SetVerticalSync(bool bSync = true);
    // DEBUG: 	// Get Spout version
    // DEBUG: 	int GetSpoutVersion();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// OpenGL utilities
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Create an OpenGL window and context for situations where there is none.
    // DEBUG: 	//   Not used if applications already have an OpenGL context.
    // DEBUG: 	//   Always call CloseOpenGL afterwards.
    // DEBUG: 	bool CreateOpenGL();
    // DEBUG: 	// Close OpenGL window
    // DEBUG: 	bool CloseOpenGL();
    // DEBUG: 	// Copy OpenGL texture with optional invert
    // DEBUG: 	//   Textures must be the same size
    // DEBUG: 	bool CopyTexture(GLuint SourceID, GLuint SourceTarget,
    // DEBUG: 		GLuint DestID, GLuint DestTarget,
    // DEBUG: 		unsigned int width, unsigned int height,
    // DEBUG: 		bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 
    // DEBUG: 	
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Create receiver connection
    // DEBUG: 	bool CreateReceiver(char* Sendername, unsigned int &width, unsigned int &height, bool bUseActive = false);
    // DEBUG: 	// Check receiver connection
    // DEBUG: 	bool CheckReceiver(char* Sendername, unsigned int &width, unsigned int &height, bool &bConnected);
    // DEBUG: 	// Receive OpenGL texture
    // DEBUG: 	bool ReceiveTexture(char* Sendername, unsigned int &width, unsigned int &height, GLuint TextureID = 0, GLuint TextureTarget = 0, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Receive image pixels
    // DEBUG: 	bool ReceiveImage(char* Sendername, unsigned int &width, unsigned int &height, unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Open dialog for the user to select a sender
    // DEBUG: 	//   Optional message argument
    // DEBUG: 	bool SelectSenderPanel(const char* message = nullptr);
    // DEBUG: 	// Receiver detect sender selection
    // DEBUG: 	bool CheckSenderPanel(char *sendername, int maxchars = 256);
    // DEBUG: 
    // DEBUG: 
    // DEBUG: 	// Legacy OpenGL Draw function
    // DEBUG: 	// See _SpoutCommon.h_ #define legacyOpenGL
    // DEBUG: #ifdef legacyOpenGL
    // DEBUG: 	// Render the shared texture
    // DEBUG: 	bool DrawSharedTexture(float max_x = 1.0, float max_y = 1.0, float aspect = 1.0, bool bInvert = true, GLuint HostFBO = 0);
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: 	// For access to all functions
    // DEBUG: 	Spout spout;
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutReceiver : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1960)]
        public partial struct __Internal
        {
            internal global::Spout.Spout.__Internal spout;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutReceiver@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutReceiver@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1SpoutReceiver@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetReceiverName@SpoutReceiver@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetReceiverName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseReceiver@SpoutReceiver@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseReceiver(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@SpoutReceiver@@QEAA_NII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, uint TextureID, uint TextureTarget, bool bInvert, uint HostFbo);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveImage@SpoutReceiver@@QEAA_NPEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, byte* pixels, uint glFormat, bool bInvert, uint HostFbo);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SelectSender@SpoutReceiver@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SelectSender(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameCount@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameCount(__IntPtr __instance, bool bEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableFrameCount@SpoutReceiver@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?HoldFps@SpoutReceiver@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameSync@SpoutReceiver@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitFrameSync@SpoutReceiver@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadMemoryBuffer@SpoutReceiver@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, sbyte* data, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryBufferSize@SpoutReceiver@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMemoryBufferSize(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?BindSharedTexture@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSender@SpoutReceiver@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderInfo@SpoutReceiver@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSender@SpoutReceiver@@QEAA_NPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetActiveSender@SpoutReceiver@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterName@SpoutReceiver@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAdapter@SpoutReceiver@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetAdapter(__IntPtr __instance, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@SpoutReceiver@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* renderdescription, sbyte* displaydescription, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetDX9@SpoutReceiver@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDX9(__IntPtr __instance, bool bDX9);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMemoryShareMode@SpoutReceiver@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetMemoryShareMode(__IntPtr __instance, bool bMem);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUmode@SpoutReceiver@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetCPUmode(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHostPath@SpoutReceiver@@QEAA_NPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetHostPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* hostpath, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetVerticalSync@SpoutReceiver@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetVerticalSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateOpenGL@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseOpenGL@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CloseOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CopyTexture@SpoutReceiver@@QEAA_NIIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CopyTexture(__IntPtr __instance, uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateReceiver@SpoutReceiver@@QEAA_NPEADAEAI1_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateReceiver(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, bool bUseActive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckReceiver@SpoutReceiver@@QEAA_NPEADAEAI1AEA_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckReceiver(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, bool* bConnected);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@SpoutReceiver@@QEAA_NPEADAEAI1II_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, uint TextureID, uint TextureTarget, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveImage@SpoutReceiver@@QEAA_NPEADAEAI1PEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, byte* pixels, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SelectSenderPanel@SpoutReceiver@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SelectSenderPanel(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSenderPanel@SpoutReceiver@@QEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSenderPanel(__IntPtr __instance, sbyte* sendername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsUpdated@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsUpdated(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsConnected@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsConnected(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameNew@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameNew(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderName@SpoutReceiver@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderWidth@SpoutReceiver@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderHeight@SpoutReceiver@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFormat@SpoutReceiver@@QEAAKXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderFormat(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFps@SpoutReceiver@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetSenderFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFrame@SpoutReceiver@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderHandle@SpoutReceiver@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCPU@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderCPU(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderGLDX@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderGLDX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameCountEnabled@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnBindSharedTexture@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UnBindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSharedTextureID@SpoutReceiver@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSharedTextureID(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAutoShare@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAutoShare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAutoShare@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAutoShare(__IntPtr __instance, bool bAuto);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUshare@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUshare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUshare@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCPUshare(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsGLDXready@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGLDXready(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCount@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNumAdapters@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AdapterName@SpoutReceiver@@QEAAPEADXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* AdapterName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapter@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBufferMode@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBufferMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBufferMode@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBufferMode(__IntPtr __instance, bool bActive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBuffers@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetBuffers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBuffers@SpoutReceiver@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBuffers(__IntPtr __instance, int nBuffers);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMaxSenders@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMaxSenders@SpoutReceiver@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX9@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetDX9(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryShareMode@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMemoryShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUmode@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUmode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetShareMode@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetShareMode@SpoutReceiver@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetShareMode(__IntPtr __instance, int mode);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetVerticalSync@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetVerticalSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutVersion@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSpoutVersion(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutReceiver> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutReceiver>();

        protected bool __ownsNativeInstance;

        internal static SpoutReceiver __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new SpoutReceiver(native.ToPointer(), skipVTables);
        }

        internal static SpoutReceiver __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (SpoutReceiver)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static SpoutReceiver __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutReceiver(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::Spout.SpoutReceiver.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private SpoutReceiver(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SpoutReceiver(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: SpoutReceiver()
        public SpoutReceiver()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutReceiver.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        // DEBUG: SpoutReceiver
        public SpoutReceiver(global::Spout.SpoutReceiver _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutReceiver.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        ~SpoutReceiver()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: void SetReceiverName(const char * sendername = nullptr)
        public void SetReceiverName(string sendername)
        {
            __Internal.SetReceiverName(__Instance, sendername);
        }

        // DEBUG: void ReleaseReceiver()
        public void ReleaseReceiver()
        {
            __Internal.ReleaseReceiver(__Instance);
        }

        // DEBUG: bool ReceiveTexture()
        public bool ReceiveTexture()
        {
            var __ret = __Internal.ReceiveTexture(__Instance);
            return __ret;
        }

        // DEBUG: bool ReceiveTexture(GLuint TextureID, GLuint TextureTarget, bool bInvert = false, GLuint HostFbo = 0)
        public bool ReceiveTexture(uint TextureID, uint TextureTarget, bool bInvert, uint HostFbo)
        {
            var __ret = __Internal.ReceiveTexture(__Instance, TextureID, TextureTarget, bInvert, HostFbo);
            return __ret;
        }

        // DEBUG: bool ReceiveImage(unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFbo = 0)
        public bool ReceiveImage(byte* pixels, uint glFormat, bool bInvert, uint HostFbo)
        {
            var __ret = __Internal.ReceiveImage(__Instance, pixels, glFormat, bInvert, HostFbo);
            return __ret;
        }

        // DEBUG: void SelectSender()
        public void SelectSender()
        {
            __Internal.SelectSender(__Instance);
        }

        // DEBUG: void SetFrameCount(bool bEnable)
        public void SetFrameCount(bool bEnable)
        {
            __Internal.SetFrameCount(__Instance, bEnable);
        }

        // DEBUG: void DisableFrameCount()
        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        // DEBUG: void HoldFps(int fps)
        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        // DEBUG: void SetFrameSync(const char* SenderName)
        public void SetFrameSync(string SenderName)
        {
            __Internal.SetFrameSync(__Instance, SenderName);
        }

        // DEBUG: bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0)
        public bool WaitFrameSync(string SenderName, uint dwTimeout)
        {
            var __ret = __Internal.WaitFrameSync(__Instance, SenderName, dwTimeout);
            return __ret;
        }

        // DEBUG: int ReadMemoryBuffer(const char* name, char* data, int maxlength)
        public int ReadMemoryBuffer(string name, sbyte* data, int maxlength)
        {
            var __ret = __Internal.ReadMemoryBuffer(__Instance, name, data, maxlength);
            return __ret;
        }

        // DEBUG: int GetMemoryBufferSize(const char* name)
        public int GetMemoryBufferSize(string name)
        {
            var __ret = __Internal.GetMemoryBufferSize(__Instance, name);
            return __ret;
        }

        // DEBUG: bool BindSharedTexture()
        public bool BindSharedTexture()
        {
            var __ret = __Internal.BindSharedTexture(__Instance);
            return __ret;
        }

        // DEBUG: bool GetSender(int index, char* sendername, int MaxSize = 256)
        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var __ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return __ret;
        }

        // DEBUG: bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat)
        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var __ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return __ret;
                    }
                }
            }
        }

        // DEBUG: bool GetActiveSender(char* sendername)
        public bool GetActiveSender(sbyte* sendername)
        {
            var __ret = __Internal.GetActiveSender(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool SetActiveSender(const char* sendername)
        public bool SetActiveSender(string sendername)
        {
            var __ret = __Internal.SetActiveSender(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool GetAdapterName(int index, char *adaptername, int maxchars = 256)
        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var __ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return __ret;
        }

        // DEBUG: bool SetAdapter(int index = 0)
        public bool SetAdapter(int index)
        {
            var __ret = __Internal.SetAdapter(__Instance, index);
            return __ret;
        }

        // DEBUG: bool GetAdapterInfo(char *renderdescription, char *displaydescription, int maxchars)
        public bool GetAdapterInfo(sbyte* renderdescription, sbyte* displaydescription, int maxchars)
        {
            var __ret = __Internal.GetAdapterInfo(__Instance, renderdescription, displaydescription, maxchars);
            return __ret;
        }

        // DEBUG: bool SetDX9(bool bDX9 = true)
        public bool SetDX9(bool bDX9)
        {
            var __ret = __Internal.SetDX9(__Instance, bDX9);
            return __ret;
        }

        // DEBUG: bool SetMemoryShareMode(bool bMem = true)
        public bool SetMemoryShareMode(bool bMem)
        {
            var __ret = __Internal.SetMemoryShareMode(__Instance, bMem);
            return __ret;
        }

        // DEBUG: bool SetCPUmode(bool bCPU)
        public bool SetCPUmode(bool bCPU)
        {
            var __ret = __Internal.SetCPUmode(__Instance, bCPU);
            return __ret;
        }

        // DEBUG: bool GetHostPath(const char *sendername, char *hostpath, int maxchars)
        public bool GetHostPath(string sendername, sbyte* hostpath, int maxchars)
        {
            var __ret = __Internal.GetHostPath(__Instance, sendername, hostpath, maxchars);
            return __ret;
        }

        // DEBUG: bool SetVerticalSync(bool bSync = true)
        public bool SetVerticalSync(bool bSync)
        {
            var __ret = __Internal.SetVerticalSync(__Instance, bSync);
            return __ret;
        }

        // DEBUG: bool CreateOpenGL()
        public bool CreateOpenGL()
        {
            var __ret = __Internal.CreateOpenGL(__Instance);
            return __ret;
        }

        // DEBUG: bool CloseOpenGL()
        public bool CloseOpenGL()
        {
            var __ret = __Internal.CloseOpenGL(__Instance);
            return __ret;
        }

        // DEBUG: bool CopyTexture(GLuint SourceID, GLuint SourceTarget,
        // DEBUG: 		GLuint DestID, GLuint DestTarget,
        // DEBUG: 		unsigned int width, unsigned int height,
        // DEBUG: 		bool bInvert = false, GLuint HostFBO = 0)
        public bool CopyTexture(uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.CopyTexture(__Instance, SourceID, SourceTarget, DestID, DestTarget, width, height, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool CreateReceiver(char* Sendername, unsigned int &width, unsigned int &height, bool bUseActive = false)
        public bool CreateReceiver(sbyte* Sendername, ref uint width, ref uint height, bool bUseActive)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var __ret = __Internal.CreateReceiver(__Instance, Sendername, __arg1, __arg2, bUseActive);
                    return __ret;
                }
            }
        }

        // DEBUG: bool CheckReceiver(char* Sendername, unsigned int &width, unsigned int &height, bool &bConnected)
        public bool CheckReceiver(sbyte* Sendername, ref uint width, ref uint height, ref bool bConnected)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (bool* __bConnected3 = &bConnected)
                    {
                        var __arg3 = __bConnected3;
                        var __ret = __Internal.CheckReceiver(__Instance, Sendername, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        // DEBUG: bool ReceiveTexture(char* Sendername, unsigned int &width, unsigned int &height, GLuint TextureID = 0, GLuint TextureTarget = 0, bool bInvert = false, GLuint HostFBO = 0)
        public bool ReceiveTexture(sbyte* Sendername, ref uint width, ref uint height, uint TextureID, uint TextureTarget, bool bInvert, uint HostFBO)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var __ret = __Internal.ReceiveTexture(__Instance, Sendername, __arg1, __arg2, TextureID, TextureTarget, bInvert, HostFBO);
                    return __ret;
                }
            }
        }

        // DEBUG: bool ReceiveImage(char* Sendername, unsigned int &width, unsigned int &height, unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0)
        public bool ReceiveImage(sbyte* Sendername, ref uint width, ref uint height, byte* pixels, uint glFormat, bool bInvert, uint HostFBO)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var __ret = __Internal.ReceiveImage(__Instance, Sendername, __arg1, __arg2, pixels, glFormat, bInvert, HostFBO);
                    return __ret;
                }
            }
        }

        // DEBUG: bool SelectSenderPanel(const char* message = nullptr)
        public bool SelectSenderPanel(string message)
        {
            var __ret = __Internal.SelectSenderPanel(__Instance, message);
            return __ret;
        }

        // DEBUG: bool CheckSenderPanel(char *sendername, int maxchars = 256)
        public bool CheckSenderPanel(sbyte* sendername, int maxchars)
        {
            var __ret = __Internal.CheckSenderPanel(__Instance, sendername, maxchars);
            return __ret;
        }

        public global::Spout.Spout Spout
        {
            get
            {
                return global::Spout.Spout.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spout));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spout = *(global::Spout.Spout.__Internal*) value.__Instance;
            }
        }

        public bool IsUpdated
        {
            get
            {
                var __ret = __Internal.IsUpdated(__Instance);
                return __ret;
            }
        }

        public bool IsConnected
        {
            get
            {
                var __ret = __Internal.IsConnected(__Instance);
                return __ret;
            }
        }

        public bool IsFrameNew
        {
            get
            {
                var __ret = __Internal.IsFrameNew(__Instance);
                return __ret;
            }
        }

        public string SenderName
        {
            get
            {
                var __ret = __Internal.GetSenderName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
            }
        }

        public uint SenderWidth
        {
            get
            {
                var __ret = __Internal.GetSenderWidth(__Instance);
                return __ret;
            }
        }

        public uint SenderHeight
        {
            get
            {
                var __ret = __Internal.GetSenderHeight(__Instance);
                return __ret;
            }
        }

        public uint SenderFormat
        {
            get
            {
                var __ret = __Internal.GetSenderFormat(__Instance);
                return __ret;
            }
        }

        public double SenderFps
        {
            get
            {
                var __ret = __Internal.GetSenderFps(__Instance);
                return __ret;
            }
        }

        public int SenderFrame
        {
            get
            {
                var __ret = __Internal.GetSenderFrame(__Instance);
                return __ret;
            }
        }

        public __IntPtr SenderHandle
        {
            get
            {
                var __ret = __Internal.GetSenderHandle(__Instance);
                return __ret;
            }
        }

        public bool SenderCPU
        {
            get
            {
                var __ret = __Internal.GetSenderCPU(__Instance);
                return __ret;
            }
        }

        public bool SenderGLDX
        {
            get
            {
                var __ret = __Internal.GetSenderGLDX(__Instance);
                return __ret;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var __ret = __Internal.IsFrameCountEnabled(__Instance);
                return __ret;
            }
        }

        public bool UnBindSharedTexture
        {
            get
            {
                var __ret = __Internal.UnBindSharedTexture(__Instance);
                return __ret;
            }
        }

        public uint SharedTextureID
        {
            get
            {
                var __ret = __Internal.GetSharedTextureID(__Instance);
                return __ret;
            }
        }

        public bool AutoShare
        {
            get
            {
                var __ret = __Internal.GetAutoShare(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetAutoShare(__Instance, value);
            }
        }

        public bool CPUshare
        {
            get
            {
                var __ret = __Internal.GetCPUshare(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetCPUshare(__Instance, value);
            }
        }

        public bool IsGLDXready
        {
            get
            {
                var __ret = __Internal.IsGLDXready(__Instance);
                return __ret;
            }
        }

        public int SenderCount
        {
            get
            {
                var __ret = __Internal.GetSenderCount(__Instance);
                return __ret;
            }
        }

        public int NumAdapters
        {
            get
            {
                var __ret = __Internal.GetNumAdapters(__Instance);
                return __ret;
            }
        }

        public sbyte* AdapterName
        {
            get
            {
                var __ret = __Internal.AdapterName(__Instance);
                return __ret;
            }
        }

        public int Adapter
        {
            get
            {
                var __ret = __Internal.GetAdapter(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetAdapter(__Instance, value);
            }
        }

        public bool BufferMode
        {
            get
            {
                var __ret = __Internal.GetBufferMode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetBufferMode(__Instance, value);
            }
        }

        public int Buffers
        {
            get
            {
                var __ret = __Internal.GetBuffers(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetBuffers(__Instance, value);
            }
        }

        public int MaxSenders
        {
            get
            {
                var __ret = __Internal.GetMaxSenders(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }

        public bool DX9
        {
            get
            {
                var __ret = __Internal.GetDX9(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetDX9(__Instance, value);
            }
        }

        public bool MemoryShareMode
        {
            get
            {
                var __ret = __Internal.GetMemoryShareMode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetMemoryShareMode(__Instance, value);
            }
        }

        public bool CPUmode
        {
            get
            {
                var __ret = __Internal.GetCPUmode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetCPUmode(__Instance, value);
            }
        }

        public int ShareMode
        {
            get
            {
                var __ret = __Internal.GetShareMode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetShareMode(__Instance, value);
            }
        }

        public int VerticalSync
        {
            get
            {
                var __ret = __Internal.GetVerticalSync(__Instance);
                return __ret;
            }
        }

        public int SpoutVersion
        {
            get
            {
                var __ret = __Internal.GetSpoutVersion(__Instance);
                return __ret;
            }
        }
    }

    // DEBUG: class SPOUT_DLLEXP SpoutSender {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 	SpoutSender();
    // DEBUG:     ~SpoutSender();
    // DEBUG: 
    // DEBUG: 	// Set name for sender creation
    // DEBUG: 	//   If no name is specified, the executable name is used.  
    // DEBUG: 	void SetSenderName(const char* sendername = nullptr);
    // DEBUG: 	// Set the sender DX11 shared texture format
    // DEBUG: 	void SetSenderFormat(DWORD dwFormat);
    // DEBUG: 	// Close sender and free resources
    // DEBUG: 	//   A sender is created or updated by all sending functions
    // DEBUG: 	void ReleaseSender();
    // DEBUG: 	// Send a framebuffer.
    // DEBUG: 	//   The fbo must be currently bound.  
    // DEBUG: 	//   The fbo can be larger than the size that the sender is set up for.  
    // DEBUG: 	//   For example, if the application is using only a portion of the allocated texture space,  
    // DEBUG: 	//   such as for Freeframe plugins. (The 2.006 equivalent is DrawToSharedTexture).
    // DEBUG: 	bool SendFbo(GLuint FboID, unsigned int width, unsigned int height, bool bInvert = true);
    // DEBUG: 	// Send OpenGL texture
    // DEBUG: 	bool SendTexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = true, GLuint HostFBO = 0);
    // DEBUG: 	// Send image pixels
    // DEBUG: 	bool SendImage(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Sender status
    // DEBUG: 	bool IsInitialized();
    // DEBUG: 	// Sender name
    // DEBUG: 	const char * GetName();
    // DEBUG: 	// Sender width
    // DEBUG: 	unsigned int GetWidth();
    // DEBUG: 	// Sender height
    // DEBUG: 	unsigned int GetHeight();
    // DEBUG: 	// Sender frame rate
    // DEBUG: 	double GetFps();
    // DEBUG: 	// Sender frame number
    // DEBUG: 	long GetFrame();
    // DEBUG: 	// Sender share handle
    // DEBUG: 	HANDLE GetHandle();
    // DEBUG: 	// Sender sharing method
    // DEBUG: 	bool GetCPU();
    // DEBUG: 	// Sender GL/DX hardware compatibility
    // DEBUG: 	bool GetGLDX();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Frame count
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Enable or disable frame counting globally
    // DEBUG: 	void SetFrameCount(bool bEnable);
    // DEBUG: 	// Disable frame counting specifically for this application
    // DEBUG: 	void DisableFrameCount();
    // DEBUG: 	// Return frame count status
    // DEBUG: 	bool IsFrameCountEnabled();
    // DEBUG: 	// Frame rate control
    // DEBUG: 	void HoldFps(int fps);
    // DEBUG: 	// Signal sync event 
    // DEBUG: 	void SetFrameSync(const char* SenderName);
    // DEBUG: 	// Wait or test for a sync event
    // DEBUG: 	bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Data sharing
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Write data
    // DEBUG: 	bool WriteMemoryBuffer(const char *name, const char* data, int length);
    // DEBUG: 	// Create a shared memory buffer
    // DEBUG: 	bool CreateMemoryBuffer(const char *name, int length);
    // DEBUG: 	// Delete a shared memory buffer
    // DEBUG: 	bool DeleteMemoryBuffer();
    // DEBUG: 	// Get the size of a shared memory buffer
    // DEBUG: 	int GetMemoryBufferSize(const char* name);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// OpenGL shared texture access
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Bind OpenGL shared texture
    // DEBUG: 	bool BindSharedTexture();
    // DEBUG: 	// Un-bind OpenGL shared texture
    // DEBUG: 	bool UnBindSharedTexture();
    // DEBUG: 	// OpenGL shared texture ID
    // DEBUG: 	GLuint GetSharedTextureID();
    // DEBUG: 	
    // DEBUG: 	//
    // DEBUG: 	// Graphics compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user Auto GPU/CPU share
    // DEBUG: 	bool GetAutoShare();
    // DEBUG: 	// Set application Auto GPU/CPU share
    // DEBUG: 	void SetAutoShare(bool bAuto = true);
    // DEBUG: 	// Get user CPU share
    // DEBUG: 	bool GetCPUshare();
    // DEBUG: 	// Set application CPU share
    // DEBUG: 	// (re-test GL/DX compatibility if set to false)
    // DEBUG: 	void SetCPUshare(bool bCPU = true);
    // DEBUG: 
    // DEBUG: 	// OpenGL texture share compatibility
    // DEBUG: 	bool IsGLDXready();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Sender names
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Number of senders
    // DEBUG: 	int GetSenderCount();
    // DEBUG: 	// Sender item name
    // DEBUG: 	bool GetSender(int index, char* sendername, int MaxSize = 256);
    // DEBUG: 	// Sender information
    // DEBUG: 	bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat);
    // DEBUG: 	// Current active sender
    // DEBUG: 	bool GetActiveSender(char* sendername);
    // DEBUG: 	// Set sender as active
    // DEBUG: 	bool SetActiveSender(const char* sendername);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Adapter functions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// The number of graphics adapters in the system
    // DEBUG: 	int GetNumAdapters();
    // DEBUG: 	// Get adapter item name
    // DEBUG: 	bool GetAdapterName(int index, char *adaptername, int maxchars = 256);
    // DEBUG: 	// Current adapter name
    // DEBUG: 	char * AdapterName();
    // DEBUG: 	// Get current adapter index
    // DEBUG: 	int GetAdapter();
    // DEBUG: 	// Set graphics adapter for output
    // DEBUG: 	bool SetAdapter(int index = 0);
    // DEBUG: 	// Get the current adapter description
    // DEBUG: 	bool GetAdapterInfo(char *renderdescription, char *displaydescription, int maxchars);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// User settings recorded in the registry by "SpoutSettings"
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user buffering mode
    // DEBUG: 	bool GetBufferMode();
    // DEBUG: 	// Set application buffering mode
    // DEBUG: 	void SetBufferMode(bool bActive = true);
    // DEBUG: 	// Get user number of pixel buffers
    // DEBUG: 	int GetBuffers();
    // DEBUG: 	// Set application number of pixel buffers
    // DEBUG: 	void SetBuffers(int nBuffers);
    // DEBUG: 	// Get user Maximum senders allowed
    // DEBUG: 	int GetMaxSenders();
    // DEBUG: 	// Set user Maximum senders allowed
    // DEBUG: 	void SetMaxSenders(int maxSenders);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user DX9 mode
    // DEBUG: 	bool GetDX9();
    // DEBUG: 	// Set user DX9 mode
    // DEBUG: 	bool SetDX9(bool bDX9 = true);
    // DEBUG: 	// Get user memory share mode
    // DEBUG: 	bool GetMemoryShareMode();
    // DEBUG: 	// Set user memory share mode
    // DEBUG: 	bool SetMemoryShareMode(bool bMem = true);
    // DEBUG: 	// Get user CPU mode
    // DEBUG: 	bool GetCPUmode();
    // DEBUG: 	// Set user CPU mode
    // DEBUG: 	bool SetCPUmode(bool bCPU);
    // DEBUG: 	// Get user share mode
    // DEBUG: 	//  0 - texture, 1 - memory, 2 - CPU
    // DEBUG: 	int GetShareMode();
    // DEBUG: 	// Set user share mode
    // DEBUG: 	//  0 - texture, 1 - memory, 2 - CPU
    // DEBUG: 	void SetShareMode(int mode);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Information
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// The path of the host that produced the sender
    // DEBUG: 	bool GetHostPath(const char *sendername, char *hostpath, int maxchars);
    // DEBUG: 	// Vertical sync status
    // DEBUG: 	int  GetVerticalSync();
    // DEBUG: 	// Lock to monitor vertical sync
    // DEBUG: 	bool SetVerticalSync(bool bSync = true);
    // DEBUG: 	// Get Spout version
    // DEBUG: 	int GetSpoutVersion();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// OpenGL utilities
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Create an OpenGL window and context for situations where there is none.
    // DEBUG: 	//   Not used if applications already have an OpenGL context.
    // DEBUG: 	//   Always call CloseOpenGL afterwards.
    // DEBUG: 	bool CreateOpenGL();
    // DEBUG: 	// Close OpenGL window
    // DEBUG: 	bool CloseOpenGL();
    // DEBUG: 	// Copy OpenGL texture with optional invert
    // DEBUG: 	//   Textures must be the same size
    // DEBUG: 	bool CopyTexture(GLuint SourceID, GLuint SourceTarget,
    // DEBUG: 		GLuint DestID, GLuint DestTarget,
    // DEBUG: 		unsigned int width, unsigned int height,
    // DEBUG: 		bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Create a sender
    // DEBUG: 	bool CreateSender(const char *Sendername, unsigned int width = 0, unsigned int height = 0, DWORD dwFormat = 0);
    // DEBUG: 	// Update a sender
    // DEBUG: 	bool UpdateSender(const char* Sendername, unsigned int width, unsigned int height);
    // DEBUG: 
    // DEBUG: 	// Legacy OpenGL DrawTo function
    // DEBUG: 	// See _SpoutCommon.h_ #define legacyOpenGL
    // DEBUG: #ifdef legacyOpenGL
    // DEBUG: 	// Render a texture to the shared texture. 
    // DEBUG: 	bool DrawToSharedTexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, float max_x = 1.0, float max_y = 1.0, float aspect = 1.0, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: 	// For access to all functions
    // DEBUG: 	Spout spout;
    // DEBUG: 
    // DEBUG: protected :
    // DEBUG: 
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutSender : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1960)]
        public partial struct __Internal
        {
            internal global::Spout.Spout.__Internal spout;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutSender@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutSender@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1SpoutSender@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderName@SpoutSender@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderFormat@SpoutSender@@QEAAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSenderFormat(__IntPtr __instance, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseSender@SpoutSender@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseSender(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendFbo@SpoutSender@@QEAA_NIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendFbo(__IntPtr __instance, uint FboID, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendTexture@SpoutSender@@QEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendTexture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendImage@SpoutSender@@QEAA_NPEBEIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendImage(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameCount@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameCount(__IntPtr __instance, bool bEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableFrameCount@SpoutSender@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?HoldFps@SpoutSender@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameSync@SpoutSender@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitFrameSync@SpoutSender@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteMemoryBuffer@SpoutSender@@QEAA_NPEBD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string data, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateMemoryBuffer@SpoutSender@@QEAA_NPEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DeleteMemoryBuffer@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteMemoryBuffer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryBufferSize@SpoutSender@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMemoryBufferSize(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?BindSharedTexture@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSender@SpoutSender@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderInfo@SpoutSender@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSender@SpoutSender@@QEAA_NPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetActiveSender@SpoutSender@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterName@SpoutSender@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAdapter@SpoutSender@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetAdapter(__IntPtr __instance, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@SpoutSender@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* renderdescription, sbyte* displaydescription, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetDX9@SpoutSender@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDX9(__IntPtr __instance, bool bDX9);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMemoryShareMode@SpoutSender@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetMemoryShareMode(__IntPtr __instance, bool bMem);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUmode@SpoutSender@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetCPUmode(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHostPath@SpoutSender@@QEAA_NPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetHostPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* hostpath, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetVerticalSync@SpoutSender@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetVerticalSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateOpenGL@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseOpenGL@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CloseOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CopyTexture@SpoutSender@@QEAA_NIIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CopyTexture(__IntPtr __instance, uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateSender@SpoutSender@@QEAA_NPEBDIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Sendername, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UpdateSender@SpoutSender@@QEAA_NPEBDII@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UpdateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Sendername, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsInitialized@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsInitialized(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetName@SpoutSender@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetWidth@SpoutSender@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHeight@SpoutSender@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetFps@SpoutSender@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetFrame@SpoutSender@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHandle@SpoutSender@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPU@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPU(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetGLDX@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetGLDX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameCountEnabled@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnBindSharedTexture@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UnBindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSharedTextureID@SpoutSender@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSharedTextureID(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAutoShare@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAutoShare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAutoShare@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAutoShare(__IntPtr __instance, bool bAuto);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUshare@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUshare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUshare@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCPUshare(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsGLDXready@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGLDXready(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCount@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNumAdapters@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AdapterName@SpoutSender@@QEAAPEADXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* AdapterName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapter@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBufferMode@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBufferMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBufferMode@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBufferMode(__IntPtr __instance, bool bActive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBuffers@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetBuffers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBuffers@SpoutSender@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBuffers(__IntPtr __instance, int nBuffers);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMaxSenders@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMaxSenders@SpoutSender@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX9@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetDX9(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryShareMode@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMemoryShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUmode@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUmode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetShareMode@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetShareMode@SpoutSender@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetShareMode(__IntPtr __instance, int mode);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetVerticalSync@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetVerticalSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutVersion@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSpoutVersion(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutSender> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutSender>();

        protected bool __ownsNativeInstance;

        internal static SpoutSender __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new SpoutSender(native.ToPointer(), skipVTables);
        }

        internal static SpoutSender __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (SpoutSender)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static SpoutSender __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutSender(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::Spout.SpoutSender.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private SpoutSender(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SpoutSender(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: SpoutSender()
        public SpoutSender()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutSender.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        // DEBUG: SpoutSender
        public SpoutSender(global::Spout.SpoutSender _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutSender.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        ~SpoutSender()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: void SetSenderName(const char* sendername = nullptr)
        public void SetSenderName(string sendername)
        {
            __Internal.SetSenderName(__Instance, sendername);
        }

        // DEBUG: void SetSenderFormat(DWORD dwFormat)
        public void SetSenderFormat(uint dwFormat)
        {
            __Internal.SetSenderFormat(__Instance, dwFormat);
        }

        // DEBUG: void ReleaseSender()
        public void ReleaseSender()
        {
            __Internal.ReleaseSender(__Instance);
        }

        // DEBUG: bool SendFbo(GLuint FboID, unsigned int width, unsigned int height, bool bInvert = true)
        public bool SendFbo(uint FboID, uint width, uint height, bool bInvert)
        {
            var __ret = __Internal.SendFbo(__Instance, FboID, width, height, bInvert);
            return __ret;
        }

        // DEBUG: bool SendTexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = true, GLuint HostFBO = 0)
        public bool SendTexture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.SendTexture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool SendImage(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0)
        public bool SendImage(byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.SendImage(__Instance, pixels, width, height, glFormat, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: void SetFrameCount(bool bEnable)
        public void SetFrameCount(bool bEnable)
        {
            __Internal.SetFrameCount(__Instance, bEnable);
        }

        // DEBUG: void DisableFrameCount()
        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        // DEBUG: void HoldFps(int fps)
        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        // DEBUG: void SetFrameSync(const char* SenderName)
        public void SetFrameSync(string SenderName)
        {
            __Internal.SetFrameSync(__Instance, SenderName);
        }

        // DEBUG: bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0)
        public bool WaitFrameSync(string SenderName, uint dwTimeout)
        {
            var __ret = __Internal.WaitFrameSync(__Instance, SenderName, dwTimeout);
            return __ret;
        }

        // DEBUG: bool WriteMemoryBuffer(const char *name, const char* data, int length)
        public bool WriteMemoryBuffer(string name, string data, int length)
        {
            var __ret = __Internal.WriteMemoryBuffer(__Instance, name, data, length);
            return __ret;
        }

        // DEBUG: bool CreateMemoryBuffer(const char *name, int length)
        public bool CreateMemoryBuffer(string name, int length)
        {
            var __ret = __Internal.CreateMemoryBuffer(__Instance, name, length);
            return __ret;
        }

        // DEBUG: bool DeleteMemoryBuffer()
        public bool DeleteMemoryBuffer()
        {
            var __ret = __Internal.DeleteMemoryBuffer(__Instance);
            return __ret;
        }

        // DEBUG: int GetMemoryBufferSize(const char* name)
        public int GetMemoryBufferSize(string name)
        {
            var __ret = __Internal.GetMemoryBufferSize(__Instance, name);
            return __ret;
        }

        // DEBUG: bool BindSharedTexture()
        public bool BindSharedTexture()
        {
            var __ret = __Internal.BindSharedTexture(__Instance);
            return __ret;
        }

        // DEBUG: bool GetSender(int index, char* sendername, int MaxSize = 256)
        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var __ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return __ret;
        }

        // DEBUG: bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat)
        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var __ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return __ret;
                    }
                }
            }
        }

        // DEBUG: bool GetActiveSender(char* sendername)
        public bool GetActiveSender(sbyte* sendername)
        {
            var __ret = __Internal.GetActiveSender(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool SetActiveSender(const char* sendername)
        public bool SetActiveSender(string sendername)
        {
            var __ret = __Internal.SetActiveSender(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool GetAdapterName(int index, char *adaptername, int maxchars = 256)
        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var __ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return __ret;
        }

        // DEBUG: bool SetAdapter(int index = 0)
        public bool SetAdapter(int index)
        {
            var __ret = __Internal.SetAdapter(__Instance, index);
            return __ret;
        }

        // DEBUG: bool GetAdapterInfo(char *renderdescription, char *displaydescription, int maxchars)
        public bool GetAdapterInfo(sbyte* renderdescription, sbyte* displaydescription, int maxchars)
        {
            var __ret = __Internal.GetAdapterInfo(__Instance, renderdescription, displaydescription, maxchars);
            return __ret;
        }

        // DEBUG: bool SetDX9(bool bDX9 = true)
        public bool SetDX9(bool bDX9)
        {
            var __ret = __Internal.SetDX9(__Instance, bDX9);
            return __ret;
        }

        // DEBUG: bool SetMemoryShareMode(bool bMem = true)
        public bool SetMemoryShareMode(bool bMem)
        {
            var __ret = __Internal.SetMemoryShareMode(__Instance, bMem);
            return __ret;
        }

        // DEBUG: bool SetCPUmode(bool bCPU)
        public bool SetCPUmode(bool bCPU)
        {
            var __ret = __Internal.SetCPUmode(__Instance, bCPU);
            return __ret;
        }

        // DEBUG: bool GetHostPath(const char *sendername, char *hostpath, int maxchars)
        public bool GetHostPath(string sendername, sbyte* hostpath, int maxchars)
        {
            var __ret = __Internal.GetHostPath(__Instance, sendername, hostpath, maxchars);
            return __ret;
        }

        // DEBUG: bool SetVerticalSync(bool bSync = true)
        public bool SetVerticalSync(bool bSync)
        {
            var __ret = __Internal.SetVerticalSync(__Instance, bSync);
            return __ret;
        }

        // DEBUG: bool CreateOpenGL()
        public bool CreateOpenGL()
        {
            var __ret = __Internal.CreateOpenGL(__Instance);
            return __ret;
        }

        // DEBUG: bool CloseOpenGL()
        public bool CloseOpenGL()
        {
            var __ret = __Internal.CloseOpenGL(__Instance);
            return __ret;
        }

        // DEBUG: bool CopyTexture(GLuint SourceID, GLuint SourceTarget,
        // DEBUG: 		GLuint DestID, GLuint DestTarget,
        // DEBUG: 		unsigned int width, unsigned int height,
        // DEBUG: 		bool bInvert = false, GLuint HostFBO = 0)
        public bool CopyTexture(uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var __ret = __Internal.CopyTexture(__Instance, SourceID, SourceTarget, DestID, DestTarget, width, height, bInvert, HostFBO);
            return __ret;
        }

        // DEBUG: bool CreateSender(const char *Sendername, unsigned int width = 0, unsigned int height = 0, DWORD dwFormat = 0)
        public bool CreateSender(string Sendername, uint width, uint height, uint dwFormat)
        {
            var __ret = __Internal.CreateSender(__Instance, Sendername, width, height, dwFormat);
            return __ret;
        }

        // DEBUG: bool UpdateSender(const char* Sendername, unsigned int width, unsigned int height)
        public bool UpdateSender(string Sendername, uint width, uint height)
        {
            var __ret = __Internal.UpdateSender(__Instance, Sendername, width, height);
            return __ret;
        }

        public global::Spout.Spout Spout
        {
            get
            {
                return global::Spout.Spout.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spout));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spout = *(global::Spout.Spout.__Internal*) value.__Instance;
            }
        }

        public bool IsInitialized
        {
            get
            {
                var __ret = __Internal.IsInitialized(__Instance);
                return __ret;
            }
        }

        public string Name
        {
            get
            {
                var __ret = __Internal.GetName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
            }
        }

        public uint Width
        {
            get
            {
                var __ret = __Internal.GetWidth(__Instance);
                return __ret;
            }
        }

        public uint Height
        {
            get
            {
                var __ret = __Internal.GetHeight(__Instance);
                return __ret;
            }
        }

        public double Fps
        {
            get
            {
                var __ret = __Internal.GetFps(__Instance);
                return __ret;
            }
        }

        public int Frame
        {
            get
            {
                var __ret = __Internal.GetFrame(__Instance);
                return __ret;
            }
        }

        public __IntPtr Handle
        {
            get
            {
                var __ret = __Internal.GetHandle(__Instance);
                return __ret;
            }
        }

        public bool CPU
        {
            get
            {
                var __ret = __Internal.GetCPU(__Instance);
                return __ret;
            }
        }

        public bool GLDX
        {
            get
            {
                var __ret = __Internal.GetGLDX(__Instance);
                return __ret;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var __ret = __Internal.IsFrameCountEnabled(__Instance);
                return __ret;
            }
        }

        public bool UnBindSharedTexture
        {
            get
            {
                var __ret = __Internal.UnBindSharedTexture(__Instance);
                return __ret;
            }
        }

        public uint SharedTextureID
        {
            get
            {
                var __ret = __Internal.GetSharedTextureID(__Instance);
                return __ret;
            }
        }

        public bool AutoShare
        {
            get
            {
                var __ret = __Internal.GetAutoShare(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetAutoShare(__Instance, value);
            }
        }

        public bool CPUshare
        {
            get
            {
                var __ret = __Internal.GetCPUshare(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetCPUshare(__Instance, value);
            }
        }

        public bool IsGLDXready
        {
            get
            {
                var __ret = __Internal.IsGLDXready(__Instance);
                return __ret;
            }
        }

        public int SenderCount
        {
            get
            {
                var __ret = __Internal.GetSenderCount(__Instance);
                return __ret;
            }
        }

        public int NumAdapters
        {
            get
            {
                var __ret = __Internal.GetNumAdapters(__Instance);
                return __ret;
            }
        }

        public sbyte* AdapterName
        {
            get
            {
                var __ret = __Internal.AdapterName(__Instance);
                return __ret;
            }
        }

        public int Adapter
        {
            get
            {
                var __ret = __Internal.GetAdapter(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetAdapter(__Instance, value);
            }
        }

        public bool BufferMode
        {
            get
            {
                var __ret = __Internal.GetBufferMode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetBufferMode(__Instance, value);
            }
        }

        public int Buffers
        {
            get
            {
                var __ret = __Internal.GetBuffers(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetBuffers(__Instance, value);
            }
        }

        public int MaxSenders
        {
            get
            {
                var __ret = __Internal.GetMaxSenders(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }

        public bool DX9
        {
            get
            {
                var __ret = __Internal.GetDX9(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetDX9(__Instance, value);
            }
        }

        public bool MemoryShareMode
        {
            get
            {
                var __ret = __Internal.GetMemoryShareMode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetMemoryShareMode(__Instance, value);
            }
        }

        public bool CPUmode
        {
            get
            {
                var __ret = __Internal.GetCPUmode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetCPUmode(__Instance, value);
            }
        }

        public int ShareMode
        {
            get
            {
                var __ret = __Internal.GetShareMode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetShareMode(__Instance, value);
            }
        }

        public int VerticalSync
        {
            get
            {
                var __ret = __Internal.GetVerticalSync(__Instance);
                return __ret;
            }
        }

        public int SpoutVersion
        {
            get
            {
                var __ret = __Internal.GetSpoutVersion(__Instance);
                return __ret;
            }
        }
    }

    // DEBUG: class SPOUT_DLLEXP spoutDX {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 	spoutDX();
    // DEBUG:     ~spoutDX();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// DIRECTX
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	bool OpenDirectX11(ID3D11Device* pDevice = nullptr);
    // DEBUG: 	ID3D11Device* GetDX11Device();
    // DEBUG: 	ID3D11DeviceContext* GetDX11Context();
    // DEBUG: 	void CloseDirectX11();
    // DEBUG: 	bool IsClassDevice();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// SENDER
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Set the sender name
    // DEBUG: 	bool SetSenderName(const char* sendername = nullptr);
    // DEBUG: 	// Set the sender texture format
    // DEBUG: 	void SetSenderFormat(DXGI_FORMAT format);
    // DEBUG: 	// Close sender and free resources
    // DEBUG: 	void ReleaseSender();
    // DEBUG: 	// Send the back buffer
    // DEBUG: 	bool SendBackBuffer();
    // DEBUG: 	// Send a texture
    // DEBUG: 	bool SendTexture(ID3D11Texture2D* pTexture);
    // DEBUG: 	// Send part of a texture
    // DEBUG: 	bool SendTexture(ID3D11Texture2D* pTexture,
    // DEBUG: 		unsigned int xoffset, unsigned int yoffset,
    // DEBUG: 		unsigned int width, unsigned int height); 
    // DEBUG: 	// Send an image
    // DEBUG: 	bool SendImage(unsigned char * pData, unsigned int width, unsigned int height);
    // DEBUG: 	// Sender status
    // DEBUG: 	bool IsInitialized();
    // DEBUG: 	// Sender name
    // DEBUG: 	const char * GetName();
    // DEBUG: 	// Get width
    // DEBUG: 	unsigned int GetWidth();
    // DEBUG: 	// Get height
    // DEBUG: 	unsigned int GetHeight();
    // DEBUG: 	// Get frame rate
    // DEBUG: 	double GetFps();
    // DEBUG: 	// Get frame number
    // DEBUG: 	long GetFrame();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// RECEIVER
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Set the sender to connect to
    // DEBUG: 	void SetReceiverName(const char * sendername = nullptr);
    // DEBUG: 	// Close receiver and free resources
    // DEBUG: 	void ReleaseReceiver();
    // DEBUG: 	// Receive from a sender
    // DEBUG: 	bool ReceiveTexture();
    // DEBUG: 	// Receive a texture from a sender
    // DEBUG: 	bool ReceiveTexture(ID3D11Texture2D** ppTexture);
    // DEBUG: 	// Receive an image
    // DEBUG: 	bool ReceiveImage(unsigned char * pixels, unsigned int width, unsigned int height, bool bRGB = false, bool bInvert = false);
    // DEBUG: 	// Open sender selection dialog
    // DEBUG: 	void SelectSender();
    // DEBUG: 	// Sender has changed
    // DEBUG: 	bool IsUpdated();
    // DEBUG: 	// Connected to a sender
    // DEBUG: 	bool IsConnected();
    // DEBUG: 	// Received frame is new
    // DEBUG: 	bool IsFrameNew();
    // DEBUG: 	// Received texture
    // DEBUG: 	ID3D11Texture2D* GetSenderTexture();
    // DEBUG: 	// Received sender share handle
    // DEBUG: 	HANDLE GetSenderHandle();
    // DEBUG: 	// Received sender texture format
    // DEBUG: 	DXGI_FORMAT GetSenderFormat();
    // DEBUG: 	// Received sender name
    // DEBUG: 	const char * GetSenderName();
    // DEBUG: 	// Received sender width
    // DEBUG: 	unsigned int GetSenderWidth();
    // DEBUG: 	// Received sender height
    // DEBUG: 	unsigned int GetSenderHeight();
    // DEBUG: 	// Received sender frame rate
    // DEBUG: 	double GetSenderFps();
    // DEBUG: 	// Received sender frame number
    // DEBUG: 	long GetSenderFrame();
    // DEBUG: 	
    // DEBUG: 	//
    // DEBUG: 	// COMMON
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Frame rate control
    // DEBUG: 	void HoldFps(int fps);
    // DEBUG: 	// Disable frame counting for this application
    // DEBUG: 	void DisableFrameCount();
    // DEBUG: 	// Return frame count status
    // DEBUG: 	bool IsFrameCountEnabled();
    // DEBUG: 	// Signal sync event 
    // DEBUG: 	void SetFrameSync(const char* SenderName);
    // DEBUG: 	// Wait or test for a sync event
    // DEBUG: 	bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0);
    // DEBUG: 
    // DEBUG: 								
    // DEBUG: 	//
    // DEBUG: 	// Sender names
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get number of senders
    // DEBUG: 	int  GetSenderCount();
    // DEBUG: 	// Get sender name for a given index
    // DEBUG: 	bool GetSender(int index, char* sendername, int MaxSize = 256);
    // DEBUG: 	// Get sender details
    // DEBUG: 	bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat);
    // DEBUG: 	// Get active sender name
    // DEBUG: 	bool GetActiveSender(char* sendername);
    // DEBUG: 	// set active sender name
    // DEBUG: 	bool SetActiveSender(const char* sendername);
    // DEBUG: 	// Get maximum senders allowed
    // DEBUG: 	int  GetMaxSenders();
    // DEBUG: 	// Set maximum senders allowed
    // DEBUG: 	void SetMaxSenders(int maxSenders);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Adapter functions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get the number of graphics adapters in the system
    // DEBUG: 	int GetNumAdapters();
    // DEBUG: 	// Get the adapter name for a given index
    // DEBUG: 	bool GetAdapterName(int index, char *adaptername, int maxchars);
    // DEBUG: 	// Get the current adapter description
    // DEBUG: 	bool GetAdapterInfo(char *renderdescription, char *displaydescription, int maxchars);
    // DEBUG: 	// Get the current adapter index
    // DEBUG: 	int  GetAdapter();
    // DEBUG: 	// Set required graphics adapter for output (no args or -1 to reset)
    // DEBUG: 	bool SetAdapter(int index = -1);
    // DEBUG: 	// Get adapter pointer for a given adapter (-1 means current)
    // DEBUG: 	IDXGIAdapter* GetAdapterPointer(int index = -1);
    // DEBUG: 	// Set required graphics adapter for creating a device
    // DEBUG: 	void SetAdapterPointer(IDXGIAdapter* pAdapter);
    // DEBUG: 	// Get auto device switching status
    // DEBUG: 	bool GetAdapterAuto();
    // DEBUG: 	// Auto switch receiving device to use the same graphics adapter as the sender
    // DEBUG: 	void SetAdapterAuto(bool bAuto = true);
    // DEBUG: 	// Get sender adapter index and name for a given sender
    // DEBUG: 	int GetSenderAdapter(const char* sendername, char* adaptername = nullptr, int maxchars = 256);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Sharing modes (2.006 compatibility)
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user selected DX9 mode (2.006)
    // DEBUG: 	bool GetDX9();
    // DEBUG: 	bool GetMemoryShareMode();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Utility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	void CheckSenderFormat(const char * sendername);
    // DEBUG: 	bool CreateDX11texture(ID3D11Device* pd3dDevice,
    // DEBUG: 		unsigned int width, unsigned int height,
    // DEBUG: 		DXGI_FORMAT format, ID3D11Texture2D** ppTexture);
    // DEBUG: 	
    // DEBUG: 	//
    // DEBUG: 	// Data sharing
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Write data to shared memory
    // DEBUG: 	bool WriteMemoryBuffer(const char *name, const char* data, int length);
    // DEBUG: 	// Read data from shared memory
    // DEBUG: 	int  ReadMemoryBuffer(const char* name, char* data, int maxlength);
    // DEBUG: 	// Create a shared memory buffer
    // DEBUG: 	bool CreateMemoryBuffer(const char *name, int length);
    // DEBUG: 	// Delete a shared memory buffer
    // DEBUG: 	bool DeleteMemoryBuffer();
    // DEBUG: 	// Get the number of bytes available for data transfer
    // DEBUG: 	int  GetMemoryBufferSize(const char *name);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Public for external access
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	spoutSenderNames sendernames;
    // DEBUG: 	spoutFrameCount frame;
    // DEBUG: 	spoutDirectX spoutdx;
    // DEBUG: 	spoutCopy spoutcopy;
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Options used for SpoutCam
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Mirror image
    // DEBUG: 	bool m_bMirror;
    // DEBUG: 	// RGB <> BGR
    // DEBUG: 	bool m_bSwapRB;
    // DEBUG: 
    // DEBUG: protected :
    // DEBUG: 
    // DEBUG: 	ID3D11Device* m_pd3dDevice;
    // DEBUG: 	ID3D11DeviceContext* m_pImmediateContext;
    // DEBUG: 	ID3D11Texture2D* m_pSharedTexture;
    // DEBUG: 	ID3D11Texture2D* m_pTexture;
    // DEBUG: 	ID3D11Texture2D* m_pStaging[2];
    // DEBUG: 	int m_Index;
    // DEBUG: 	int m_NextIndex;
    // DEBUG: 
    // DEBUG: 	HANDLE m_dxShareHandle;
    // DEBUG: 	DWORD m_dwFormat;
    // DEBUG: 	SharedTextureInfo m_SenderInfo;
    // DEBUG: 	char m_SenderNameSetup[256];
    // DEBUG: 	char m_SenderName[256];
    // DEBUG: 	unsigned int m_Width;
    // DEBUG: 	unsigned int m_Height;
    // DEBUG: 	bool m_bUpdated;
    // DEBUG: 	bool m_bConnected;
    // DEBUG: 	bool m_bSpoutInitialized;
    // DEBUG: 	bool m_bSpoutPanelOpened;
    // DEBUG: 	bool m_bSpoutPanelActive;
    // DEBUG: 	bool m_bClassDevice;
    // DEBUG: 	bool m_bAdapt;
    // DEBUG: 	bool m_bMemoryShare; // Using 2.006 memoryshare methods
    // DEBUG: 	SHELLEXECUTEINFOA m_ShExecInfo;
    // DEBUG: 
    // DEBUG: 	// For WriteMemoryBuffer/ReadMemoryBuffer
    // DEBUG: 	SpoutSharedMemory memorybuffer;
    // DEBUG: 
    // DEBUG: 	bool CheckSender(unsigned int width, unsigned int height, DWORD dwFormat);
    // DEBUG: 	ID3D11Texture2D* CheckSenderTexture(char *sendername, HANDLE dxShareHandle);
    // DEBUG: 
    // DEBUG: 	bool ReceiveSenderData();
    // DEBUG: 	void CreateReceiver(const char * sendername, unsigned int width, unsigned int height, DWORD dwFormat);
    // DEBUG: 	
    // DEBUG: 	// Read pixels from a staging texture
    // DEBUG: 	bool ReadPixelData(ID3D11Texture2D* pStagingSource, unsigned char* destpixels,
    // DEBUG: 		unsigned int width, unsigned int height, bool bRGB, bool bInvert, bool bSwap);
    // DEBUG: 	
    // DEBUG: 	// Create staging textures
    // DEBUG: 	bool CheckStagingTextures(unsigned int width, unsigned int height, DWORD dwFormat = DXGI_FORMAT_B8G8R8A8_UNORM);
    // DEBUG: 	bool CreateDX11StagingTexture(unsigned int width, unsigned int height, DXGI_FORMAT format, ID3D11Texture2D** pStagingTexture);
    // DEBUG: 
    // DEBUG: 	// Create or update class texture
    // DEBUG: 	bool CheckTexture(unsigned int width, unsigned int height, DWORD dwFormat);
    // DEBUG: 
    // DEBUG: 	void SelectSenderPanel();
    // DEBUG: 	bool CheckSpoutPanel(char *sendername, int maxchars = 256);
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutDX : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1856)]
        public partial struct __Internal
        {
            internal global::Spout.SpoutSenderNames.__Internal sendernames;
            internal global::Spout.SpoutFrameCount.__Internal frame;
            internal global::Spout.SpoutDirectX.__Internal spoutdx;
            internal global::Spout.SpoutCopy.__Internal spoutcopy;
            internal byte m_bMirror;
            internal byte m_bSwapRB;
            internal __IntPtr m_pd3dDevice;
            internal __IntPtr m_pImmediateContext;
            internal __IntPtr m_pSharedTexture;
            internal __IntPtr m_pTexture;
            internal fixed long m_pStaging[2];
            internal int m_Index;
            internal int m_NextIndex;
            internal __IntPtr m_dxShareHandle;
            internal uint m_dwFormat;
            internal global::Spout.SharedTextureInfo.__Internal m_SenderInfo;
            internal fixed sbyte m_SenderNameSetup[256];
            internal fixed sbyte m_SenderName[256];
            internal uint m_Width;
            internal uint m_Height;
            internal byte m_bUpdated;
            internal byte m_bConnected;
            internal byte m_bSpoutInitialized;
            internal byte m_bSpoutPanelOpened;
            internal byte m_bSpoutPanelActive;
            internal byte m_bClassDevice;
            internal byte m_bAdapt;
            internal byte m_bMemoryShare;
            internal global::SHELLEXECUTEINFOA.__Internal m_ShExecInfo;
            internal global::Spout.SpoutSharedMemory.__Internal memorybuffer;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0spoutDX@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutDX@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1spoutDX@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CloseDirectX11@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseDirectX11(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetSenderName@spoutDX@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReleaseSender@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseSender(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SendImage@spoutDX@@QEAA_NPEAEII@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendImage(__IntPtr __instance, byte* pData, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetReceiverName@spoutDX@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetReceiverName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReleaseReceiver@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseReceiver(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReceiveTexture@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReceiveImage@spoutDX@@QEAA_NPEAEII_N1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, byte* pixels, uint width, uint height, bool bRGB, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SelectSender@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SelectSender(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?HoldFps@spoutDX@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?DisableFrameCount@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetFrameSync@spoutDX@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?WaitFrameSync@spoutDX@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSender@spoutDX@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderInfo@spoutDX@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetActiveSender@spoutDX@@QEAA_NPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetActiveSender@spoutDX@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetAdapterName@spoutDX@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetAdapterInfo@spoutDX@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* renderdescription, sbyte* displaydescription, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetAdapter@spoutDX@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetAdapter(__IntPtr __instance, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderAdapter@spoutDX@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderAdapter(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CheckSenderFormat@spoutDX@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CheckSenderFormat(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?WriteMemoryBuffer@spoutDX@@QEAA_NPEBD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string data, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReadMemoryBuffer@spoutDX@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, sbyte* data, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CreateMemoryBuffer@spoutDX@@QEAA_NPEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?DeleteMemoryBuffer@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteMemoryBuffer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetMemoryBufferSize@spoutDX@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMemoryBufferSize(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CheckSender@spoutDX@@IEAA_NIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSender(__IntPtr __instance, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReceiveSenderData@spoutDX@@IEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveSenderData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CreateReceiver@spoutDX@@IEAAXPEBDIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CreateReceiver(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CheckStagingTextures@spoutDX@@IEAA_NIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckStagingTextures(__IntPtr __instance, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CheckTexture@spoutDX@@IEAA_NIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckTexture(__IntPtr __instance, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SelectSenderPanel@spoutDX@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SelectSenderPanel(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CheckSpoutPanel@spoutDX@@IEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSpoutPanel(__IntPtr __instance, sbyte* sendername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsClassDevice@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsClassDevice(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderName@spoutDX@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SendBackBuffer@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendBackBuffer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsInitialized@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsInitialized(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetName@spoutDX@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetWidth@spoutDX@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetHeight@spoutDX@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetFps@spoutDX@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetFrame@spoutDX@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsUpdated@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsUpdated(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsConnected@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsConnected(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsFrameNew@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameNew(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderHandle@spoutDX@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderWidth@spoutDX@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderHeight@spoutDX@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderFps@spoutDX@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetSenderFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderFrame@spoutDX@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsFrameCountEnabled@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderCount@spoutDX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetMaxSenders@spoutDX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetMaxSenders@spoutDX@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetNumAdapters@spoutDX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetAdapter@spoutDX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetAdapterAuto@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterAuto(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetAdapterAuto@spoutDX@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAdapterAuto(__IntPtr __instance, bool bAuto);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetDX9@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetDX9(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetMemoryShareMode@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMemoryShareMode(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutDX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Spout.SpoutDX>();

        protected bool __ownsNativeInstance;

        internal static SpoutDX __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new SpoutDX(native.ToPointer(), skipVTables);
        }

        internal static SpoutDX __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (SpoutDX)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static SpoutDX __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutDX(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutDX(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SpoutDX(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: spoutDX()
        public SpoutDX()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutDX.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        // DEBUG: spoutDX
        public SpoutDX(global::Spout.SpoutDX _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Spout.SpoutDX.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Spout.SpoutDX.__Internal*) __Instance) = *((global::Spout.SpoutDX.__Internal*) _0.__Instance);
        }

        ~SpoutDX()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: void CloseDirectX11()
        public void CloseDirectX11()
        {
            __Internal.CloseDirectX11(__Instance);
        }

        // DEBUG: bool SetSenderName(const char* sendername = nullptr)
        public bool SetSenderName(string sendername)
        {
            var __ret = __Internal.SetSenderName(__Instance, sendername);
            return __ret;
        }

        // DEBUG: void ReleaseSender()
        public void ReleaseSender()
        {
            __Internal.ReleaseSender(__Instance);
        }

        // DEBUG: bool SendImage(unsigned char * pData, unsigned int width, unsigned int height)
        public bool SendImage(byte* pData, uint width, uint height)
        {
            var __ret = __Internal.SendImage(__Instance, pData, width, height);
            return __ret;
        }

        // DEBUG: void SetReceiverName(const char * sendername = nullptr)
        public void SetReceiverName(string sendername)
        {
            __Internal.SetReceiverName(__Instance, sendername);
        }

        // DEBUG: void ReleaseReceiver()
        public void ReleaseReceiver()
        {
            __Internal.ReleaseReceiver(__Instance);
        }

        // DEBUG: bool ReceiveTexture()
        public bool ReceiveTexture()
        {
            var __ret = __Internal.ReceiveTexture(__Instance);
            return __ret;
        }

        // DEBUG: bool ReceiveImage(unsigned char * pixels, unsigned int width, unsigned int height, bool bRGB = false, bool bInvert = false)
        public bool ReceiveImage(byte* pixels, uint width, uint height, bool bRGB, bool bInvert)
        {
            var __ret = __Internal.ReceiveImage(__Instance, pixels, width, height, bRGB, bInvert);
            return __ret;
        }

        // DEBUG: void SelectSender()
        public void SelectSender()
        {
            __Internal.SelectSender(__Instance);
        }

        // DEBUG: void HoldFps(int fps)
        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        // DEBUG: void DisableFrameCount()
        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        // DEBUG: void SetFrameSync(const char* SenderName)
        public void SetFrameSync(string SenderName)
        {
            __Internal.SetFrameSync(__Instance, SenderName);
        }

        // DEBUG: bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0)
        public bool WaitFrameSync(string SenderName, uint dwTimeout)
        {
            var __ret = __Internal.WaitFrameSync(__Instance, SenderName, dwTimeout);
            return __ret;
        }

        // DEBUG: bool GetSender(int index, char* sendername, int MaxSize = 256)
        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var __ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return __ret;
        }

        // DEBUG: bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat)
        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var __ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return __ret;
                    }
                }
            }
        }

        // DEBUG: bool GetActiveSender(char* sendername)
        public bool GetActiveSender(sbyte* sendername)
        {
            var __ret = __Internal.GetActiveSender(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool SetActiveSender(const char* sendername)
        public bool SetActiveSender(string sendername)
        {
            var __ret = __Internal.SetActiveSender(__Instance, sendername);
            return __ret;
        }

        // DEBUG: bool GetAdapterName(int index, char *adaptername, int maxchars)
        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var __ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return __ret;
        }

        // DEBUG: bool GetAdapterInfo(char *renderdescription, char *displaydescription, int maxchars)
        public bool GetAdapterInfo(sbyte* renderdescription, sbyte* displaydescription, int maxchars)
        {
            var __ret = __Internal.GetAdapterInfo(__Instance, renderdescription, displaydescription, maxchars);
            return __ret;
        }

        // DEBUG: bool SetAdapter(int index = -1)
        public bool SetAdapter(int index)
        {
            var __ret = __Internal.SetAdapter(__Instance, index);
            return __ret;
        }

        // DEBUG: int GetSenderAdapter(const char* sendername, char* adaptername = nullptr, int maxchars = 256)
        public int GetSenderAdapter(string sendername, sbyte* adaptername, int maxchars)
        {
            var __ret = __Internal.GetSenderAdapter(__Instance, sendername, adaptername, maxchars);
            return __ret;
        }

        // DEBUG: void CheckSenderFormat(const char * sendername)
        public void CheckSenderFormat(string sendername)
        {
            __Internal.CheckSenderFormat(__Instance, sendername);
        }

        // DEBUG: bool WriteMemoryBuffer(const char *name, const char* data, int length)
        public bool WriteMemoryBuffer(string name, string data, int length)
        {
            var __ret = __Internal.WriteMemoryBuffer(__Instance, name, data, length);
            return __ret;
        }

        // DEBUG: int  ReadMemoryBuffer(const char* name, char* data, int maxlength)
        public int ReadMemoryBuffer(string name, sbyte* data, int maxlength)
        {
            var __ret = __Internal.ReadMemoryBuffer(__Instance, name, data, maxlength);
            return __ret;
        }

        // DEBUG: bool CreateMemoryBuffer(const char *name, int length)
        public bool CreateMemoryBuffer(string name, int length)
        {
            var __ret = __Internal.CreateMemoryBuffer(__Instance, name, length);
            return __ret;
        }

        // DEBUG: bool DeleteMemoryBuffer()
        public bool DeleteMemoryBuffer()
        {
            var __ret = __Internal.DeleteMemoryBuffer(__Instance);
            return __ret;
        }

        // DEBUG: int  GetMemoryBufferSize(const char *name)
        public int GetMemoryBufferSize(string name)
        {
            var __ret = __Internal.GetMemoryBufferSize(__Instance, name);
            return __ret;
        }

        // DEBUG: bool CheckSender(unsigned int width, unsigned int height, DWORD dwFormat)
        protected bool CheckSender(uint width, uint height, uint dwFormat)
        {
            var __ret = __Internal.CheckSender(__Instance, width, height, dwFormat);
            return __ret;
        }

        // DEBUG: bool ReceiveSenderData()
        protected bool ReceiveSenderData()
        {
            var __ret = __Internal.ReceiveSenderData(__Instance);
            return __ret;
        }

        // DEBUG: void CreateReceiver(const char * sendername, unsigned int width, unsigned int height, DWORD dwFormat)
        protected void CreateReceiver(string sendername, uint width, uint height, uint dwFormat)
        {
            __Internal.CreateReceiver(__Instance, sendername, width, height, dwFormat);
        }

        // DEBUG: bool CheckStagingTextures(unsigned int width, unsigned int height, DWORD dwFormat = DXGI_FORMAT_B8G8R8A8_UNORM)
        protected bool CheckStagingTextures(uint width, uint height, uint dwFormat)
        {
            var __ret = __Internal.CheckStagingTextures(__Instance, width, height, dwFormat);
            return __ret;
        }

        // DEBUG: bool CheckTexture(unsigned int width, unsigned int height, DWORD dwFormat)
        protected bool CheckTexture(uint width, uint height, uint dwFormat)
        {
            var __ret = __Internal.CheckTexture(__Instance, width, height, dwFormat);
            return __ret;
        }

        // DEBUG: void SelectSenderPanel()
        protected void SelectSenderPanel()
        {
            __Internal.SelectSenderPanel(__Instance);
        }

        // DEBUG: bool CheckSpoutPanel(char *sendername, int maxchars = 256)
        protected bool CheckSpoutPanel(sbyte* sendername, int maxchars)
        {
            var __ret = __Internal.CheckSpoutPanel(__Instance, sendername, maxchars);
            return __ret;
        }

        public global::Spout.SpoutSenderNames Sendernames
        {
            get
            {
                return global::Spout.SpoutSenderNames.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->sendernames));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->sendernames = *(global::Spout.SpoutSenderNames.__Internal*) value.__Instance;
            }
        }

        public global::Spout.SpoutFrameCount frame
        {
            get
            {
                return global::Spout.SpoutFrameCount.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->frame));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->frame = *(global::Spout.SpoutFrameCount.__Internal*) value.__Instance;
            }
        }

        public global::Spout.SpoutDirectX Spoutdx
        {
            get
            {
                return global::Spout.SpoutDirectX.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spoutdx));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spoutdx = *(global::Spout.SpoutDirectX.__Internal*) value.__Instance;
            }
        }

        public global::Spout.SpoutCopy Spoutcopy
        {
            get
            {
                return global::Spout.SpoutCopy.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spoutcopy));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spoutcopy = *(global::Spout.SpoutCopy.__Internal*) value.__Instance;
            }
        }

        public bool MBMirror
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMirror != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMirror = (byte) (value ? 1 : 0);
            }
        }

        public bool MBSwapRB
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSwapRB != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSwapRB = (byte) (value ? 1 : 0);
            }
        }

        /*
        protected global::ID3D11Texture2D[] MPStaging
        {
            get
            {
                global::ID3D11Texture2D[] __value = null;
                if (((__Internal*)__Instance)->m_pStaging != null)
                {
                    __value = new global::ID3D11Texture2D[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = global::ID3D11Texture2D.__CreateInstance((__IntPtr) ((__Internal*)__Instance)->m_pStaging[i]);
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 2)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 2; i++)
                        ((__Internal*)__Instance)->m_pStaging[i] = (long) value[i].__Instance;
                }
            }
        }
        */

        protected int MIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_Index;
            }

            set
            {
                ((__Internal*)__Instance)->m_Index = value;
            }
        }

        protected int MNextIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_NextIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_NextIndex = value;
            }
        }

        protected __IntPtr MDxShareHandle
        {
            get
            {
                return ((__Internal*)__Instance)->m_dxShareHandle;
            }

            set
            {
                ((__Internal*)__Instance)->m_dxShareHandle = (__IntPtr) value;
            }
        }

        protected uint MDwFormat
        {
            get
            {
                return ((__Internal*)__Instance)->m_dwFormat;
            }

            set
            {
                ((__Internal*)__Instance)->m_dwFormat = value;
            }
        }

        protected global::Spout.SharedTextureInfo MSenderInfo
        {
            get
            {
                return global::Spout.SharedTextureInfo.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_SenderInfo));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_SenderInfo = *(global::Spout.SharedTextureInfo.__Internal*) value.__Instance;
            }
        }

        protected sbyte[] MSenderNameSetup
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderNameSetup, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderNameSetup[i] = value[i];
                }
            }
        }

        protected sbyte[] MSenderName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderName[i] = value[i];
                }
            }
        }

        protected uint MWidth
        {
            get
            {
                return ((__Internal*)__Instance)->m_Width;
            }

            set
            {
                ((__Internal*)__Instance)->m_Width = value;
            }
        }

        protected uint MHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_Height;
            }

            set
            {
                ((__Internal*)__Instance)->m_Height = value;
            }
        }

        protected bool MBUpdated
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUpdated != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUpdated = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBConnected
        {
            get
            {
                return ((__Internal*)__Instance)->m_bConnected != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bConnected = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSpoutInitialized
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpoutInitialized != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpoutInitialized = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSpoutPanelOpened
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpoutPanelOpened != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpoutPanelOpened = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSpoutPanelActive
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpoutPanelActive != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpoutPanelActive = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBClassDevice
        {
            get
            {
                return ((__Internal*)__Instance)->m_bClassDevice != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bClassDevice = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBAdapt
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAdapt != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAdapt = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBMemoryShare
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMemoryShare != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMemoryShare = (byte) (value ? 1 : 0);
            }
        }

        protected global::Spout.SpoutSharedMemory Memorybuffer
        {
            get
            {
                return global::Spout.SpoutSharedMemory.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->memorybuffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->memorybuffer = *(global::Spout.SpoutSharedMemory.__Internal*) value.__Instance;
            }
        }

        public bool IsClassDevice
        {
            get
            {
                var __ret = __Internal.IsClassDevice(__Instance);
                return __ret;
            }
        }

        public string SenderName
        {
            get
            {
                var __ret = __Internal.GetSenderName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
            }

            set
            {
                __Internal.SetSenderName(__Instance, value);
            }
        }

        public bool SendBackBuffer
        {
            get
            {
                var __ret = __Internal.SendBackBuffer(__Instance);
                return __ret;
            }
        }

        public bool IsInitialized
        {
            get
            {
                var __ret = __Internal.IsInitialized(__Instance);
                return __ret;
            }
        }

        public string Name
        {
            get
            {
                var __ret = __Internal.GetName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
            }
        }

        public uint Width
        {
            get
            {
                var __ret = __Internal.GetWidth(__Instance);
                return __ret;
            }
        }

        public uint Height
        {
            get
            {
                var __ret = __Internal.GetHeight(__Instance);
                return __ret;
            }
        }

        public double Fps
        {
            get
            {
                var __ret = __Internal.GetFps(__Instance);
                return __ret;
            }
        }

        public int Frame
        {
            get
            {
                var __ret = __Internal.GetFrame(__Instance);
                return __ret;
            }
        }

        public bool IsUpdated
        {
            get
            {
                var __ret = __Internal.IsUpdated(__Instance);
                return __ret;
            }
        }

        public bool IsConnected
        {
            get
            {
                var __ret = __Internal.IsConnected(__Instance);
                return __ret;
            }
        }

        public bool IsFrameNew
        {
            get
            {
                var __ret = __Internal.IsFrameNew(__Instance);
                return __ret;
            }
        }

        public __IntPtr SenderHandle
        {
            get
            {
                var __ret = __Internal.GetSenderHandle(__Instance);
                return __ret;
            }
        }

        public uint SenderWidth
        {
            get
            {
                var __ret = __Internal.GetSenderWidth(__Instance);
                return __ret;
            }
        }

        public uint SenderHeight
        {
            get
            {
                var __ret = __Internal.GetSenderHeight(__Instance);
                return __ret;
            }
        }

        public double SenderFps
        {
            get
            {
                var __ret = __Internal.GetSenderFps(__Instance);
                return __ret;
            }
        }

        public int SenderFrame
        {
            get
            {
                var __ret = __Internal.GetSenderFrame(__Instance);
                return __ret;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var __ret = __Internal.IsFrameCountEnabled(__Instance);
                return __ret;
            }
        }

        public int SenderCount
        {
            get
            {
                var __ret = __Internal.GetSenderCount(__Instance);
                return __ret;
            }
        }

        public int MaxSenders
        {
            get
            {
                var __ret = __Internal.GetMaxSenders(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }

        public int NumAdapters
        {
            get
            {
                var __ret = __Internal.GetNumAdapters(__Instance);
                return __ret;
            }
        }

        public int Adapter
        {
            get
            {
                var __ret = __Internal.GetAdapter(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetAdapter(__Instance, value);
            }
        }

        public bool AdapterAuto
        {
            get
            {
                var __ret = __Internal.GetAdapterAuto(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetAdapterAuto(__Instance, value);
            }
        }

        public bool DX9
        {
            get
            {
                var __ret = __Internal.GetDX9(__Instance);
                return __ret;
            }
        }

        public bool MemoryShareMode
        {
            get
            {
                var __ret = __Internal.GetMemoryShareMode(__Instance);
                return __ret;
            }
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_int(__IntPtr __instance, int arg1);
    }
}
namespace Spout.__Symbols
{
    internal class Spout
    {
        public static IntPtr _wglDXOpenDeviceNV__3P6APEAXPEAX_ZEA { get; }
        public static IntPtr _wglDXCloseDeviceNV__3P6AHPEAX_ZEA { get; }
        public static IntPtr _wglDXRegisterObjectNV__3P6APEAXPEAX0III_ZEA { get; }
        public static IntPtr _wglDXUnregisterObjectNV__3P6AHPEAX0_ZEA { get; }
        public static IntPtr _wglDXSetResourceShareHandleNV__3P6AHPEAX0_ZEA { get; }
        public static IntPtr _wglDXLockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA { get; }
        public static IntPtr _wglDXUnlockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA { get; }
        public static IntPtr _glBindFramebufferEXT__3P6AXII_ZEA { get; }
        public static IntPtr _glBindRenderbufferEXT__3P6AXII_ZEA { get; }
        public static IntPtr _glCheckFramebufferStatusEXT__3P6AII_ZEA { get; }
        public static IntPtr _glDeleteFramebuffersEXT__3P6AXHPEBI_ZEA { get; }
        public static IntPtr _glDeleteRenderBuffersEXT__3P6AXHPEBI_ZEA { get; }
        public static IntPtr _glFramebufferRenderbufferEXT__3P6AXIIII_ZEA { get; }
        public static IntPtr _glFramebufferTexture1DEXT__3P6AXIIIIH_ZEA { get; }
        public static IntPtr _glFramebufferTexture2DEXT__3P6AXIIIIH_ZEA { get; }
        public static IntPtr _glFramebufferTexture3DEXT__3P6AXIIIIHH_ZEA { get; }
        public static IntPtr _glGenFramebuffersEXT__3P6AXHPEAI_ZEA { get; }
        public static IntPtr _glGenRenderbuffersEXT__3P6AXHPEAI_ZEA { get; }
        public static IntPtr _glGenerateMipmapEXT__3P6AXI_ZEA { get; }
        public static IntPtr _glGetFramebufferAttachmentParameterivEXT__3P6AXIIIPEAH_ZEA { get; }
        public static IntPtr _glGetRenderbufferParameterivEXT__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glIsFramebufferEXT__3P6AEI_ZEA { get; }
        public static IntPtr _glIsRenderbufferEXT__3P6AEI_ZEA { get; }
        public static IntPtr _glRenderbufferStorageEXT__3P6AXIIHH_ZEA { get; }
        public static IntPtr _glBlitFramebufferEXT__3P6AXHHHHHHHHII_ZEA { get; }
        public static IntPtr _wglSwapIntervalEXT__3P6AHH_ZEA { get; }
        public static IntPtr _wglGetSwapIntervalEXT__3P6AHXZEA { get; }
        public static IntPtr _glGenBuffersEXT__3P6AXHPEBI_ZEA { get; }
        public static IntPtr _glDeleteBuffersEXT__3P6AXHPEBI_ZEA { get; }
        public static IntPtr _glBindBufferEXT__3P6AXII_ZEA { get; }
        public static IntPtr _glBufferDataEXT__3P6AXI_JPEBXI_ZEA { get; }
        public static IntPtr _glBufferStorageEXT__3P6AXI_JPEBXI_ZEA { get; }
        public static IntPtr _glMapBufferEXT__3P6APEAXII_ZEA { get; }
        public static IntPtr _glMapBufferRangeEXT__3P6APEAXI_J0I_ZEA { get; }
        public static IntPtr _glUnmapBufferEXT__3P6AXI_ZEA { get; }
        public static IntPtr _glGetBufferParameterivEXT__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glClientWaitSyncEXT__3P6AIPEAU__GLsync__I_K_ZEA { get; }
        public static IntPtr _glDeleteSyncEXT__3P6AXPEAU__GLsync___ZEA { get; }
        public static IntPtr _glFenceSyncEXT__3P6APEAU__GLsync__II_ZEA { get; }
        public static IntPtr _glCopyImageSubData__3P6AXIIHHHHIIHHHHHHH_ZEA { get; }
        public static IntPtr _glGetInternalFormativ__3P6AXIIIHPEAH_ZEA { get; }
        static Spout()
        {
            var path = "Spout";
            var image = CppSharp.SymbolResolver.LoadImage(ref path);
            if (image == IntPtr.Zero) throw new global::System.DllNotFoundException(path);
            _wglDXOpenDeviceNV__3P6APEAXPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXOpenDeviceNV@@3P6APEAXPEAX@ZEA");
            _wglDXCloseDeviceNV__3P6AHPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXCloseDeviceNV@@3P6AHPEAX@ZEA");
            _wglDXRegisterObjectNV__3P6APEAXPEAX0III_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXRegisterObjectNV@@3P6APEAXPEAX0III@ZEA");
            _wglDXUnregisterObjectNV__3P6AHPEAX0_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXUnregisterObjectNV@@3P6AHPEAX0@ZEA");
            _wglDXSetResourceShareHandleNV__3P6AHPEAX0_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXSetResourceShareHandleNV@@3P6AHPEAX0@ZEA");
            _wglDXLockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXLockObjectsNV@@3P6AHPEAXHPEAPEAX@ZEA");
            _wglDXUnlockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXUnlockObjectsNV@@3P6AHPEAXHPEAPEAX@ZEA");
            _glBindFramebufferEXT__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindFramebufferEXT@@3P6AXII@ZEA");
            _glBindRenderbufferEXT__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindRenderbufferEXT@@3P6AXII@ZEA");
            _glCheckFramebufferStatusEXT__3P6AII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCheckFramebufferStatusEXT@@3P6AII@ZEA");
            _glDeleteFramebuffersEXT__3P6AXHPEBI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteFramebuffersEXT@@3P6AXHPEBI@ZEA");
            _glDeleteRenderBuffersEXT__3P6AXHPEBI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteRenderBuffersEXT@@3P6AXHPEBI@ZEA");
            _glFramebufferRenderbufferEXT__3P6AXIIII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFramebufferRenderbufferEXT@@3P6AXIIII@ZEA");
            _glFramebufferTexture1DEXT__3P6AXIIIIH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFramebufferTexture1DEXT@@3P6AXIIIIH@ZEA");
            _glFramebufferTexture2DEXT__3P6AXIIIIH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFramebufferTexture2DEXT@@3P6AXIIIIH@ZEA");
            _glFramebufferTexture3DEXT__3P6AXIIIIHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFramebufferTexture3DEXT@@3P6AXIIIIHH@ZEA");
            _glGenFramebuffersEXT__3P6AXHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGenFramebuffersEXT@@3P6AXHPEAI@ZEA");
            _glGenRenderbuffersEXT__3P6AXHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGenRenderbuffersEXT@@3P6AXHPEAI@ZEA");
            _glGenerateMipmapEXT__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGenerateMipmapEXT@@3P6AXI@ZEA");
            _glGetFramebufferAttachmentParameterivEXT__3P6AXIIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetFramebufferAttachmentParameterivEXT@@3P6AXIIIPEAH@ZEA");
            _glGetRenderbufferParameterivEXT__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetRenderbufferParameterivEXT@@3P6AXIIPEAH@ZEA");
            _glIsFramebufferEXT__3P6AEI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glIsFramebufferEXT@@3P6AEI@ZEA");
            _glIsRenderbufferEXT__3P6AEI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glIsRenderbufferEXT@@3P6AEI@ZEA");
            _glRenderbufferStorageEXT__3P6AXIIHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glRenderbufferStorageEXT@@3P6AXIIHH@ZEA");
            _glBlitFramebufferEXT__3P6AXHHHHHHHHII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBlitFramebufferEXT@@3P6AXHHHHHHHHII@ZEA");
            _wglSwapIntervalEXT__3P6AHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglSwapIntervalEXT@@3P6AHH@ZEA");
            _wglGetSwapIntervalEXT__3P6AHXZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglGetSwapIntervalEXT@@3P6AHXZEA");
            _glGenBuffersEXT__3P6AXHPEBI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGenBuffersEXT@@3P6AXHPEBI@ZEA");
            _glDeleteBuffersEXT__3P6AXHPEBI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteBuffersEXT@@3P6AXHPEBI@ZEA");
            _glBindBufferEXT__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindBufferEXT@@3P6AXII@ZEA");
            _glBufferDataEXT__3P6AXI_JPEBXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBufferDataEXT@@3P6AXI_JPEBXI@ZEA");
            _glBufferStorageEXT__3P6AXI_JPEBXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBufferStorageEXT@@3P6AXI_JPEBXI@ZEA");
            _glMapBufferEXT__3P6APEAXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glMapBufferEXT@@3P6APEAXII@ZEA");
            _glMapBufferRangeEXT__3P6APEAXI_J0I_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glMapBufferRangeEXT@@3P6APEAXI_J0I@ZEA");
            _glUnmapBufferEXT__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glUnmapBufferEXT@@3P6AXI@ZEA");
            _glGetBufferParameterivEXT__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetBufferParameterivEXT@@3P6AXIIPEAH@ZEA");
            _glClientWaitSyncEXT__3P6AIPEAU__GLsync__I_K_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glClientWaitSyncEXT@@3P6AIPEAU__GLsync@@I_K@ZEA");
            _glDeleteSyncEXT__3P6AXPEAU__GLsync___ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteSyncEXT@@3P6AXPEAU__GLsync@@@ZEA");
            _glFenceSyncEXT__3P6APEAU__GLsync__II_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFenceSyncEXT@@3P6APEAU__GLsync@@II@ZEA");
            _glCopyImageSubData__3P6AXIIHHHHIIHHHHHHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCopyImageSubData@@3P6AXIIHHHHIIHHHHHHH@ZEA");
            _glGetInternalFormativ__3P6AXIIIHPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetInternalFormativ@@3P6AXIIIHPEAH@ZEA");
        }
    }
}

